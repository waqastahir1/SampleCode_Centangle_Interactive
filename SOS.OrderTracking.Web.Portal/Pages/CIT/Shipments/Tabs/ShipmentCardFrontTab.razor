@using SOS.OrderTracking.Web.Shared.ViewModels
@using SOS.OrderTracking.Web.Shared

<div class="tab-pane fade active show" id="basic_info_@(Id??item.Id)"
     role="tabpanel" aria-labelledby="basic_info_@(Id??item.Id)">
    <div class="d-flex align-items-center">
        @{
            var logo = item.CustomerCode + ".png";
        }
        <div class="symbol symbol-60 symbol-xl-80 mr-5 align-self-start align-self-xl-center">
            <img src="/assets/media/logos/@logo" onerror="this.onerror=null; this.src='/assets/media/logos/Default.png'" />
        </div>
        <div>
            <span class="font-weight-bold font-size-h6 text-dark-75 text-hover-primary">
                @item.CustomerName
            </span>
            @{
                var assignment = item.DeliveryStates.FirstOrDefault(x => x.ConsignmentStateType == ConsignmentDeliveryState.CrewAssigned);
                var inVault = item.Deliveries.Any(x => x.DeliveryState == ConsignmentDeliveryState.InTransit && (x.OrganizationType == OrganizationType.Vault || x.OrganizationType == OrganizationType.VaultOnWheels));
            }
            @if (assignment != null && assignment.Status == StateTypes.Confirmed)
            {
                @foreach (var delivery in item.Deliveries)
                {
                    <div class="d-flex flex-column flex-lg-fill">
                        <span class='@(delivery.DeliveryState  == ConsignmentDeliveryState.InTransit ?"font-weight-bolder":"")'
                              style='color:@(delivery.DeliveryState  == ConsignmentDeliveryState.InTransit ?"#1555ea":"gray"); font-size: 0.9rem; cursor: pointer;'
                              @onclick="()=> ShowCrew.InvokeAsync(delivery.CrewId)">@delivery.CrewName</span>
                    </div>
                }
            }
            else
            {
                <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin">
                    <div class="d-flex flex-column flex-lg-fill">
                        <btn @onclick="() => AssignCrewClicked.InvokeAsync(new Tuple<int, int, int>( item.Id, item.Deliveries.First().Id, item.Deliveries.First().CrewId.GetValueOrDefault()))"
                             class="font-weight-bolder" style="color:#1555ea; font-size: 0.9rem; cursor: pointer;">Assign a Crew</btn>
                    </div>
                </AuthorizeView>
            }

            <div class="mt-0">
                <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin, SOS-Headoffice-Billing, CIT">
                    <a onclick="switchTab('#__delivery_timeline_@(Id??item.Id)', '@(Id??item.Id)')"
                       class="label label-inline @(item.ConsignmentStateType == ConsignmentDeliveryState.Created ? "blinking": "") label-light-@(item.ConsignmentStateType == ConsignmentDeliveryState.Delivered?"success": item.ConsignmentStateType < ConsignmentDeliveryState.InTransit ?"danger":"warning") font-weight-bolder">
                        @(inVault ? "In Vault" : EnumHelper.GetDisplayValue(item.ConsignmentStateType))
                    </a>
                </AuthorizeView>

                <AuthorizeView Roles="BankBranch,BankHybrid, BankBranchManager, BankCPC, BankCPCManager,BANK">
                    <a onclick="switchTab('#__delivery_timeline_@(Id??item.Id)', '@(Id??item.Id)')"
                       class="label label-inline label-light-@(item.ConsignmentStateType == ConsignmentDeliveryState.Delivered?"success": item.ConsignmentStateType < ConsignmentDeliveryState.InTransit ?"danger":"warning") font-weight-bolder">
                        @(inVault ? "In Vault" : EnumHelper.GetDisplayValue(item.ConsignmentStateType))
                    </a>
                </AuthorizeView>

            </div>
        </div>

        @if (item.PlanedCollectionTime != null)
        {
            <div class="ml-8">
                <span><i class="fa fa-bell @(item.ConsignmentStateType ==  ConsignmentDeliveryState.Created ? "faa-ring animated" : "")"></i></span>
            </div>
            <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin">
                <div class="ml-2">
                    <span @onclick="() => VaultIt.InvokeAsync(new Tuple<int, int>(item.Id, item.Deliveries.First().Id))" style="cursor:pointer;">
                        <i class="@((item.PlanedDeliveryTime.GetValueOrDefault() - item.PlanedCollectionTime.GetValueOrDefault()).TotalDays>=1 ? "fa fa-location" : "")"></i>
                    </span>
                </div>
            </AuthorizeView>
            <AuthorizeView Roles="BankBranch,BankHybrid, BankBranchManager, BankCPC, BankCPCManager">
                <div class="ml-2">
                    <span style="cursor:pointer;">
                        <i class="@((item.PlanedDeliveryTime.GetValueOrDefault() - item.PlanedCollectionTime.GetValueOrDefault()).Days >= 1 ? "fa fa-location" : "")"></i>
                    </span>
                </div>

            </AuthorizeView>
        }

        @if (item.IsFinalized)
        {
            <div class="ml-8">
                <span>
                    <i class="fa fa-lock-alt text-success"></i>
                </span>
            </div>
        }
        else
        {
            <AuthorizeView Roles="BankBranch,BankHybrid, BankCPC">
                @if (item.FromPartyId == UserPartId && !item.ConsignmentStatus.HasFlag(ConsignmentStatus.InvalidShipment))
                {
                    <div class="ml-8">
                        <button class="btn btn-danger col-12 @(item.ConsignmentStateType == ConsignmentDeliveryState.ReachedPickup? "blinking":"")" @onclick="async () => await FinalizeShipment.InvokeAsync(item.Id)">Finalize It</button>
                    </div>
                }
                else
                {
                    <div class="ml-8">
                        <span>
                            <i class="fa fa-lock-open-alt text-danger"></i>
                        </span>
                    </div>
                }

            </AuthorizeView>

            <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin, BankBranchManager, BankCPCManager">
                <div class="ml-8">
                    <span>
                        <i class="fa fa-lock-open-alt text-danger"></i>
                    </span>
                </div>
            </AuthorizeView>
        }
    </div>
    <div class="d-flex align-items-center flex-wrap mt-4 row">
        <!--begin::Item-->
        <div class="d-flex align-items-center flex-lg-fill col-6">
            <span class="mr-4">
                <i class="fal fa-tally display-5 text-muted"></i>
            </span>
            @if (item.CurrencySymbol == CurrencySymbol.MixCurrency || item.CurrencySymbol == CurrencySymbol.PrizeBond || item.CurrencySymbol == CurrencySymbol.Other)
            {
                <a class="d-flex flex-column text-dark-50" onclick="switchTab('#__denomination_@(Id??item.Id)', '@(Id??item.Id)')">
                    <span class="font-weight-bolder font-size-xs">@item.CurrencySymbol.ToString()</span>
                    <span class="font-weight-bolder text-dark font-size-h7">
                        @item.AmountPKR.ToString("N0")
                    </span>
                    <span class="font-weight-bolder font-size-xs lines-1" data-toggle="tooltip" data-placement="top" title=@AmountInWords>
                        @AmountInWords
                    </span>
                </a>
            }
            else
            {
                <a class="d-flex flex-column text-dark-50" onclick="switchTab('#__denomination_@(Id??item.Id)', '@(Id??item.Id)')">
                    <span class="font-weight-bolder font-size-xs">@item.CurrencySymbol.ToString()</span>
                    <span class="font-weight-bolder text-dark font-size-h7">
                        @item.Amount.ToString("N0")
                    </span>
                    <span class="font-weight-bolder font-size-xs lines-1" data-toggle="tooltip" data-placement="top" title=@AmountInWords>
                        @AmountInWords
                    </span>
                </a>
            }
        </div>
        <!--end::Item-->

        <div class="d-flex align-items-center flex-lg-fill col-6">
            <span>

            </span>
            <span class="mr-4">
                <i class='display-5 fal fa-lg fa-@(item.DistanceStatus == DataRecordStatus.Approved ? "check-circle text-success" : "exclamation-triangle text-warning")'></i>
            </span>
            <a class="d-flex flex-column text-dark-50">
                <span class="font-weight-bolder font-size-xs">Manual# @(item.ManualShipmentCode ?? "N/A")</span>
                <span class="font-weight-bolder text-dark font-size-xs">
                    @if (@item.ShipmentType > ShipmentType.Unknown)
                    {
                        <span> @item.ShipmentType, </span>
                    }
                    <span @onclick="()=> UpdateDistance.InvokeAsync(new Tuple<int, double, DataRecordStatus>(item.Id, item.Distance, item.DistanceStatus))">@(Math.Round(item.Distance / 1000d, 1))km</span>
                </span>

                <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin, SOS-Headoffice-Billing">
                    <span class="font-weight-bolder text-dark font-size-xs">
                        @if (@item.ConsignmentStatus == ConsignmentStatus.TobePosted)
                        {
                            <small class="btn btn-xs btn-pill" style="color:#d4951c;border-color:#d4951c;">To be pushed</small>
                        }
                        else if (@item.ConsignmentStatus == ConsignmentStatus.Pushing)
                        {
                            <small class="btn btn-xs btn-pill" style="color:#3493cf;border-color:#3493cf;">Pushing</small>
                        }
                        else if (@item.ConsignmentStatus == ConsignmentStatus.Pushed)
                        {
                            <small class="btn btn-xs btn-pill" style="color: #1fa924; border-color: #1fa924;">Pushed</small>
                        }
                        else if (@item.ConsignmentStatus == ConsignmentStatus.PushingFailed)
                        {
                            <small class="btn btn-xs btn-pill" style="color:#eb1b1b;border-color:#eb1b1b;" data-toggle="tooltip" title="@item.PostingMessages">Pushing Failed</small>
                        }
                        else if (@item.ConsignmentStatus == ConsignmentStatus.DuplicateSeals)
                        {
                            <small class="btn btn-xs btn-pill" style="color:#eb1b1b;border-color:#eb1b1b;" data-toggle="tooltip" title="@item.PostingMessages">Duplicate Seals</small>
                        }
                        else
                        {
                            <small>@item.ConsignmentStatus</small>
                        }
                    </span>
                </AuthorizeView>

                <AuthorizeView Roles="BankBranch,BankHybrid, BankBranchManager, BankCPC, BankCPCManager">
                    @if (item.OriginPartyId == UserPartId)
                    {
                        @if (@item.ApprovalState.HasFlag(ConsignmentApprovalState.Draft))
                        {
                            <AuthorizeView Roles="BankBranchManager,BankHybrid, BankCPCManager" Context='_p'>
                                <small @onclick='()=> OnApprovalStateClicked.InvokeAsync(new Tuple<int,ConsignmentApprovalState> (item.Id, ConsignmentApprovalState.Approved))'
                                       class="btn btn-xs btn-pill blinking" style="color:red;border-color:red;">Approval Pending</small>
                            </AuthorizeView>
                            <AuthorizeView Roles="BankBranch,BankHybrid, BankCPC" Context='_c'>
                                <small class="btn btn-xs btn-pill blinking" style="color:red;border-color:red;">Approval Pending</small>
                            </AuthorizeView>
                        }
                        else if (@item.ApprovalState == ConsignmentApprovalState.Approved)
                        {
                            <small class="btn btn-xs btn-pill" style="color: #1fa924; border-color: #1fa924;">Approved</small>
                        }
                        else
                        {
                            <small class="btn btn-xs btn-pill" style="color:#eb1b1b;border-color:#eb1b1b;" data-toggle="tooltip" title="@item.Comments">Declined</small>
                        }
                    }
                </AuthorizeView>


            </a>
        </div>

    </div>
    <style>
        .lines-1 {
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 1; /* number of lines to show */
            -webkit-box-orient: vertical;
            vertical-align: middle;
        }
    </style>

    @if (item.PlanedCollectionTime.HasValue || item.PlanedDeliveryTime.HasValue)
    {
        <div class="row">
            <div class="col-12"><hr /></div>
        </div>
        <div class="row mt-0 mr-1">
            <span class="col-6">
                <span class="font-weight-bolder text-dark font-size-xs"><small>Required Collection Time</small></span>
                <span class="font-size-xs lines-1 font-weight-bolder font-size-xs text-dark-50">@item.PlanedCollectionTime</span>
            </span>
            <span class="col-6">
                <span class="font-weight-bolder text-dark font-size-xs"><small>Required Delivery Time</small></span>
                <span class="font-size-xs lines-1 font-weight-bolder font-size-xs text-dark-50">@item.PlanedDeliveryTime</span>
            </span>
        </div>
    }
    <div class="row">
        <div class="col-12"><hr /></div>
    </div>

    <div class="row mt-0 mr-1">
        <div class="col-11">

            <span class="text-dark-50 m1-2 ml-4 float-left w-100 font-weight-bold font-size-sm lines-1">
                <span>Pickup</span> <strong class="ml-1">@item.FromPartyCode</strong>, Station @item.FromPartyStationName
            </span><br />
            <span class="lines-1">
                <i class="fas fa-circle" style="font-size: 0.6rem; vertical-align: middle;
                    color: @(item.FromPartyGeolocation.Lat == 0 || item.FromPartyGeolocation.Lng == 0 ? "#F16A40" : "#42b542")"></i>


                <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin, SOS-Headoffice-Billing">
                    <a @onclick="() => EditBranch.InvokeAsync(new Tuple<int, int,int>(item.FromPartyId,0,item.Id))"><strong>@item.FromPartyName</strong></a>
                </AuthorizeView>
                <AuthorizeView Roles="BANK, BankBranch, BankHybrid, BankBranchManager, BankCPC, BankCPCManager, CIT">
                    <strong>@item.FromPartyName</strong>
                </AuthorizeView>

            </span>
            <span class="text-dark-50 mt-1 ml-4 float-left w-100 font-weight-bold font-size-sm lines-1">
                @(item.FromPartyAddress ?? "Address is not provided")
            </span>

        </div>
        <div class="col-1 pl-0 pr-0">
            @if (item.FromPartyGeolocation.Lat != 0 && item.FromPartyGeolocation.Lng != 0)
            {
                <a class="float-right" href="https://www.google.com/maps/place/@item.FromPartyGeolocation.Lat,@item.FromPartyGeolocation.Lng"
                   target="_blank">
                    <i class='fa fa-lg fa-@(item.FromPartyGeoStatus == DataRecordStatus.Approved ? "check-circle text-success" : "exclamation-triangle text-warning")'></i>
                </a>
            }
        </div>
    </div>
    <div class="row">
        <div class="col-12"><hr /></div>
    </div>
    <div class="row mr-1">
        <div class="col-10">
            <span class="text-dark-50 m1-2 ml-4 float-left w-100 font-weight-bold font-size-sm lines-1">
                <span>Dropoff</span> <strong class="ml-1">@item.ToPartyCode</strong>, Station @item.ToPartyStationName
            </span><br />
            <span class="lines-1">
                <i class="fas fa-circle" style="font-size: 0.6rem; vertical-align: middle;  color: @(item.ToPartyGeolocation.Lat == 0 || item.ToPartyGeolocation.Lng == 0? "#F16A40" : "#42b542")"></i>
                <AuthorizeView Roles="SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin, SOS-Headoffice-Billing">
                    <a @onclick="() => EditBranch.InvokeAsync(new Tuple<int, int,int>(0,item.ToPartyId,item.Id))"><strong>@item.ToPartyName</strong></a>
                </AuthorizeView>
                <AuthorizeView Roles="BANK, BankBranch,BankHybrid, BankBranchManager, BankCPC, BankCPCManager">
                    @if (item.ConsignmentStateType == ConsignmentDeliveryState.InTransit)
                    {
                        <a @onclick="() => ChangeDropoffBranch.InvokeAsync(new Tuple<int,string, string, int?,int>(item.ToPartyId, item.ToPartyCode,item.ToPartyName,item.BillBranchId,item.Id))"><strong>@item.ToPartyName</strong></a>
                    }
                    else
                    {
                        <strong>@item.ToPartyName</strong>
                    }
                </AuthorizeView>
                <AuthorizeView Roles="CIT">
                    <strong>@item.ToPartyName</strong>
                </AuthorizeView>
            </span>
            <span class="text-dark-50 mt-1 ml-4 float-left w-100 font-weight-bold font-size-sm lines-1">
                @(item.ToPartyAddress ?? "Address is not provided")
            </span>
            @if (item.ChangedDropOff != null)
            {
                if (item.ChangedDropOff.IsApproved)
                {
                    <a class="label label-inline label-light-warning font-weight-bolder" title='@(item.ChangedDropOff.ToPartyCode+"-"+item.ChangedDropOff.ToPartyName)'>
                        Previous Dropoff
                    </a>
                }
                else
                {
                    <a class="label label-inline blinking label-light-warning font-weight-bolder" title='@(item.ChangedDropOff.ToPartyCode+"-"+item.ChangedDropOff.ToPartyName)'>
                        New Dropoff Pending For Approval
                    </a>
                }
            }
        </div>
        <div class="col-2 pl-0 pr-0">
            @if (item.ToPartyGeolocation.Lat != 0 && item.ToPartyGeolocation.Lng != 0)
            {
                <a class="float-right" href="https://www.google.com/maps/place/@item.ToPartyGeolocation.Lat,@item.ToPartyGeolocation.Lng"
                   target="_blank">
                    <i class="fa fa-lg fa-@(item.ToPartyGeoStatus == DataRecordStatus.Approved ? "check-circle text-success" : "exclamation-triangle text-warning")"></i>
                </a>
            }
            <a target="_blank" class="float-right mr-2"
               href="https://www.google.com/maps/dir/@item.FromPartyGeolocation.Lat,@item.FromPartyGeolocation.Lng/@item.ToPartyGeolocation.Lat,@item.ToPartyGeolocation.Lng">
                <span><i class="fad fa-route ml-1" style="--fa-primary-color: #ca6546;"></i></span>
            </a>
        </div>
    </div>

</div>
@code {
    [Parameter]
    public ConsignmentListViewModel item { get; set; }

    [Parameter]
    public string AmountInWords { get; set; }

    [Parameter]
    public string UserName { get; set; }

    [Parameter]
    public int UserPartId { get; set; }


    [Parameter]
    public EventCallback<int?> ShowCrew { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, int, int>> AssignCrewClicked { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, int, int>> EditBranch { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, string, string, int?, int>> ChangeDropoffBranch { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, string, string, int?, int>> ApproveChangedDropoffBranch { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, int>> VaultIt { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, double, DataRecordStatus>> UpdateDistance { get; set; }

    [Parameter]
    public EventCallback<Tuple<int, ConsignmentApprovalState>> OnApprovalStateClicked { get; set; }


    [Parameter]
    public EventCallback<int> FinalizeShipment { get; set; }

    [Parameter]
    public int? Id { get; set; }

}
