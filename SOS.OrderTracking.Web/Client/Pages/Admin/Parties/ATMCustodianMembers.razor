@using SOS.OrderTracking.Web.Client.Services.Customers
@page "/admin/ATMCustodianMembers/{id:int}"
@using SOS.OrderTracking.Web.Client.Components
@using SOS.OrderTracking.Web.Shared
@using Radzen.Blazor
@using SOS.OrderTracking.Web.Shared.ViewModels.ATM
@inherits APICrudBaseV2<AtmCustodianMembersFormViewModel, AtmCustodianMembersListViewModel, int, AtmCustodianMembersAdditionalValueViewModel, AtmCustodianMembersService>

<CascadingValue Value="@this">
    <SubHeader Heading='Manage ATM Assembly' RowsCount="@TotalRows" HideSearch="true">
        <a @onclick="()=> OnItemClicked(0)" class="btn btn-light-warning font-weight-bold ml-2">
            Allocate ATM Members
        </a>
        <a @onclick="()=> PubSub.Hub.Default.Publish<ATMCustodianMembers>(null)" class="btn btn-secondary font-weight-bold ml-2">
            <span><i class="fa fa-times"></i></span>
        </a>
    </SubHeader>

    <FluentCard IsBusy="@IsTableBusy">
        <Notification Content="@Error" Type="NotificationCssClass.Danger"></Notification>
        @if (Items != null)
        {
            if (Items.Count() == 0)
            {
                <h4 style="text-align:center; margin:auto;">
                    This ATM assembly is empty<br />
                    <a @onclick="()=> OnItemClicked(0)" class="btn btn-secondary font-weight-bold mt-4">
                        Click here to allocate first member
                    </a>
                </h4>
            }
            else
            {
                <table class="items-table">
                    <thead>
                        <tr>
                            <th @onclick='()=>BaseIndexModel.SortColumn = $"EmployeeName-{InverseState()}"' style="cursor:pointer">
                                Name/Designation
                                @if (BaseIndexModel.SortColumn?.Split('-').First() == "EmployeeName")
                                {
                                    if (State)
                                    {
                                        <span><i class="fad fa-sort-up ml-2"></i></span>
                                    }
                                    else
                                    {
                                        <span><i class="fad fa-sort-down ml-2"></i></span>
                                    }
                                }
                            </th>
                            <th @onclick='()=>BaseIndexModel.SortColumn = $"StartDate-{InverseState()}"' style="cursor:pointer">
                                Start Date
                                @if (BaseIndexModel.SortColumn?.Split('-').First() == "StartDate")
                                {
                                    if (State)
                                    {
                                        <span><i class="fad fa-sort-up ml-2"></i></span>
                                    }
                                    else
                                    {
                                        <span><i class="fad fa-sort-down ml-2"></i></span>
                                    }
                                }
                            </th>
                            <th>End Date</th>
                        </tr>
                    </thead>
                    <tbody style="line-height:20px;">

                        @foreach (var member in Items.OrderByDescending(x => x.IsActive).ThenBy(x => x.StartDate))
                        {
                            <tr>
                                @{ string time = "";
                                    string colour = "";
                                    time = member.CheckinTime.HasValue ? member.CheckinTime.Value.ToString("HH:mm") : "";
                                    colour = string.IsNullOrEmpty(time) ? "#eb1b1b" : "#42b542";}
                                <td style="width:200px;">
                                    @member.EmployeeName <br />

                                    <small class="btn btn-xs btn-pill" style="color:@(member.IsActive?"#3493cf": "#eb1b1b");border-color:@(member.IsActive?"#3493cf": "#eb1b1b");">
                                        @member.EmployeeCode - @EnumHelper.GetDisplayValue(member.RelationshipType)
                                    </small>
                                </td>
                                <td>
                                    @member.StartDate.ToString("dd-MM-yy")
                                </td>
                                <td>
                                    @member.EndDate?.ToString("dd-MM-yy")
                                </td>
                                @*<td>@time</td>*@
                                <td style="padding:2px; text-align:right">
                                    <a class="btn btn-icon btn-light-danger btn-sm mr-2"
                                       style="cursor:pointer;" @onclick="() => OnItemClicked(member.Id)">
                                        <i class="flaticon2-pen"></i>
                                    </a>
                                    <a class="btn btn-icon btn-light-danger btn-sm mr-2"
                                       style="cursor:pointer;" @onclick="() => OnRemoveItemClicked(member.Id)">
                                        <i class="fas fa-user-minus"></i>
                                    </a>
                                </td>
                            </tr>
                        }

                    </tbody>
                </table>
            }
        }
        <EditForm Model="BaseIndexModel.CurrentIndex">
            <PaginationStrip @bind-Value="BaseIndexModel.CurrentIndex" TotalPages="TotalPages" TotalRows="TotalRows"></PaginationStrip>
        </EditForm>
    </FluentCard>


</CascadingValue>

<InputForm Id="form1"
           SelectedItem="SelectedItem"
           IsBusy="IsModalBusy"
           Heading="Allocate Custodians"
           OnCancel="()=> { SelectedItem = null;  ValidationError = null; }"
           Error="@ValidationError"
           OnValidSubmit="OnFormSubmit">
    @{ SelectedItem.ATMId = Id;}
    <div class="form-group">
        <label>Select Person</label>
        <select @bind="@SelectedItem.PersonType" class="form-control">
            <option value="1">Cashier</option>
            <option value="2">Technician</option>
        </select>
    </div>
    <div class="form-group">
        <label>Person:</label>
        <RadzenDropDown AllowClear="true" TValue="int" class="form-control"
                        Data="@People" Placeholder="Select Person" AllowFiltering="true"
                        TextProperty="Text" ValueProperty="IntValue" @bind-Value="SelectedItem.PersonId" />
    </div>
    <div class="form-group">
        <label>Start Date:</label><br />
        <RadzenDatePicker TValue="DateTime?" @bind-Value="@SelectedItem.StartDate" DateFormat="dd-MM-yyyy" />
        <ValidationMessage For="() => SelectedItem.StartDate"></ValidationMessage>
    </div>
    <div class="form-group">
        <label>End Date:</label><br />
        <RadzenDatePicker TValue="DateTime?" @bind-Value="@SelectedItem.EndDate" DateFormat="dd-MM-yyyy" />
    </div>
</InputForm>

<InputForm SelectedItem="ATMCustodianMembersOperationViewModel"
           IsBusy="IsModalBusy"
           Heading=" Relationship Detail Form"
           OnCancel="() => { ATMCustodianMembersOperationViewModel = null; ValidationError = null;}"
           Error="@ValidationError"
           OnValidSubmit="async()=> { await RemoveCrewMember(); }">
    @if (ATMCustodianMembersOperationViewModel.RelationshipId > 0)
    {
        <label>@ATMCustodianMembersOperationViewModel.PersonName will remove from this ATM do you want to proceed ?</label>
    }
</InputForm>