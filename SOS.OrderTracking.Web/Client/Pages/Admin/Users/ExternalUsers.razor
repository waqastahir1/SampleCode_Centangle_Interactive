@page "/admin/externalusers"
@using SOS.OrderTracking.Web.Shared
@using SOS.OrderTracking.Web.Shared.ViewModels.UserRoles
@using SOS.OrderTracking.Web.Client.Components
@using SOS.OrderTracking.Web.Client.Services.Admin
@using SOS.OrderTracking.Web.Shared.ViewModels.Users
@inject HttpClient Http
@inherits APICrudBaseV2<ExternalUsersViewModel, ExternalUsersListViewModel, string, UserAdditionalValueViewModel, ExternalUserService>
@attribute [Authorize(Roles = "SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin")]

<SubHeader Heading="External Users" SearchString="SearchString">
    <ChildContent>
        <div class="d-flex align-items-center">
            <a @onclick="()=> OnItemClicked(Convert.ToString(0))" class="btn btn-light-warning font-weight-bold ml-2">
                Add user
            </a>
        </div>
    </ChildContent>
</SubHeader>
<FluentCard IsBusy="@IsTableBusy">

    <Notification Content="@Error" Type="NotificationCssClass.Danger"></Notification>

    <EditForm Model="@this">

        <div class="row">
            <div class="ml-5 col-3 mt-5">
                <label>Select User Role</label>
                <Select2 @bind-Value="RoleTypeId" Datasource="RoleTypes" Id="__roletypes" />
            </div>
            <div class="ml-2 col-3 mt-5">
                <label>Select Main Customer</label>
                <Select2 Datasource="MainCustomers"
                         Id="__mainCustomers" @bind-Value="MainCustomerId"></Select2>
            </div>
        </div>
    </EditForm>

    <table class="items-table">
        <thead>
            <tr>
                <th>Code/ShortName</th>
                <th>Name</th>
                <th>User Name/Email</th>

                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Items == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var item in Items)
                {
                    <tr>
                        <td>
                            @item.shortName
                        </td>
                        <td>
                            @item.Name
                        </td>
                        <td>@item.UserName</td>

                        <td style="padding:2px; text-align:right">
                            <a class="btn btn-icon btn-light-danger btn-sm mr-2" style="cursor:pointer;" @onclick="() => OnItemClicked(item.Id)">
                                <i class="flaticon2-pen"></i>
                            </a>
                            <a class="btn btn-icon btn-light-danger btn-sm mr-2" @onclick="() => OnPasswordChangeClicked(item.Id)">
                                <i class="fas fa-key-skeleton"></i>
                            </a>
                        </td>

                    </tr>
                }
            }

        </tbody>

    </table>

    <EditForm Model="BaseIndexModel.CurrentIndex">
        <PaginationStrip @bind-Value="BaseIndexModel.CurrentIndex" TotalPages="TotalPages" TotalRows="TotalRows"></PaginationStrip>
    </EditForm>
</FluentCard>


<InputForm SelectedItem="@SelectedItem"
           OnCancel="()=> SelectedItem = null"
           IsBusy="@IsModalBusy"
           Error="@ValidationError"
           OnValidSubmit="OnFormSubmit"
           Heading="External User Form">

    @*<InputFormV2 Heading="External User Form"
                 API="@this">*@

        <div class="form-group">
            <label>User Name</label>
            <InputText @bind-Value="SelectedItem.UserName" type="text" class="form-control" autocomplete="new-password" />
            <ValidationMessage For="() => SelectedItem.UserName"></ValidationMessage>
        </div>
        @if (SelectedItem.Id == null)
        {
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="SelectedItem.Password" type="Password" class="form-control" autocomplete="new-password" />
                <ValidationMessage For="() => SelectedItem.Password"></ValidationMessage>
            </div>
        }
        <div class="form-group">
            <label>Organizations</label>
            <Select2Ajax AjaxUrl="v1/Common/SearchCustomers" Text="@SelectedItem.PartyName"
                         Id="billBranchId" @bind-Value="SelectedItem.PartyId"></Select2Ajax>
        </div>
        <div class="form-group">
            <label>Roles</label>
            <Select2 @bind-Value="SelectedItem.RoleId" Datasource="RoleTypes" id="__role" />
            <ValidationMessage For="() => SelectedItem.RoleId"></ValidationMessage>
        </div>
        <div class="form-group">
            <div class="form-group row">
                <label class="col-4 col-form-label">User Enabled</label>
                <div class="col-6">
                    <span class="switch switch-outline switch-icon switch-success">
                        <label>
                            <input type="checkbox" @bind="SelectedItem.IsEnabled" name="select">
                            <span></span>
                        </label>
                    </span>
                </div>
            </div>
        </div>
    </InputForm>

    <InputForm SelectedItem="@ChangePasswordViewModel"
               IsBusy="@IsModalBusy"
               Heading="Change Password Form"
               ZIndex="1101"
               Error="@ValidationError"
               OnCancel="()=> ChangePasswordViewModel = null"
               OnValidSubmit="@ChangePassword">

        <div class="form-group">
            <label>New Password</label>
            <InputText @bind-Value="ChangePasswordViewModel.Password" type="Password" class="form-control" autocomplete="new-password" />
            <ValidationMessage For="() => ChangePasswordViewModel.Password"></ValidationMessage>
        </div>

    </InputForm>
    @code{

        [CascadingParameter]
        private Task<AuthenticationState> authStateTask { get; set; }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                var authState = await authStateTask;
                var user = authState.User;
                var userName = user.Identity.Name;

            }
        }


    }


