@page "/admin/bankusersdetail"
@using SOS.OrderTracking.Web.Shared
@using SOS.OrderTracking.Web.Shared.Admin.BankUsersDetail
@using SOS.OrderTracking.Web.Client.Components
@using SOS.OrderTracking.Web.Client.Services.Admin
@using SOS.OrderTracking.Web.Shared.ViewModels.BankUser
@using SOS.OrderTracking.Web.Shared.ViewModels.Users
@inject HttpClient Http
@inherits APICrudBaseV2<BankUserDetailFormViewModel, BankUserDetailListViewModel, string, UserAdditionalValueViewModel, BankUsersDetailService>
@attribute [Authorize(Roles = "SOS-Admin, SOS-Regional-Admin, SOS-SubRegional-Admin")]

<SubHeader Heading="External Users" SearchString="SearchString">
    <ChildContent>
        <div class="d-flex align-items-center">
            <a @onclick="()=> OnItemClicked(Convert.ToString(0))" class="btn btn-light-warning font-weight-bold ml-2">
                Add user
            </a>
        </div>
    </ChildContent>
</SubHeader>
<FluentCard IsBusy="@IsTableBusy">

    <Notification Content="@Error" Type="NotificationCssClass.Danger"></Notification>
 
    <table class="items-table">
        <thead>
            <tr>  
                <th>Role</th>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Expiry</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (Items == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                @foreach (var item in Items)
                {
                    var color =item.IsActive ?"#1ea653": "#eb1b1b";
                     var  emailConformedcolor = item.EmailConfirmed ? "#1ea653" : "#ee8f3c";

                    <tr style="line-height:20px;">
                        <td>
                            <strong  style="color:@color;"> 
                                @(RoleTypes.FirstOrDefault(x=>x.Value == item.Role).Text)
                            </strong>
                         </td>
                          <td  style="color:@color;">@item.Name  </td>
                        <td  style="color:@color;">@item.UserName </td>
                         
                    <td style="color:@emailConformedcolor">@item.Email</td>
                       
                    <td>
                            @if(item.ExpiryDate == null)
                            {
                                  <strong >
                                   No Expiry
                                    </strong>
                        }else{
                                    @item.ExpiryDate?.ToString("dd/MMM/yyyy")
                                    <br />
                                    <strong  style="border-top: 1px gray solid">
                                        every @item.ExpiryPolicy days
                                    </strong>
                                    }
                    
                </td>

                        <td style="padding:2px; text-align:right">
                            <a class="btn btn-icon btn-light-danger btn-sm mr-2" style="cursor:pointer;" @onclick="() => OnItemClicked(item.Id)">
                                <i class="flaticon2-pen"></i>
                            </a> 
                        </td>

                    </tr>
                }
            }

        </tbody>

    </table>

    <EditForm Model="BaseIndexModel.CurrentIndex">
        <PaginationStrip @bind-Value="BaseIndexModel.CurrentIndex" TotalPages="TotalPages" TotalRows="TotalRows"></PaginationStrip>
    </EditForm>
</FluentCard>


<InputForm SelectedItem="@SelectedItem"
           OnCancel="()=> SelectedItem = null"
           IsBusy="@IsModalBusy"
           Error="@ValidationError"
           OnValidSubmit="OnFormSubmit"
           Heading="External User Form">

    @*<InputFormV2 Heading="External User Form"
                 API="@this">*@

                 <div class="form-group">
            <label>Roles</label>
            <Select2 @bind-Value="SelectedItem.RoleId" Datasource="RoleTypes" id="__role" />
            <ValidationMessage For="() => SelectedItem.RoleId"></ValidationMessage>
        </div>

        <div class="form-group">
            <label>User Name</label>
            <InputText @bind-Value="SelectedItem.UserName" type="text" class='@(SelectedItem.AutoName? "text-warning form-control":" form-control")' autocomplete="new-password" />
            <ValidationMessage For="() => SelectedItem.UserName"></ValidationMessage>
        </div>
         <div class="form-group">
                <label>Email Address</label>
                <InputText @bind-Value="SelectedItem.EmailAddress" type="email" class="form-control"  autocomplete="new-password"   />
                <ValidationMessage For="() => SelectedItem.EmailAddress"></ValidationMessage>
            </div>
        <div class="form-group">
            <label>Full Name</label>
           <InputText @bind-Value="SelectedItem.Name" class="form-control"  autocomplete="new-password"   />
        </div>
        <div class="form-group">
            <label>Password Expiry (in days)</label> 
            <InputNumber @bind-Value="SelectedItem.ExpiryPolicy" typeof="number" class="form-control"  autocomplete="new-password"   />
             <ValidationMessage For="() => SelectedItem.ExpiryPolicy"></ValidationMessage>
        </div>
        <div class="form-group">
            <div class="form-group row">
                <label class="col-4 col-form-label">User Enabled</label>
                <div class="col-6">
                    <span class="switch switch-outline switch-icon switch-success">
                        <label>
                            <input type="checkbox" @bind="SelectedItem.IsActive" name="select">
                            <span></span>
                        </label>
                    </span>
                </div>
            </div>
        </div>
    </InputForm>
 
    @code{

        [CascadingParameter]
        private Task<AuthenticationState> authStateTask { get; set; }
        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
                var authState = await authStateTask;
                var user = authState.User;
                var userName = user.Identity.Name;

            }
        }
    }


