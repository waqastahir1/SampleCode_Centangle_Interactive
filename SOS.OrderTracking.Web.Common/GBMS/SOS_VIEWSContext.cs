using Microsoft.EntityFrameworkCore;
using SOS.OrderTracking.Web.Common.GBMS.Models;
using SOS.OrderTracking.Web.Portal.GBMS.Models;

namespace SOS.OrderTracking.Web.Portal.GBMS
{
    public partial class SOS_VIEWSContext : DbContext
    {
        public SOS_VIEWSContext()
        {
        }

        public SOS_VIEWSContext(DbContextOptions<SOS_VIEWSContext> options)
            : base(options)
        {
        }
        public DbSet<SpResult> SpResults { get; set; }
        public virtual DbSet<Dbview> Dbviews { get; set; } = null!;
        public virtual DbSet<GemExpenseDisbursementVoucher> GemExpenseDisbursementVouchers { get; set; } = null!;
        public virtual DbSet<GemExpenseDisbursementVoucherDetail> GemExpenseDisbursementVoucherDetails { get; set; } = null!;
        public virtual DbSet<GemExpensePaymentApproval> GemExpensePaymentApprovals { get; set; } = null!;
        public virtual DbSet<GemExpensePaymentApprovalApprovalDetail> GemExpensePaymentApprovalApprovalDetails { get; set; } = null!;
        public virtual DbSet<GemExpensesAdvance> GemExpensesAdvances { get; set; } = null!;
        public virtual DbSet<GemExpensesSettlement> GemExpensesSettlements { get; set; } = null!;
        public virtual DbSet<GemExpensesSettlementExpenseDetail> GemExpensesSettlementExpenseDetails { get; set; } = null!;
        public virtual DbSet<GemExpensesSheet> GemExpensesSheets { get; set; } = null!;
        public virtual DbSet<GemExpensesSheetDetail> GemExpensesSheetDetails { get; set; } = null!;
        public virtual DbSet<GlChartOfAccount> GlChartOfAccounts { get; set; } = null!;
        public virtual DbSet<GlRawTransaction> GlRawTransactions { get; set; } = null!;
        public virtual DbSet<GlTransaction> GlTransactions { get; set; } = null!;
        public virtual DbSet<InvAttribute> InvAttributes { get; set; } = null!;
        public virtual DbSet<InvCostCenter> InvCostCenters { get; set; } = null!;
        public virtual DbSet<InvCustomerManagementContactPerson> InvCustomerManagementContactPeople { get; set; } = null!;
        public virtual DbSet<InvDefaultSettingsManagement> InvDefaultSettingsManagements { get; set; } = null!;
        public virtual DbSet<InvDefaultSettingsManagementGlAccountCode> InvDefaultSettingsManagementGlAccountCodes { get; set; } = null!;
        public virtual DbSet<InvDemandDecision> InvDemandDecisions { get; set; } = null!;
        public virtual DbSet<InvDemandDecisionDocumentDetail> InvDemandDecisionDocumentDetails { get; set; } = null!;
        public virtual DbSet<InvDemandDecisionTransferLocation> InvDemandDecisionTransferLocations { get; set; } = null!;
        public virtual DbSet<InvDepartment> InvDepartments { get; set; } = null!;
        public virtual DbSet<InvDirectSalesInvoice> InvDirectSalesInvoices { get; set; } = null!;
        public virtual DbSet<InvDirectSalesInvoiceDirectSalesDetail> InvDirectSalesInvoiceDirectSalesDetails { get; set; } = null!;
        public virtual DbSet<InvGoodsReceivedNote> InvGoodsReceivedNotes { get; set; } = null!;
        public virtual DbSet<InvGoodsReceivedNoteFromDemand> InvGoodsReceivedNoteFromDemands { get; set; } = null!;
        public virtual DbSet<InvGoodsReceivedNoteFromDemandDocumentDetail> InvGoodsReceivedNoteFromDemandDocumentDetails { get; set; } = null!;
        public virtual DbSet<InvGoodsReceivedNoteFromPurchaseOrder> InvGoodsReceivedNoteFromPurchaseOrders { get; set; } = null!;
        public virtual DbSet<InvGoodsReceivedNoteFromPurchaseOrderDocumentDetail> InvGoodsReceivedNoteFromPurchaseOrderDocumentDetails { get; set; } = null!;
        public virtual DbSet<InvInventoryTransferIn> InvInventoryTransferIns { get; set; } = null!;
        public virtual DbSet<InvInventoryTransferInDocumentDetail> InvInventoryTransferInDocumentDetails { get; set; } = null!;
        public virtual DbSet<InvInventoryTransferOut> InvInventoryTransferOuts { get; set; } = null!;
        public virtual DbSet<InvInventoryTransferOutDocumentDetail> InvInventoryTransferOutDocumentDetails { get; set; } = null!;
        public virtual DbSet<InvIssueAdjustment> InvIssueAdjustments { get; set; } = null!;
        public virtual DbSet<InvIssueRequisition> InvIssueRequisitions { get; set; } = null!;
        public virtual DbSet<InvIssueRequisitionDetail> InvIssueRequisitionDetails { get; set; } = null!;
        public virtual DbSet<InvIssueRequisitionFromDemandDecision> InvIssueRequisitionFromDemandDecisions { get; set; } = null!;
        public virtual DbSet<InvManufacturer> InvManufacturers { get; set; } = null!;
        public virtual DbSet<InvManufacturersContactPerson> InvManufacturersContactPeople { get; set; } = null!;
        public virtual DbSet<InvPaymentTermTemplate> InvPaymentTermTemplates { get; set; } = null!;
        public virtual DbSet<InvPaymentTermTemplatesPaymentTerm> InvPaymentTermTemplatesPaymentTerms { get; set; } = null!;
        public virtual DbSet<InvProductClassification> InvProductClassifications { get; set; } = null!;
        public virtual DbSet<InvProductClassificationCostLink> InvProductClassificationCostLinks { get; set; } = null!;
        public virtual DbSet<InvProductClassificationRate> InvProductClassificationRates { get; set; } = null!;
        public virtual DbSet<InvProductClassificationSalesLink> InvProductClassificationSalesLinks { get; set; } = null!;
        public virtual DbSet<InvProductClassificationSegmentWiseCode> InvProductClassificationSegmentWiseCodes { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileAlternateItem> InvProductMasterFileAlternateItems { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileAttribute> InvProductMasterFileAttributes { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileInventoryLevel> InvProductMasterFileInventoryLevels { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileIssuanceMandatoryField> InvProductMasterFileIssuanceMandatoryFields { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileLocation> InvProductMasterFileLocations { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileManufacturer> InvProductMasterFileManufacturers { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileSpecification> InvProductMasterFileSpecifications { get; set; } = null!;
        public virtual DbSet<InvProductMasterFileSupplier> InvProductMasterFileSuppliers { get; set; } = null!;
        public virtual DbSet<InvProject> InvProjects { get; set; } = null!;
        public virtual DbSet<InvPurchaseDemand> InvPurchaseDemands { get; set; } = null!;
        public virtual DbSet<InvPurchaseDemandDetail> InvPurchaseDemandDetails { get; set; } = null!;
        public virtual DbSet<InvPurchaseDemandSpecification> InvPurchaseDemandSpecifications { get; set; } = null!;
        public virtual DbSet<InvPurchaseEnquiry> InvPurchaseEnquiries { get; set; } = null!;
        public virtual DbSet<InvPurchaseEnquiryDetail> InvPurchaseEnquiryDetails { get; set; } = null!;
        public virtual DbSet<InvPurchaseOrder> InvPurchaseOrders { get; set; } = null!;
        public virtual DbSet<InvPurchaseOrderPaymentTerm> InvPurchaseOrderPaymentTerms { get; set; } = null!;
        public virtual DbSet<InvPurchaseOrderPurchaseOrderDetail> InvPurchaseOrderPurchaseOrderDetails { get; set; } = null!;
        public virtual DbSet<InvPurchaseOrderSpecification> InvPurchaseOrderSpecifications { get; set; } = null!;
        public virtual DbSet<InvPurchaseRequisition> InvPurchaseRequisitions { get; set; } = null!;
        public virtual DbSet<InvPurchaseRequisitionDetail> InvPurchaseRequisitionDetails { get; set; } = null!;
        public virtual DbSet<InvPurchaseReturnNote> InvPurchaseReturnNotes { get; set; } = null!;
        public virtual DbSet<InvPurchaseReturnNoteDetail> InvPurchaseReturnNoteDetails { get; set; } = null!;
        public virtual DbSet<InvReceiptAdjustment> InvReceiptAdjustments { get; set; } = null!;
        public virtual DbSet<InvRejectionReason> InvRejectionReasons { get; set; } = null!;
        public virtual DbSet<InvReplyOfEnquiry> InvReplyOfEnquiries { get; set; } = null!;
        public virtual DbSet<InvReplyOfEnquiryDetail> InvReplyOfEnquiryDetails { get; set; } = null!;
        public virtual DbSet<InvRequestForStockTransfer> InvRequestForStockTransfers { get; set; } = null!;
        public virtual DbSet<InvRequestForStockTransferDetail> InvRequestForStockTransferDetails { get; set; } = null!;
        public virtual DbSet<InvServicesReceivedNote> InvServicesReceivedNotes { get; set; } = null!;
        public virtual DbSet<InvServicesReceivedNoteDetail> InvServicesReceivedNoteDetails { get; set; } = null!;
        public virtual DbSet<InvSiteDemand> InvSiteDemands { get; set; } = null!;
        public virtual DbSet<InvSiteDemandDetail> InvSiteDemandDetails { get; set; } = null!;
        public virtual DbSet<InvStockTransferNote> InvStockTransferNotes { get; set; } = null!;
        public virtual DbSet<InvStockTransferNoteDetail> InvStockTransferNoteDetails { get; set; } = null!;
        public virtual DbSet<InvStoreReturnNote> InvStoreReturnNotes { get; set; } = null!;
        public virtual DbSet<InvStoreReturnNoteDetail> InvStoreReturnNoteDetails { get; set; } = null!;
        public virtual DbSet<InvSupplierManagement> InvSupplierManagements { get; set; } = null!;
        public virtual DbSet<InvSupplierManagementContactPerson> InvSupplierManagementContactPeople { get; set; } = null!;
        public virtual DbSet<InvSupplierManagementGlAccountCode> InvSupplierManagementGlAccountCodes { get; set; } = null!;
        public virtual DbSet<InvUnBilledGoodsReceivedNote> InvUnBilledGoodsReceivedNotes { get; set; } = null!;
        public virtual DbSet<InvUnBilledGoodsReceivedNoteDetail> InvUnBilledGoodsReceivedNoteDetails { get; set; } = null!;
        public virtual DbSet<InvUnitOfMeasurement> InvUnitOfMeasurements { get; set; } = null!;
        public virtual DbSet<InvVehicle> InvVehicles { get; set; } = null!;
        public virtual DbSet<InvWarehouse> InvWarehouses { get; set; } = null!;
        public virtual DbSet<InvWarehouseServingLocation> InvWarehouseServingLocations { get; set; } = null!;
        public virtual DbSet<LmsLeaseAgreementAssetWise> LmsLeaseAgreementAssetWises { get; set; } = null!;
        public virtual DbSet<LmsLeasePayment> LmsLeasePayments { get; set; } = null!;
        public virtual DbSet<LmsLeasePaymentAssetDetail> LmsLeasePaymentAssetDetails { get; set; } = null!;
        public virtual DbSet<LmsLeaseScheduleAssetWise> LmsLeaseScheduleAssetWises { get; set; } = null!;
        public virtual DbSet<LmsLeaseScheduleAssetWisePaymentSchedule> LmsLeaseScheduleAssetWisePaymentSchedules { get; set; } = null!;
        public virtual DbSet<LmsLeaseScheduleRevisionAssetWise> LmsLeaseScheduleRevisionAssetWises { get; set; } = null!;
        public virtual DbSet<LmsLeaseScheduleRevisionAssetWiseLastVersion> LmsLeaseScheduleRevisionAssetWiseLastVersions { get; set; } = null!;
        public virtual DbSet<LmsLeaseScheduleRevisionAssetWiseRevisedPaymentSchedule> LmsLeaseScheduleRevisionAssetWiseRevisedPaymentSchedules { get; set; } = null!;
        public virtual DbSet<PayBankCode> PayBankCodes { get; set; } = null!;
        public virtual DbSet<PayCadre> PayCadres { get; set; } = null!;
        public virtual DbSet<PayCategory> PayCategories { get; set; } = null!;
        public virtual DbSet<PayCitAllowance> PayCitAllowances { get; set; } = null!;
        public virtual DbSet<PayCitAllowancesToggle> PayCitAllowancesToggles { get; set; } = null!;
        public virtual DbSet<PayCitBankCode> PayCitBankCodes { get; set; } = null!;
        public virtual DbSet<PayCitCadre> PayCitCadres { get; set; } = null!;
        public virtual DbSet<PayCitCategory> PayCitCategories { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlyOvertime> PayCitCitMonthlyOvertimes { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlyOvertimeDetail> PayCitCitMonthlyOvertimeDetails { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlySundayDuty> PayCitCitMonthlySundayDuties { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlySundayDutyDetail> PayCitCitMonthlySundayDutyDetails { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlyVaultDuty> PayCitCitMonthlyVaultDuties { get; set; } = null!;
        public virtual DbSet<PayCitCitMonthlyVaultDutyDetail> PayCitCitMonthlyVaultDutyDetails { get; set; } = null!;
        public virtual DbSet<PayCitCommentType> PayCitCommentTypes { get; set; } = null!;
        public virtual DbSet<PayCitDeduction> PayCitDeductions { get; set; } = null!;
        public virtual DbSet<PayCitDeductionsToggle> PayCitDeductionsToggles { get; set; } = null!;
        public virtual DbSet<PayCitDepartment> PayCitDepartments { get; set; } = null!;
        public virtual DbSet<PayCitDesignation> PayCitDesignations { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMaster> PayCitEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMasterAllowance> PayCitEmployeeMasterAllowances { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMasterComment> PayCitEmployeeMasterComments { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMasterDeduction> PayCitEmployeeMasterDeductions { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMasterLoan> PayCitEmployeeMasterLoans { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeMasterSubProject> PayCitEmployeeMasterSubProjects { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeTransferToOtherPayroll> PayCitEmployeeTransferToOtherPayrolls { get; set; } = null!;
        public virtual DbSet<PayCitEmployeeTransferToOtherPayrollTransferDetail> PayCitEmployeeTransferToOtherPayrollTransferDetails { get; set; } = null!;
        public virtual DbSet<PayCitGrade> PayCitGrades { get; set; } = null!;
        public virtual DbSet<PayCitGradesAllowance> PayCitGradesAllowances { get; set; } = null!;
        public virtual DbSet<PayCitGradesDeduction> PayCitGradesDeductions { get; set; } = null!;
        public virtual DbSet<PayCitLeaveCode> PayCitLeaveCodes { get; set; } = null!;
        public virtual DbSet<PayCitLedgerPayroll> PayCitLedgerPayrolls { get; set; } = null!;
        public virtual DbSet<PayCitLedgerPayrollAllowance> PayCitLedgerPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayCitLedgerPayrollDeduction> PayCitLedgerPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayCitLoan> PayCitLoans { get; set; } = null!;
        public virtual DbSet<PayCitLocation> PayCitLocations { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyAttendance> PayCitMonthlyAttendances { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyAttendanceDetail> PayCitMonthlyAttendanceDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyLoan> PayCitMonthlyLoans { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyLoansDetail> PayCitMonthlyLoansDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyPayroll> PayCitMonthlyPayrolls { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyPayrollAllowance> PayCitMonthlyPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayCitMonthlyPayrollDeduction> PayCitMonthlyPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySalaryArrear> PayCitMonthlySalaryArrears { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySalaryArrearsAllowanceDetail> PayCitMonthlySalaryArrearsAllowanceDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySalaryArrearsDeductionDetail> PayCitMonthlySalaryArrearsDeductionDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySalaryArrearsDetail> PayCitMonthlySalaryArrearsDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySalaryArrearsLoansDetail> PayCitMonthlySalaryArrearsLoansDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySpecialAllowance> PayCitMonthlySpecialAllowances { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySpecialAllowancesDetail> PayCitMonthlySpecialAllowancesDetails { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySpecialDeduction> PayCitMonthlySpecialDeductions { get; set; } = null!;
        public virtual DbSet<PayCitMonthlySpecialDeductionsDetail> PayCitMonthlySpecialDeductionsDetails { get; set; } = null!;
        public virtual DbSet<PayCitOutlet> PayCitOutlets { get; set; } = null!;
        public virtual DbSet<PayCitPayrollDisbursement> PayCitPayrollDisbursements { get; set; } = null!;
        public virtual DbSet<PayCitPayrollDisbursementDetail> PayCitPayrollDisbursementDetails { get; set; } = null!;
        public virtual DbSet<PayCitProject> PayCitProjects { get; set; } = null!;
        public virtual DbSet<PayCitReligion> PayCitReligions { get; set; } = null!;
        public virtual DbSet<PayCitShift> PayCitShifts { get; set; } = null!;
        public virtual DbSet<PayCitSubProject> PayCitSubProjects { get; set; } = null!;
        public virtual DbSet<PayCpcAllowance> PayCpcAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcAllowancesToggle> PayCpcAllowancesToggles { get; set; } = null!;
        public virtual DbSet<PayCpcBankCode> PayCpcBankCodes { get; set; } = null!;
        public virtual DbSet<PayCpcCadre> PayCpcCadres { get; set; } = null!;
        public virtual DbSet<PayCpcCategory> PayCpcCategories { get; set; } = null!;
        public virtual DbSet<PayCpcCommentType> PayCpcCommentTypes { get; set; } = null!;
        public virtual DbSet<PayCpcDeduction> PayCpcDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcDeductionsToggle> PayCpcDeductionsToggles { get; set; } = null!;
        public virtual DbSet<PayCpcDepartment> PayCpcDepartments { get; set; } = null!;
        public virtual DbSet<PayCpcDesignation> PayCpcDesignations { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMaster> PayCpcEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMasterAllowance> PayCpcEmployeeMasterAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMasterComment> PayCpcEmployeeMasterComments { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMasterDeduction> PayCpcEmployeeMasterDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMasterLoan> PayCpcEmployeeMasterLoans { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeMasterSubProject> PayCpcEmployeeMasterSubProjects { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeTransferToOtherPayroll> PayCpcEmployeeTransferToOtherPayrolls { get; set; } = null!;
        public virtual DbSet<PayCpcEmployeeTransferToOtherPayrollTransferDetail> PayCpcEmployeeTransferToOtherPayrollTransferDetails { get; set; } = null!;
        public virtual DbSet<PayCpcGrade> PayCpcGrades { get; set; } = null!;
        public virtual DbSet<PayCpcGradesAllowance> PayCpcGradesAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcGradesDeduction> PayCpcGradesDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcLeaveCode> PayCpcLeaveCodes { get; set; } = null!;
        public virtual DbSet<PayCpcLedgerPayroll> PayCpcLedgerPayrolls { get; set; } = null!;
        public virtual DbSet<PayCpcLedgerPayrollAllowance> PayCpcLedgerPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcLedgerPayrollDeduction> PayCpcLedgerPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcLoan> PayCpcLoans { get; set; } = null!;
        public virtual DbSet<PayCpcLocation> PayCpcLocations { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyAttendance> PayCpcMonthlyAttendances { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyAttendanceDetail> PayCpcMonthlyAttendanceDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyLoan> PayCpcMonthlyLoans { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyLoansDetail> PayCpcMonthlyLoansDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyPayroll> PayCpcMonthlyPayrolls { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyPayrollAllowance> PayCpcMonthlyPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlyPayrollDeduction> PayCpcMonthlyPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySalaryArrear> PayCpcMonthlySalaryArrears { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySalaryArrearsAllowanceDetail> PayCpcMonthlySalaryArrearsAllowanceDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySalaryArrearsDeductionDetail> PayCpcMonthlySalaryArrearsDeductionDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySalaryArrearsDetail> PayCpcMonthlySalaryArrearsDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySalaryArrearsLoansDetail> PayCpcMonthlySalaryArrearsLoansDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySpecialAllowance> PayCpcMonthlySpecialAllowances { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySpecialAllowancesDetail> PayCpcMonthlySpecialAllowancesDetails { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySpecialDeduction> PayCpcMonthlySpecialDeductions { get; set; } = null!;
        public virtual DbSet<PayCpcMonthlySpecialDeductionsDetail> PayCpcMonthlySpecialDeductionsDetails { get; set; } = null!;
        public virtual DbSet<PayCpcOutlet> PayCpcOutlets { get; set; } = null!;
        public virtual DbSet<PayCpcPayrollDisbursement> PayCpcPayrollDisbursements { get; set; } = null!;
        public virtual DbSet<PayCpcPayrollDisbursementDetail> PayCpcPayrollDisbursementDetails { get; set; } = null!;
        public virtual DbSet<PayCpcProject> PayCpcProjects { get; set; } = null!;
        public virtual DbSet<PayCpcReligion> PayCpcReligions { get; set; } = null!;
        public virtual DbSet<PayCpcShift> PayCpcShifts { get; set; } = null!;
        public virtual DbSet<PayCpcSubProject> PayCpcSubProjects { get; set; } = null!;
        public virtual DbSet<PayDepartment> PayDepartments { get; set; } = null!;
        public virtual DbSet<PayDesignation> PayDesignations { get; set; } = null!;
        public virtual DbSet<PayEmployeeMaster> PayEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PayEmployeePic> PayEmployeePics { get; set; } = null!;
        public virtual DbSet<PayGrade> PayGrades { get; set; } = null!;
        public virtual DbSet<PayGuardingAllowance> PayGuardingAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingAllowancesToggle> PayGuardingAllowancesToggles { get; set; } = null!;
        public virtual DbSet<PayGuardingBankCode> PayGuardingBankCodes { get; set; } = null!;
        public virtual DbSet<PayGuardingCadre> PayGuardingCadres { get; set; } = null!;
        public virtual DbSet<PayGuardingCategory> PayGuardingCategories { get; set; } = null!;
        public virtual DbSet<PayGuardingCommentType> PayGuardingCommentTypes { get; set; } = null!;
        public virtual DbSet<PayGuardingDeduction> PayGuardingDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingDeductionsToggle> PayGuardingDeductionsToggles { get; set; } = null!;
        public virtual DbSet<PayGuardingDepartment> PayGuardingDepartments { get; set; } = null!;
        public virtual DbSet<PayGuardingDesignation> PayGuardingDesignations { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMaster> PayGuardingEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterAllowance> PayGuardingEmployeeMasterAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterComment> PayGuardingEmployeeMasterComments { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterCopy> PayGuardingEmployeeMasterCopies { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterDeduction> PayGuardingEmployeeMasterDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterLoan> PayGuardingEmployeeMasterLoans { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeMasterSubProject> PayGuardingEmployeeMasterSubProjects { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeTransferToOtherPayroll> PayGuardingEmployeeTransferToOtherPayrolls { get; set; } = null!;
        public virtual DbSet<PayGuardingEmployeeTransferToOtherPayrollTransferDetail> PayGuardingEmployeeTransferToOtherPayrollTransferDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingGrade> PayGuardingGrades { get; set; } = null!;
        public virtual DbSet<PayGuardingGradesAllowance> PayGuardingGradesAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingGradesDeduction> PayGuardingGradesDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingLeaveCode> PayGuardingLeaveCodes { get; set; } = null!;
        public virtual DbSet<PayGuardingLedgerPayroll> PayGuardingLedgerPayrolls { get; set; } = null!;
        public virtual DbSet<PayGuardingLedgerPayrollAllowance> PayGuardingLedgerPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingLedgerPayrollCopy> PayGuardingLedgerPayrollCopies { get; set; } = null!;
        public virtual DbSet<PayGuardingLedgerPayrollDeduction> PayGuardingLedgerPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingLoan> PayGuardingLoans { get; set; } = null!;
        public virtual DbSet<PayGuardingLocation> PayGuardingLocations { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyAttendance> PayGuardingMonthlyAttendances { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyAttendanceBranchWise> PayGuardingMonthlyAttendanceBranchWises { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyAttendanceBranchWiseDetail> PayGuardingMonthlyAttendanceBranchWiseDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyAttendanceDetail> PayGuardingMonthlyAttendanceDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyLoan> PayGuardingMonthlyLoans { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyLoansDetail> PayGuardingMonthlyLoansDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyPaidLeaf> PayGuardingMonthlyPaidLeaves { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyPaidLeavesDetail> PayGuardingMonthlyPaidLeavesDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyPayroll> PayGuardingMonthlyPayrolls { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyPayrollAllowance> PayGuardingMonthlyPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlyPayrollDeduction> PayGuardingMonthlyPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySalaryArrear> PayGuardingMonthlySalaryArrears { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySalaryArrearsAllowanceDetail> PayGuardingMonthlySalaryArrearsAllowanceDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySalaryArrearsDeductionDetail> PayGuardingMonthlySalaryArrearsDeductionDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySalaryArrearsDetail> PayGuardingMonthlySalaryArrearsDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySalaryArrearsLoansDetail> PayGuardingMonthlySalaryArrearsLoansDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySpecialAllowance> PayGuardingMonthlySpecialAllowances { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySpecialAllowancesDetail> PayGuardingMonthlySpecialAllowancesDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySpecialDeduction> PayGuardingMonthlySpecialDeductions { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySpecialDeductionsDetail> PayGuardingMonthlySpecialDeductionsDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingMonthlySpecialDeductionsDetailsCopy> PayGuardingMonthlySpecialDeductionsDetailsCopies { get; set; } = null!;
        public virtual DbSet<PayGuardingOutlet> PayGuardingOutlets { get; set; } = null!;
        public virtual DbSet<PayGuardingPayrollDisbursement> PayGuardingPayrollDisbursements { get; set; } = null!;
        public virtual DbSet<PayGuardingPayrollDisbursementDetail> PayGuardingPayrollDisbursementDetails { get; set; } = null!;
        public virtual DbSet<PayGuardingProject> PayGuardingProjects { get; set; } = null!;
        public virtual DbSet<PayGuardingReligion> PayGuardingReligions { get; set; } = null!;
        public virtual DbSet<PayGuardingShift> PayGuardingShifts { get; set; } = null!;
        public virtual DbSet<PayGuardingSubProject> PayGuardingSubProjects { get; set; } = null!;
        public virtual DbSet<PayLeaveCode> PayLeaveCodes { get; set; } = null!;
        public virtual DbSet<PayMgtAllowance> PayMgtAllowances { get; set; } = null!;
        public virtual DbSet<PayMgtAllowancesToggle> PayMgtAllowancesToggles { get; set; } = null!;
        public virtual DbSet<PayMgtBankCode> PayMgtBankCodes { get; set; } = null!;
        public virtual DbSet<PayMgtCadre> PayMgtCadres { get; set; } = null!;
        public virtual DbSet<PayMgtCategory> PayMgtCategories { get; set; } = null!;
        public virtual DbSet<PayMgtCommentType> PayMgtCommentTypes { get; set; } = null!;
        public virtual DbSet<PayMgtDeduction> PayMgtDeductions { get; set; } = null!;
        public virtual DbSet<PayMgtDeductionsToggle> PayMgtDeductionsToggles { get; set; } = null!;
        public virtual DbSet<PayMgtDepartment> PayMgtDepartments { get; set; } = null!;
        public virtual DbSet<PayMgtDesignation> PayMgtDesignations { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMaster> PayMgtEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMasterAllowance> PayMgtEmployeeMasterAllowances { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMasterComment> PayMgtEmployeeMasterComments { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMasterDeduction> PayMgtEmployeeMasterDeductions { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMasterLoan> PayMgtEmployeeMasterLoans { get; set; } = null!;
        public virtual DbSet<PayMgtEmployeeMasterSubProject> PayMgtEmployeeMasterSubProjects { get; set; } = null!;
        public virtual DbSet<PayMgtGrade> PayMgtGrades { get; set; } = null!;
        public virtual DbSet<PayMgtGradesAllowance> PayMgtGradesAllowances { get; set; } = null!;
        public virtual DbSet<PayMgtGradesDeduction> PayMgtGradesDeductions { get; set; } = null!;
        public virtual DbSet<PayMgtLeaveCode> PayMgtLeaveCodes { get; set; } = null!;
        public virtual DbSet<PayMgtLedgerPayroll> PayMgtLedgerPayrolls { get; set; } = null!;
        public virtual DbSet<PayMgtLedgerPayrollAllowance> PayMgtLedgerPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayMgtLedgerPayrollDeduction> PayMgtLedgerPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayMgtLoan> PayMgtLoans { get; set; } = null!;
        public virtual DbSet<PayMgtLocation> PayMgtLocations { get; set; } = null!;
        public virtual DbSet<PayMgtMonthlyPayroll> PayMgtMonthlyPayrolls { get; set; } = null!;
        public virtual DbSet<PayMgtMonthlyPayrollAllowance> PayMgtMonthlyPayrollAllowances { get; set; } = null!;
        public virtual DbSet<PayMgtMonthlyPayrollDeduction> PayMgtMonthlyPayrollDeductions { get; set; } = null!;
        public virtual DbSet<PayMgtOutlet> PayMgtOutlets { get; set; } = null!;
        public virtual DbSet<PayMgtProject> PayMgtProjects { get; set; } = null!;
        public virtual DbSet<PayMgtReligion> PayMgtReligions { get; set; } = null!;
        public virtual DbSet<PayMgtShift> PayMgtShifts { get; set; } = null!;
        public virtual DbSet<PayMgtSubProject> PayMgtSubProjects { get; set; } = null!;
        public virtual DbSet<PayReligion> PayReligions { get; set; } = null!;
        public virtual DbSet<PayShift> PayShifts { get; set; } = null!;
        public virtual DbSet<PblAdvanceForService> PblAdvanceForServices { get; set; } = null!;
        public virtual DbSet<PblAgingTemplate> PblAgingTemplates { get; set; } = null!;
        public virtual DbSet<PblAgingTemplatesTemplateDetail> PblAgingTemplatesTemplateDetails { get; set; } = null!;
        public virtual DbSet<PblCreditNote> PblCreditNotes { get; set; } = null!;
        public virtual DbSet<PblCreditNoteDocumentDetail> PblCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<PblCreditNoteEmployee> PblCreditNoteEmployees { get; set; } = null!;
        public virtual DbSet<PblCreditNoteEmployeeDocumentDetail> PblCreditNoteEmployeeDocumentDetails { get; set; } = null!;
        public virtual DbSet<PblCreditNoteReason> PblCreditNoteReasons { get; set; } = null!;
        public virtual DbSet<PblCreditNoteReasonsAccount> PblCreditNoteReasonsAccounts { get; set; } = null!;
        public virtual DbSet<PblDebitNote> PblDebitNotes { get; set; } = null!;
        public virtual DbSet<PblDebitNoteDocumentDetail> PblDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<PblDebitNoteEmployee> PblDebitNoteEmployees { get; set; } = null!;
        public virtual DbSet<PblDebitNoteEmployeeDocumentDetail> PblDebitNoteEmployeeDocumentDetails { get; set; } = null!;
        public virtual DbSet<PblDebitNoteReason> PblDebitNoteReasons { get; set; } = null!;
        public virtual DbSet<PblDebitNoteReasonsAccountCode> PblDebitNoteReasonsAccountCodes { get; set; } = null!;
        public virtual DbSet<PblDefaultSettingsManagement> PblDefaultSettingsManagements { get; set; } = null!;
        public virtual DbSet<PblDefaultSettingsManagementGlAccountCode> PblDefaultSettingsManagementGlAccountCodes { get; set; } = null!;
        public virtual DbSet<PblLocation> PblLocations { get; set; } = null!;
        public virtual DbSet<PblMasterLocation> PblMasterLocations { get; set; } = null!;
        public virtual DbSet<PblOtherGrnSupplierPaymentVoucher> PblOtherGrnSupplierPaymentVouchers { get; set; } = null!;
        public virtual DbSet<PblOtherGrnSupplierPaymentVoucherPaymentDetail> PblOtherGrnSupplierPaymentVoucherPaymentDetails { get; set; } = null!;
        public virtual DbSet<PblPaymentApproval> PblPaymentApprovals { get; set; } = null!;
        public virtual DbSet<PblPaymentApprovalApprovalDetail> PblPaymentApprovalApprovalDetails { get; set; } = null!;
        public virtual DbSet<PblPaymentApprovalDebitNoteAdjustment> PblPaymentApprovalDebitNoteAdjustments { get; set; } = null!;
        public virtual DbSet<PblPaymentTermTemplate> PblPaymentTermTemplates { get; set; } = null!;
        public virtual DbSet<PblPaymentTermTemplatesPaymentTerm> PblPaymentTermTemplatesPaymentTerms { get; set; } = null!;
        public virtual DbSet<PblService> PblServices { get; set; } = null!;
        public virtual DbSet<PblServicesAccountCode> PblServicesAccountCodes { get; set; } = null!;
        public virtual DbSet<PblServicesNature> PblServicesNatures { get; set; } = null!;
        public virtual DbSet<PblServicesReceivedNote> PblServicesReceivedNotes { get; set; } = null!;
        public virtual DbSet<PblServicesReceivedNoteDetail> PblServicesReceivedNoteDetails { get; set; } = null!;
        public virtual DbSet<PblServicesReceivedNoteMt> PblServicesReceivedNoteMts { get; set; } = null!;
        public virtual DbSet<PblServicesReceivedNoteMtDetail> PblServicesReceivedNoteMtDetails { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoice> PblSupplierInvoices { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoiceDocumentMatching> PblSupplierInvoiceDocumentMatchings { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoicePaymentVoucher> PblSupplierInvoicePaymentVouchers { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoicePaymentVoucherApprovalAdjustment> PblSupplierInvoicePaymentVoucherApprovalAdjustments { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoicePaymentVoucherPaymentDetail> PblSupplierInvoicePaymentVoucherPaymentDetails { get; set; } = null!;
        public virtual DbSet<PblSupplierInvoicePoAdvance> PblSupplierInvoicePoAdvances { get; set; } = null!;
        public virtual DbSet<PblVehicleFuelFilling> PblVehicleFuelFillings { get; set; } = null!;
        public virtual DbSet<PblVehicleFuelFillingFuelingDetail> PblVehicleFuelFillingFuelingDetails { get; set; } = null!;
        public virtual DbSet<PblVendorClass> PblVendorClasses { get; set; } = null!;
        public virtual DbSet<PblVendorClassAccountCode> PblVendorClassAccountCodes { get; set; } = null!;
        public virtual DbSet<PblVendorGrade> PblVendorGrades { get; set; } = null!;
        public virtual DbSet<PblVendorManagement> PblVendorManagements { get; set; } = null!;
        public virtual DbSet<PblVendorManagementContactPerson> PblVendorManagementContactPersons { get; set; } = null!;
        public virtual DbSet<PdwAllowance> PdwAllowances { get; set; } = null!;
        public virtual DbSet<PdwAllowancesToggle> PdwAllowancesToggles { get; set; } = null!;
        public virtual DbSet<PdwBankCode> PdwBankCodes { get; set; } = null!;
        public virtual DbSet<PdwCadre> PdwCadres { get; set; } = null!;
        public virtual DbSet<PdwCategory> PdwCategories { get; set; } = null!;
        public virtual DbSet<PdwCommentType> PdwCommentTypes { get; set; } = null!;
        public virtual DbSet<PdwDeduction> PdwDeductions { get; set; } = null!;
        public virtual DbSet<PdwDeductionsToggle> PdwDeductionsToggles { get; set; } = null!;
        public virtual DbSet<PdwDepartment> PdwDepartments { get; set; } = null!;
        public virtual DbSet<PdwDesignation> PdwDesignations { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMaster> PdwEmployeeMasters { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMasterAllowance> PdwEmployeeMasterAllowances { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMasterComment> PdwEmployeeMasterComments { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMasterDeduction> PdwEmployeeMasterDeductions { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMasterLoan> PdwEmployeeMasterLoans { get; set; } = null!;
        public virtual DbSet<PdwEmployeeMasterSubProject> PdwEmployeeMasterSubProjects { get; set; } = null!;
        public virtual DbSet<PdwEmployeePic> PdwEmployeePics { get; set; } = null!;
        public virtual DbSet<PdwGrade> PdwGrades { get; set; } = null!;
        public virtual DbSet<PdwGradesAllowance> PdwGradesAllowances { get; set; } = null!;
        public virtual DbSet<PdwGradesDeduction> PdwGradesDeductions { get; set; } = null!;
        public virtual DbSet<PdwLeaveCode> PdwLeaveCodes { get; set; } = null!;
        public virtual DbSet<PdwLoan> PdwLoans { get; set; } = null!;
        public virtual DbSet<PdwLocation> PdwLocations { get; set; } = null!;
        public virtual DbSet<PdwOutlet> PdwOutlets { get; set; } = null!;
        public virtual DbSet<PdwProject> PdwProjects { get; set; } = null!;
        public virtual DbSet<PdwReligion> PdwReligions { get; set; } = null!;
        public virtual DbSet<PdwShift> PdwShifts { get; set; } = null!;
        public virtual DbSet<PdwSubProject> PdwSubProjects { get; set; } = null!;
        public virtual DbSet<RbAlarmDebitNote> RbAlarmDebitNotes { get; set; } = null!;
        public virtual DbSet<RbAlarmDebitNoteDocumentDetail> RbAlarmDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbAlarmSalesReceipt> RbAlarmSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbAlarmSalesReceiptOtherDeductionDetail> RbAlarmSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbAlarmSalesReceiptReceiptDetail> RbAlarmSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbAlramCreditNote> RbAlramCreditNotes { get; set; } = null!;
        public virtual DbSet<RbAlramCreditNoteDocumentDetail> RbAlramCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbArea> RbAreas { get; set; } = null!;
        public virtual DbSet<RbAtmCreditNote> RbAtmCreditNotes { get; set; } = null!;
        public virtual DbSet<RbAtmCreditNoteDocumentDetail> RbAtmCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbAtmDebitNote> RbAtmDebitNotes { get; set; } = null!;
        public virtual DbSet<RbAtmDebitNoteDocumentDetail> RbAtmDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbAtmSalesTaxInvoice> RbAtmSalesTaxInvoices { get; set; } = null!;
        public virtual DbSet<RbAtmSalesTaxInvoiceAtmServiceTripDetail> RbAtmSalesTaxInvoiceAtmServiceTripDetails { get; set; } = null!;
        public virtual DbSet<RbAtmSalesTaxInvoiceCitShipmentDetail> RbAtmSalesTaxInvoiceCitShipmentDetails { get; set; } = null!;
        public virtual DbSet<RbAtmSalesTaxInvoiceInvoiceDetail> RbAtmSalesTaxInvoiceInvoiceDetails { get; set; } = null!;
        public virtual DbSet<RbAtmServiceCharge> RbAtmServiceCharges { get; set; } = null!;
        public virtual DbSet<RbAtmServiceChargesCalculationRule> RbAtmServiceChargesCalculationRules { get; set; } = null!;
        public virtual DbSet<RbAtmServiceChargesChargesRule> RbAtmServiceChargesChargesRules { get; set; } = null!;
        public virtual DbSet<RbAtmServiceType> RbAtmServiceTypes { get; set; } = null!;
        public virtual DbSet<RbAtmServiceTypesContactPerson> RbAtmServiceTypesContactPeople { get; set; } = null!;
        public virtual DbSet<RbAtmTripTransaction> RbAtmTripTransactions { get; set; } = null!;
        public virtual DbSet<RbAtmrCreditNote> RbAtmrCreditNotes { get; set; } = null!;
        public virtual DbSet<RbAtmrCreditNoteDocumentDetail> RbAtmrCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbAtmrDebitNote> RbAtmrDebitNotes { get; set; } = null!;
        public virtual DbSet<RbAtmrDebitNoteDocumentDetail> RbAtmrDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbAtmrSalesReceipt> RbAtmrSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbAtmrSalesReceiptOtherDeductionDetail> RbAtmrSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbAtmrSalesReceiptReceiptDetail> RbAtmrSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbBranchManagement> RbBranchManagements { get; set; } = null!;
        public virtual DbSet<RbCitCreditAdjustment> RbCitCreditAdjustments { get; set; } = null!;
        public virtual DbSet<RbCitCreditAdjustmentDocumentDetail> RbCitCreditAdjustmentDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCitCreditNote> RbCitCreditNotes { get; set; } = null!;
        public virtual DbSet<RbCitCreditNoteDocumentDetail> RbCitCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCitCreditNoteShipment> RbCitCreditNoteShipments { get; set; } = null!;
        public virtual DbSet<RbCitCreditNoteShipmentShipmentNumber> RbCitCreditNoteShipmentShipmentNumbers { get; set; } = null!;
        public virtual DbSet<RbCitDebitAdjustment> RbCitDebitAdjustments { get; set; } = null!;
        public virtual DbSet<RbCitDebitAdjustmentDocumentDetail> RbCitDebitAdjustmentDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCitDebitNote> RbCitDebitNotes { get; set; } = null!;
        public virtual DbSet<RbCitDebitNoteDocumentDetail> RbCitDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCitDebitNoteRecalculatedShipment> RbCitDebitNoteRecalculatedShipments { get; set; } = null!;
        public virtual DbSet<RbCitDebitNoteRecalculatedShipmentsDebitNoteDetail> RbCitDebitNoteRecalculatedShipmentsDebitNoteDetails { get; set; } = null!;
        public virtual DbSet<RbCitDebitNoteRecalculatedShipmentsShipmentDetail> RbCitDebitNoteRecalculatedShipmentsShipmentDetails { get; set; } = null!;
        public virtual DbSet<RbCitMasterReceipt> RbCitMasterReceipts { get; set; } = null!;
        public virtual DbSet<RbCitMasterReceiptOtherDeductionDetail> RbCitMasterReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbCitMasterReceiptReceiptDetail> RbCitMasterReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbCitSalesReceipt> RbCitSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbCitSalesReceiptOtherDeductionDetail> RbCitSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbCitSalesReceiptReceiptDetail> RbCitSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbCitSalesTaxInvoice> RbCitSalesTaxInvoices { get; set; } = null!;
        public virtual DbSet<RbCitSalesTaxInvoiceInvoiceDetail> RbCitSalesTaxInvoiceInvoiceDetails { get; set; } = null!;
        public virtual DbSet<RbCitSalesTaxInvoiceShipmentDetail> RbCitSalesTaxInvoiceShipmentDetails { get; set; } = null!;
        public virtual DbSet<RbCitShipment> RbCitShipments { get; set; } = null!;
        public virtual DbSet<RbCitShipmentCopy> RbCitShipmentCopies { get; set; } = null!;
        public virtual DbSet<XRbCitShipmentsCopy> XRbCitShipmentCopies { get; set; } = null!;
        public virtual DbSet<RbCitShipmentCopy02> RbCitShipmentCopy02s { get; set; } = null!;
        public virtual DbSet<RbCitShipmentCopy03> RbCitShipmentCopy03s { get; set; } = null!;
        public virtual DbSet<RbCitShipmentForeignCurrency> RbCitShipmentForeignCurrencies { get; set; } = null!;
        public virtual DbSet<RbCitShipmentSealsDetail> RbCitShipmentSealsDetails { get; set; } = null!;
        public virtual DbSet<RbCity> RbCities { get; set; } = null!;
        public virtual DbSet<RbCpcCreditNote> RbCpcCreditNotes { get; set; } = null!;
        public virtual DbSet<RbCpcCreditNoteDocumentDetail> RbCpcCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCpcDailySortingTransaction> RbCpcDailySortingTransactions { get; set; } = null!;
        public virtual DbSet<RbCpcDailySortingTransactionsSortingDetail> RbCpcDailySortingTransactionsSortingDetails { get; set; } = null!;
        public virtual DbSet<RbCpcDebitNote> RbCpcDebitNotes { get; set; } = null!;
        public virtual DbSet<RbCpcDebitNoteDocumentDetail> RbCpcDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbCpcOtherVendorShipment> RbCpcOtherVendorShipments { get; set; } = null!;
        public virtual DbSet<RbCpcOtherVendorShipmentForeignCurrency> RbCpcOtherVendorShipmentForeignCurrencies { get; set; } = null!;
        public virtual DbSet<RbCpcOtherVendorShipmentSealsDetail> RbCpcOtherVendorShipmentSealsDetails { get; set; } = null!;
        public virtual DbSet<RbCpcSalesReceipt> RbCpcSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbCpcSalesReceiptOtherDeductionDetail> RbCpcSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbCpcSalesReceiptReceiptDetail> RbCpcSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbCpcSalesTaxInvoice> RbCpcSalesTaxInvoices { get; set; } = null!;
        public virtual DbSet<RbCpcSalesTaxInvoiceInvoiceDetail> RbCpcSalesTaxInvoiceInvoiceDetails { get; set; } = null!;
        public virtual DbSet<RbCpcSalesTaxInvoiceSortingDetail> RbCpcSalesTaxInvoiceSortingDetails { get; set; } = null!;
        public virtual DbSet<RbCreditNoteReason> RbCreditNoteReasons { get; set; } = null!;
        public virtual DbSet<RbCustomerManagement> RbCustomerManagements { get; set; } = null!;
        public virtual DbSet<RbCustomerManagementContactPerson> RbCustomerManagementContactPeople { get; set; } = null!;
        public virtual DbSet<RbCustomerType> RbCustomerTypes { get; set; } = null!;
        public virtual DbSet<RbDebitNoteReason> RbDebitNoteReasons { get; set; } = null!;
        public virtual DbSet<RbDoubleRateTiming> RbDoubleRateTimings { get; set; } = null!;
        public virtual DbSet<RbDoubleRateTimingsChargingException> RbDoubleRateTimingsChargingExceptions { get; set; } = null!;
        public virtual DbSet<RbDoubleRateTimingsCitRule> RbDoubleRateTimingsCitRules { get; set; } = null!;
        public virtual DbSet<RbDoubleRateTimingsTimingException> RbDoubleRateTimingsTimingExceptions { get; set; } = null!;
        public virtual DbSet<RbFeature> RbFeatures { get; set; } = null!;
        public virtual DbSet<RbGuardingAdditionalGuardRequest> RbGuardingAdditionalGuardRequests { get; set; } = null!;
        public virtual DbSet<RbGuardingAdditionalGuardRequestGuardDetail> RbGuardingAdditionalGuardRequestGuardDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingContract> RbGuardingContracts { get; set; } = null!;
        public virtual DbSet<RbGuardingContractAdditionalGuardRequest> RbGuardingContractAdditionalGuardRequests { get; set; } = null!;
        public virtual DbSet<RbGuardingContractBranch> RbGuardingContractBranches { get; set; } = null!;
        public virtual DbSet<RbGuardingContractBranchInvoiceRate> RbGuardingContractBranchInvoiceRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractBranchesCopy> RbGuardingContractBranchesCopies { get; set; } = null!;
        public virtual DbSet<RbGuardingContractBranchesWisePaidLeaf> RbGuardingContractBranchesWisePaidLeaves { get; set; } = null!;
        public virtual DbSet<RbGuardingContractCompanyInvoiceRate> RbGuardingContractCompanyInvoiceRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractGuardCostRate> RbGuardingContractGuardCostRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractGuardRemovalRequest> RbGuardingContractGuardRemovalRequests { get; set; } = null!;
        public virtual DbSet<RbGuardingContractGuardingInvoiceRate> RbGuardingContractGuardingInvoiceRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractSalaryRate> RbGuardingContractSalaryRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractSubRegionInvoiceRate> RbGuardingContractSubRegionInvoiceRates { get; set; } = null!;
        public virtual DbSet<RbGuardingContractWeapon> RbGuardingContractWeapons { get; set; } = null!;
        public virtual DbSet<RbGuardingCreditNote> RbGuardingCreditNotes { get; set; } = null!;
        public virtual DbSet<RbGuardingCreditNoteDocumentDetail> RbGuardingCreditNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingDebitNote> RbGuardingDebitNotes { get; set; } = null!;
        public virtual DbSet<RbGuardingDebitNoteDocumentDetail> RbGuardingDebitNoteDocumentDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingMasterReceipt> RbGuardingMasterReceipts { get; set; } = null!;
        public virtual DbSet<RbGuardingMasterReceiptOtherDeductionDetail> RbGuardingMasterReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingMasterReceiptReceiptDetail> RbGuardingMasterReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesReceipt> RbGuardingSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesReceiptOtherDeductionDetail> RbGuardingSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesReceiptReceiptDetail> RbGuardingSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesTaxInvoice> RbGuardingSalesTaxInvoices { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesTaxInvoiceBranchDetail> RbGuardingSalesTaxInvoiceBranchDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesTaxInvoiceBranchDetailsNew> RbGuardingSalesTaxInvoiceBranchDetailsNews { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesTaxInvoiceInvoiceDetail> RbGuardingSalesTaxInvoiceInvoiceDetails { get; set; } = null!;
        public virtual DbSet<RbGuardingSalesTaxInvoiceOtherService> RbGuardingSalesTaxInvoiceOtherServices { get; set; } = null!;
        public virtual DbSet<RbIndustryType> RbIndustryTypes { get; set; } = null!;
        public virtual DbSet<RbIntegrationDocumentsManagement> RbIntegrationDocumentsManagements { get; set; } = null!;
        public virtual DbSet<RbIntegrationDocumentsManagementGlAccountCode> RbIntegrationDocumentsManagementGlAccountCodes { get; set; } = null!;
        public virtual DbSet<RbLocation> RbLocations { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagement> RbMainCustomerManagements { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementAtmTripRatesMapping> RbMainCustomerManagementAtmTripRatesMappings { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementBranch> RbMainCustomerManagementBranches { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementBranchFeature> RbMainCustomerManagementBranchFeatures { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementBranchesCopy> RbMainCustomerManagementBranchesCopies { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementCitBranchRate> RbMainCustomerManagementCitBranchRates { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementCitDedicatedVehicle> RbMainCustomerManagementCitDedicatedVehicles { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementCitRatesMapping> RbMainCustomerManagementCitRatesMappings { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementContactPerson> RbMainCustomerManagementContactPeople { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementFeatureCode> RbMainCustomerManagementFeatureCodes { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementFeatureDetail> RbMainCustomerManagementFeatureDetails { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementGuardingInvoiceDay> RbMainCustomerManagementGuardingInvoiceDays { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementSegmentWiseBankDetail> RbMainCustomerManagementSegmentWiseBankDetails { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementVehcileDetail> RbMainCustomerManagementVehcileDetails { get; set; } = null!;
        public virtual DbSet<RbMainCustomerManagementVehicleDetail> RbMainCustomerManagementVehicleDetails { get; set; } = null!;
        public virtual DbSet<RbOrderStatus> RbOrderStatuses { get; set; } = null!;
        public virtual DbSet<RbOrderType> RbOrderTypes { get; set; } = null!;
        public virtual DbSet<RbPaymentTermTemplate> RbPaymentTermTemplates { get; set; } = null!;
        public virtual DbSet<RbPaymentTermTemplatesPaymentTerm> RbPaymentTermTemplatesPaymentTerms { get; set; } = null!;
        public virtual DbSet<RbProductClassification> RbProductClassifications { get; set; } = null!;
        public virtual DbSet<RbProductClassificationCostLink> RbProductClassificationCostLinks { get; set; } = null!;
        public virtual DbSet<RbProjectNature> RbProjectNatures { get; set; } = null!;
        public virtual DbSet<RbRegion> RbRegions { get; set; } = null!;
        public virtual DbSet<RbRegionalOffice> RbRegionalOffices { get; set; } = null!;
        public virtual DbSet<RbRevenueAuthority> RbRevenueAuthorities { get; set; } = null!;
        public virtual DbSet<RbRevenueAuthorityTaxCode> RbRevenueAuthorityTaxCodes { get; set; } = null!;
        public virtual DbSet<RbRevenueNature> RbRevenueNatures { get; set; } = null!;
        public virtual DbSet<RbService> RbServices { get; set; } = null!;
        public virtual DbSet<RbServiceCharge> RbServiceCharges { get; set; } = null!;
        public virtual DbSet<RbServiceChargesBaseChargesRule> RbServiceChargesBaseChargesRules { get; set; } = null!;
        public virtual DbSet<RbServiceChargesCalculationRule> RbServiceChargesCalculationRules { get; set; } = null!;
        public virtual DbSet<RbServiceChargesChargesRule> RbServiceChargesChargesRules { get; set; } = null!;
        public virtual DbSet<RbServicesAccountCode> RbServicesAccountCodes { get; set; } = null!;
        public virtual DbSet<RbShipmentType> RbShipmentTypes { get; set; } = null!;
        public virtual DbSet<RbShipmentTypesContactPerson> RbShipmentTypesContactPeople { get; set; } = null!;
        public virtual DbSet<RbStation> RbStations { get; set; } = null!;
        public virtual DbSet<RbStationsBillBranch> RbStationsBillBranches { get; set; } = null!;
        public virtual DbSet<RbSubRegion> RbSubRegions { get; set; } = null!;
        public virtual DbSet<RbSubRegionsStation> RbSubRegionsStations { get; set; } = null!;
        public virtual DbSet<RbSupplierManagementContactPerson> RbSupplierManagementContactPeople { get; set; } = null!;
        public virtual DbSet<RbTimingException> RbTimingExceptions { get; set; } = null!;
        public virtual DbSet<RbTimingExceptionsApplicableDate> RbTimingExceptionsApplicableDates { get; set; } = null!;
        public virtual DbSet<RbUnitOfMeasurement> RbUnitOfMeasurements { get; set; } = null!;
        public virtual DbSet<RbVehicle> RbVehicles { get; set; } = null!;
        public virtual DbSet<RbVehicleType> RbVehicleTypes { get; set; } = null!;
        public virtual DbSet<RbWarehouse> RbWarehouses { get; set; } = null!;
        public virtual DbSet<RbWeaponType> RbWeaponTypes { get; set; } = null!;
        public virtual DbSet<RbXxxAtmSalesReceipt> RbXxxAtmSalesReceipts { get; set; } = null!;
        public virtual DbSet<RbXxxAtmSalesReceiptOtherDeductionDetail> RbXxxAtmSalesReceiptOtherDeductionDetails { get; set; } = null!;
        public virtual DbSet<RbXxxAtmSalesReceiptReceiptDetail> RbXxxAtmSalesReceiptReceiptDetails { get; set; } = null!;
        public virtual DbSet<RbZone> RbZones { get; set; } = null!;
        public virtual DbSet<Strfedbn> Strfedbns { get; set; } = null!;
        public virtual DbSet<StrfedbnD1> StrfedbnD1s { get; set; } = null!;
        public virtual DbSet<StrfedbnMl> StrfedbnMls { get; set; } = null!;
        public virtual DbSet<XShipmentAttachmentForPortal> XShipmentAttachmentsForPortal { get; set; } = null!;
        public virtual DbSet<XShipmentAttachment> XShipmentAttachments { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=194.163.141.168,1540;Initial Catalog=SOS_VIEWS;User Id=cit; password=sos@1234;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Dbview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("dbviews");

                entity.Property(e => e.Collation)
                    .HasMaxLength(128)
                    .HasColumnName("collation");

                entity.Property(e => e.Colm)
                    .HasMaxLength(128)
                    .HasColumnName("colm");

                entity.Property(e => e.Colorder).HasColumnName("colorder");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Isnullable).HasColumnName("isnullable");

                entity.Property(e => e.Length).HasColumnName("length");

                entity.Property(e => e.Prec).HasColumnName("prec");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.Tbl)
                    .HasMaxLength(128)
                    .HasColumnName("tbl");

                entity.Property(e => e.Type)
                    .HasMaxLength(128)
                    .HasColumnName("type");
            });

            modelBuilder.Entity<GemExpenseDisbursementVoucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSE_DISBURSEMENT_VOUCHER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankAccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDisbursedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISBURSED_AMOUNT");

                entity.Property(e => e.XDisbursementSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DISBURSEMENT_SELECTION");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<GemExpenseDisbursementVoucherDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSE_DISBURSEMENT_VOUCHER_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XBankAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBeneficiaryAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_ACCOUNT_NUMBER");

                entity.Property(e => e.XBeneficiaryAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_ACCOUNT_TITLE");

                entity.Property(e => e.XBeneficiaryBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_BANK_NAME");

                entity.Property(e => e.XBeneficiaryBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBeneficiaryMobileNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_MOBILE_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDocument)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT");

                entity.Property(e => e.XDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE");

                entity.Property(e => e.XDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XLocationName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_NAME");

                entity.Property(e => e.XLocationNameDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_NAME_DESCRIPTION");

                entity.Property(e => e.XPaidNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_NOW");

                entity.Property(e => e.XPayableAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAYABLE_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<GemExpensePaymentApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSE_PAYMENT_APPROVAL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDeductions)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEDUCTIONS");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XNetPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAYMENT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPaymentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE");

                entity.Property(e => e.XPaymentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<GemExpensePaymentApprovalApprovalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSE_PAYMENT_APPROVAL_APPROVAL_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalancePayable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE_PAYABLE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XDocumentLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION");

                entity.Property(e => e.XDocumentLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION_DESCRIPTION");

                entity.Property(e => e.XDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE");

                entity.Property(e => e.XDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XNa)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA");

                entity.Property(e => e.XNetAdjustment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTMENT");

                entity.Property(e => e.XNowPaying)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NOW_PAYING");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<GemExpensesAdvance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSES_ADVANCE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAdvanceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADVANCE_AMOUNT");

                entity.Property(e => e.XAdvanceDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_DETAILS");

                entity.Property(e => e.XAdvanceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_TYPE");

                entity.Property(e => e.XAdvanceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_TYPE_DESCRIPTION");

                entity.Property(e => e.XBankAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBeneficiaryAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_ACCOUNT_NUMBER");

                entity.Property(e => e.XBeneficiaryAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_ACCOUNT_TITLE");

                entity.Property(e => e.XBeneficiaryBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_BANK_NAME");

                entity.Property(e => e.XBeneficiaryBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBeneficiaryMobileNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BENEFICIARY_MOBILE_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDocumentStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_STATUS");

                entity.Property(e => e.XDocumentStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_STATUS_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<GemExpensesSettlement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSES_SETTLEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XActualAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ACTUAL_AMOUNT");

                entity.Property(e => e.XAdvanceNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_NUMBER");

                entity.Property(e => e.XAdvanceNumberDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_NUMBER_DESCRIPTION");

                entity.Property(e => e.XBalanceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE_AMOUNT");

                entity.Property(e => e.XBankOrCashAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_OR_CASH_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XExpenseDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_DETAILS");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<GemExpensesSettlementExpenseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSES_SETTLEMENT_EXPENSE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XExpenseCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_CODE");

                entity.Property(e => e.XExpenseCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_CODE_DESCRIPTION");

                entity.Property(e => e.XPurpose)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PURPOSE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<GemExpensesSheet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSES_SHEET");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XApprovedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_APPROVED_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDocumentStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_STATUS");

                entity.Property(e => e.XDocumentStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_STATUS_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XExpenseDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_DETAILS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<GemExpensesSheetDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GEM_EXPENSES_SHEET_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountApproved)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_APPROVED");

                entity.Property(e => e.XAmountRequested)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_REQUESTED");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XExpenseCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_CODE");

                entity.Property(e => e.XExpenseCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_CODE_DESCRIPTION");

                entity.Property(e => e.XPurpose)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PURPOSE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<GlChartOfAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GL_CHART_OF_ACCOUNTS");

                entity.Property(e => e.AccountClass)
                    .HasMaxLength(40)
                    .IsUnicode(false)
                    .HasColumnName("Account_Class");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_CODE");

                entity.Property(e => e.AccountDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ACCOUNT_DESC");

                entity.Property(e => e.AccountStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Status");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(8)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type");

                entity.Property(e => e.Analysis1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_1");

                entity.Property(e => e.Analysis10)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_10");

                entity.Property(e => e.Analysis2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_2");

                entity.Property(e => e.Analysis3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_3");

                entity.Property(e => e.Analysis4)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_4");

                entity.Property(e => e.Analysis5)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_5");

                entity.Property(e => e.Analysis6)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_6");

                entity.Property(e => e.Analysis7)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_7");

                entity.Property(e => e.Analysis8)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_8");

                entity.Property(e => e.Analysis9)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ANALYSIS_9");

                entity.Property(e => e.LevelCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Level_Code");

                entity.Property(e => e.LevelName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Level_Name");

                entity.Property(e => e.ManualEntry)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Manual_Entry");
            });

            modelBuilder.Entity<GlRawTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GL_RAW_TRANSACTIONS");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Code");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 5)");

                entity.Property(e => e.AssetCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Asset_code");

                entity.Property(e => e.Credit)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Code");

                entity.Property(e => e.DC)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("D_C");

                entity.Property(e => e.Debit)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DetailId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("detail_id");

                entity.Property(e => e.DetailPart)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("detail_part");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("document_date");

                entity.Property(e => e.DocumentDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Document_Desc");

                entity.Property(e => e.DocumentNumber)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Document_number");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("document_Type");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.InstrumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Instrument_Date");

                entity.Property(e => e.InstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Instrument_No");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Location_Desc");

                entity.Property(e => e.MasterId).HasColumnName("master_id");

                entity.Property(e => e.MasterPart)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Master_Part");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Project_Code");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Supplier_Code");

                entity.Property(e => e.XInstrument)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_Instrument");

                entity.Property(e => e.XPaidTo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_paid_To");

                entity.Property(e => e.Xstatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("XStatus");
            });

            modelBuilder.Entity<GlTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("GL_TRANSACTIONS");

                entity.Property(e => e.AccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Code");

                entity.Property(e => e.Amount).HasColumnType("numeric(38, 5)");

                entity.Property(e => e.AssetCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Asset_code");

                entity.Property(e => e.AssetDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Asset_Desc");

                entity.Property(e => e.Credit)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("CREDIT");

                entity.Property(e => e.CustomerCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Code");

                entity.Property(e => e.CustomerDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Customer_Desc");

                entity.Property(e => e.DC)
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .HasColumnName("D_C");

                entity.Property(e => e.Debit)
                    .HasColumnType("numeric(38, 5)")
                    .HasColumnName("DEBIT");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DepartmentDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Department_Desc");

                entity.Property(e => e.DetailId)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("detail_id");

                entity.Property(e => e.DetailPart)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("detail_part");

                entity.Property(e => e.DocumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("document_date");

                entity.Property(e => e.DocumentDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Document_Desc");

                entity.Property(e => e.DocumentNumber)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("Document_number");

                entity.Property(e => e.DocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("document_Type");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Desc");

                entity.Property(e => e.InstrumentDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Instrument_Date");

                entity.Property(e => e.InstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Instrument_No");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.LocationDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Location_Desc");

                entity.Property(e => e.MasterId).HasColumnName("master_id");

                entity.Property(e => e.MasterPart)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Master_Part");

                entity.Property(e => e.ProjectCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Project_Code");

                entity.Property(e => e.ProjectDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Project_Desc");

                entity.Property(e => e.SupplierCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Supplier_Code");

                entity.Property(e => e.SupplierDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Supplier_Desc");

                entity.Property(e => e.XInstrument)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_Instrument");

                entity.Property(e => e.XPaidTo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_paid_To");

                entity.Property(e => e.Xstatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("XStatus");
            });

            modelBuilder.Entity<InvAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_ATTRIBUTES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvCostCenter>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_COST_CENTERS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvCustomerManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_CUSTOMER_MANAGEMENT_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvDefaultSettingsManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEFAULT_SETTINGS_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvDefaultSettingsManagementGlAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEFAULT_SETTINGS_MANAGEMENT_GL_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT");

                entity.Property(e => e.XCreditAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XDebitAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT");

                entity.Property(e => e.XDebitAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XGeneralRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GENERAL_REMARKS");

                entity.Property(e => e.XNatureOfAmount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT");

                entity.Property(e => e.XNatureOfAmountDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT_DESCRIPTION");

                entity.Property(e => e.XParticularsForCreditEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_CREDIT_ENTRY");

                entity.Property(e => e.XParticularsForDebitEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_DEBIT_ENTRY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvDemandDecision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEMAND_DECISION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XComments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENTS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemandDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DATE");

                entity.Property(e => e.XDemandNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_NO");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSpecificDemand)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFIC_DEMAND");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvDemandDecisionDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEMAND_DECISION_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDecisionStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DECISION_STATUS");

                entity.Property(e => e.XDemand)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEMAND_");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUCTIONS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQtyDemanded)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QTY_DEMANDED");

                entity.Property(e => e.XRejected)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REJECTED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XToBeIssued)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_BE_ISSUED");

                entity.Property(e => e.XToBePurchased)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_BE_PURCHASED");

                entity.Property(e => e.XToBeTransferred)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_BE_TRANSFERRED");

                entity.Property(e => e.XTransferLocationsSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSFER_LOCATIONS_SELECTION");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvDemandDecisionTransferLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEMAND_DECISION_TRANSFER_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XWarehouse)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE");

                entity.Property(e => e.XWarehouseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE_DESCRIPTION");
            });

            modelBuilder.Entity<InvDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvDirectSalesInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DIRECT_SALES_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAddSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADD_S_TAX_PERCENT");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvITaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_I_TAX_PERCENT");

                entity.Property(e => e.XBuiltyNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BUILTY_NUMBER");

                entity.Property(e => e.XContactPerson)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_PERSON");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XLandlineNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE_NO");

                entity.Property(e => e.XLoadingSupervisor)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOADING_SUPERVISOR");

                entity.Property(e => e.XMobileNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE_NO");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOwnedVehicleNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OWNED_VEHICLE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRentedVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RENTED_VEHICLE_NUMBER");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSecurityRegisterNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECURITY_REGISTER_NO");

                entity.Property(e => e.XSedPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED_PERCENT");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.XVehicleRent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VEHICLE_RENT");

                entity.Property(e => e.XVehicleType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_TYPE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvDirectSalesInvoiceDirectSalesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_DIRECT_SALES_INVOICE_DIRECT_SALES_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddSTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADD_S_TAX");

                entity.Property(e => e.XAdvITax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_I_TAX");

                entity.Property(e => e.XBatchNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BATCH_NUMBER");

                entity.Property(e => e.XBatchNumberDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BATCH_NUMBER_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDiscPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISC_PERCENTAGE");

                entity.Property(e => e.XDiscount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISCOUNT");

                entity.Property(e => e.XGrossAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_AMOUNT");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XOtherDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OTHER_DETAILS");

                entity.Property(e => e.XProduct)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PRODUCT");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED");

                entity.Property(e => e.XUom)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvGoodsReceivedNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_GOODS_RECEIVED_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XBiltyNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILTY_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XDiscount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISCOUNT");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTransporterName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSPORTER_NAME");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NUMBER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvGoodsReceivedNoteFromDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_GOODS_RECEIVED_NOTE_FROM_DEMAND");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XBiltyNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILTY_NO");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XDemDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEM_DATE");

                entity.Property(e => e.XDemNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEM_NUMBER");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XETaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_E_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTransporterName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSPORTER_NAME");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XVehicleNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvGoodsReceivedNoteFromDemandDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_GOODS_RECEIVED_NOTE_FROM_DEMAND_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccepted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ACCEPTED");

                entity.Property(e => e.XAlreadyReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RECEIVED");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XInspectionDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSPECTION_DETAILS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XQtyDemanded)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QTY_DEMANDED");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRejected)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REJECTED");

                entity.Property(e => e.XRejectionReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON");

                entity.Property(e => e.XRejectionReasonDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvGoodsReceivedNoteFromPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_GOODS_RECEIVED_NOTE_FROM_PURCHASE_ORDER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XBiltyNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILTY_NO");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XETaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_E_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTransporterName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSPORTER_NAME");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XVehicleNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvGoodsReceivedNoteFromPurchaseOrderDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_GOODS_RECEIVED_NOTE_FROM_PURCHASE_ORDER_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccepted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ACCEPTED");

                entity.Property(e => e.XAlreadyReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RECEIVED");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XGrirNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRIR_NUMBER");

                entity.Property(e => e.XInspectionDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSPECTION_DETAILS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantityOrdered)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_ORDERED");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRejected)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REJECTED");

                entity.Property(e => e.XRejectionReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON");

                entity.Property(e => e.XRejectionReasonDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XToleranceQty)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLERANCE_QTY");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvInventoryTransferIn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_INVENTORY_TRANSFER_IN");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreightOwned)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT_OWNED");

                entity.Property(e => e.XFreightRented)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT_RENTED");

                entity.Property(e => e.XFromLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FROM_LOCATION");

                entity.Property(e => e.XFromLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FROM_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRentedVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RENTED_VEHICLE_NUMBER");

                entity.Property(e => e.XSecurityRegisterNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECURITY_REGISTER_NO");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XVehicleType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_TYPE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvInventoryTransferInDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_INVENTORY_TRANSFER_IN_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvInventoryTransferOut>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_INVENTORY_TRANSFER_OUT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreightOwned)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT_OWNED");

                entity.Property(e => e.XFreightRented)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT_RENTED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRentedVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RENTED_VEHICLE_NUMBER");

                entity.Property(e => e.XSecurityRegisterNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECURITY_REGISTER_NO");

                entity.Property(e => e.XToLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TO_LOCATION");

                entity.Property(e => e.XToLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TO_LOCATION_DESCRIPTION");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XVehicleType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_TYPE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvInventoryTransferOutDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_INVENTORY_TRANSFER_OUT_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvIssueAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_ISSUE_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvIssueRequisition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_ISSUE_REQUISITION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvIssueRequisitionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_ISSUE_REQUISITION_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XChargeableCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CHARGEABLE_CODE");

                entity.Property(e => e.XChargeableCodeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CHARGEABLE_CODE_NAME");

                entity.Property(e => e.XCostCenter)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_CENTER");

                entity.Property(e => e.XCostCenterDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_CENTER_DESCRIPTION");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XOdometer)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ODOMETER");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantityDemanded)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_DEMANDED");

                entity.Property(e => e.XQuantityIssued)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_ISSUED");

                entity.Property(e => e.XRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION");

                entity.Property(e => e.XRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");
            });

            modelBuilder.Entity<InvIssueRequisitionFromDemandDecision>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_ISSUE_REQUISITION_FROM_DEMAND_DECISION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemand)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_");

                entity.Property(e => e.XDemandDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvManufacturer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_MANUFACTURERS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvManufacturersContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_MANUFACTURERS_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvPaymentTermTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PAYMENT_TERM_TEMPLATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvPaymentTermTemplatesPaymentTerm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PAYMENT_TERM_TEMPLATES_PAYMENT_TERMS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL_");

                entity.Property(e => e.XSubSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUB_SERIAL");

                entity.Property(e => e.XText)
                    .HasColumnType("text")
                    .HasColumnName("X_TEXT");
            });

            modelBuilder.Entity<InvProductClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_CLASSIFICATION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XClassificationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CLASSIFICATION_CODE");

                entity.Property(e => e.XClassificationCodeDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_CLASSIFICATION_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvProductClassificationCostLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_CLASSIFICATION_COST_LINKS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCostOfStock)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK");

                entity.Property(e => e.XCostOfStockDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStockControlCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE");

                entity.Property(e => e.XStockControlCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductClassificationRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_CLASSIFICATION_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSellingRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SELLING_RATE");

                entity.Property(e => e.XStandardCost)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STANDARD_COST");

                entity.Property(e => e.XWholesaleRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHOLESALE_RATE");
            });

            modelBuilder.Entity<InvProductClassificationSalesLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_CLASSIFICATION_SALES_LINK");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XComplementary)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMPLEMENTARY");

                entity.Property(e => e.XComplementaryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMPLEMENTARY_DESCRIPTION");

                entity.Property(e => e.XDepotSales)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPOT_SALES");

                entity.Property(e => e.XDepotSalesDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPOT_SALES_DESCRIPTION");

                entity.Property(e => e.XDirectSales)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DIRECT_SALES");

                entity.Property(e => e.XDirectSalesDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DIRECT_SALES_DESCRIPTION");

                entity.Property(e => e.XExciseDuty)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXCISE_DUTY");

                entity.Property(e => e.XExciseDutyDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EXCISE_DUTY_DESCRIPTION");

                entity.Property(e => e.XFactorySales)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FACTORY_SALES");

                entity.Property(e => e.XFactorySalesDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FACTORY_SALES_DESCRIPTION");

                entity.Property(e => e.XMarketingSamples)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MARKETING_SAMPLES");

                entity.Property(e => e.XMarketingSamplesDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MARKETING_SAMPLES_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_ACCOUNT");

                entity.Property(e => e.XSalesAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSalesTaxDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_DESCRIPTION");

                entity.Property(e => e.XTradeDiscount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TRADE_DISCOUNT");

                entity.Property(e => e.XTradeDiscountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRADE_DISCOUNT_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductClassificationSegmentWiseCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_CLASSIFICATION_SEGMENT_WISE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCostOfStock)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK");

                entity.Property(e => e.XCostOfStockDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSegment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SEGMENT");

                entity.Property(e => e.XSegmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SEGMENT_DESCRIPTION");

                entity.Property(e => e.XStockControlCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE");

                entity.Property(e => e.XStockControlCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductMasterFileAlternateItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_ALTERNATE_ITEMS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XItemCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvProductMasterFileAttribute>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_ATTRIBUTES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAttributeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTRIBUTE_CODE");

                entity.Property(e => e.XAttributeCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTRIBUTE_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XNumericValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NUMERIC_VALUE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTextValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TEXT_VALUE");
            });

            modelBuilder.Entity<InvProductMasterFileInventoryLevel>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_INVENTORY_LEVELS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XLeadTime)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LEAD_TIME");

                entity.Property(e => e.XMaxOrderQty)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAX_ORDER_QTY");

                entity.Property(e => e.XMaximumBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM_BALANCE");

                entity.Property(e => e.XMinOrderQty)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MIN_ORDER_QTY");

                entity.Property(e => e.XMinimumBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM_BALANCE");

                entity.Property(e => e.XReOrderQty)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RE_ORDER_QTY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XWarehouseCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE_CODE");

                entity.Property(e => e.XWarehouseCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductMasterFileIssuanceMandatoryField>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_ISSUANCE_MANDATORY_FIELDS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XIssuanceFieldName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ISSUANCE_FIELD_NAME");

                entity.Property(e => e.XIssuanceFieldNameDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ISSUANCE_FIELD_NAME_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvProductMasterFileLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BIN");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRack)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RACK");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRoom)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ROOM");

                entity.Property(e => e.XShelf)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHELF");

                entity.Property(e => e.XWarehouse)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE");

                entity.Property(e => e.XWarehouseDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_WAREHOUSE_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductMasterFileManufacturer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_MANUFACTURERS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBrandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRAND_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCountry)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COUNTRY");

                entity.Property(e => e.XCountryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COUNTRY_DESCRIPTION");

                entity.Property(e => e.XManufacturer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUFACTURER");

                entity.Property(e => e.XManufacturerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUFACTURER_DESCRIPTION");

                entity.Property(e => e.XPackingSize)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE");

                entity.Property(e => e.XPackingSize2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE_2");

                entity.Property(e => e.XPackingSize3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE_3");

                entity.Property(e => e.XPackingSize4)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE_4");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XUomDescription)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM_DESCRIPTION");
            });

            modelBuilder.Entity<InvProductMasterFileSpecification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_SPECIFICATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAppearance)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPEARANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XColour)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COLOUR");

                entity.Property(e => e.XDimension1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DIMENSION___1");

                entity.Property(e => e.XDimension2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DIMENSION___2");

                entity.Property(e => e.XDimension3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DIMENSION___3");

                entity.Property(e => e.XLifeInMonths)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LIFE_IN_MONTHS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShelfLife)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHELF_LIFE");

                entity.Property(e => e.XSpecification1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATION___1");

                entity.Property(e => e.XSpecification2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATION___2");

                entity.Property(e => e.XSpecification3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATION___3");
            });

            modelBuilder.Entity<InvProductMasterFileSupplier>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PRODUCT_MASTER_FILE_SUPPLIERS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCountryOfOrigin)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COUNTRY_OF_ORIGIN");

                entity.Property(e => e.XCountryOfOriginDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COUNTRY_OF_ORIGIN_DESCRIPTION");

                entity.Property(e => e.XPackingSize)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE");

                entity.Property(e => e.XPackingSize2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE_2");

                entity.Property(e => e.XPackingSize3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PACKING_SIZE_3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XSupplierDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_DESCRIPTION");

                entity.Property(e => e.XSupplierItemCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_ITEM_CODE");

                entity.Property(e => e.XSupplierRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUPPLIER_RATE");
            });

            modelBuilder.Entity<InvProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvPurchaseDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_DEMAND");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XComments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENTS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemandType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_TYPE");

                entity.Property(e => e.XDemandTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_TYPE_DESCRIPTION");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvPurchaseDemandDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_DEMAND_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEstimatedCost)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ESTIMATED_COST");

                entity.Property(e => e.XInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUCTIONS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XQuantityRequired)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_REQUIRED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvPurchaseDemandSpecification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_DEMAND_SPECIFICATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL");

                entity.Property(e => e.XSpcification)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPCIFICATION");
            });

            modelBuilder.Entity<InvPurchaseEnquiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ENQUIRY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemand)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_");

                entity.Property(e => e.XDemandDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DATE");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSpecificDemand)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFIC_DEMAND");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvPurchaseEnquiryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ENQUIRY_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDemand)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEMAND_");

                entity.Property(e => e.XDemandDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUCTIONS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantityRequired)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_REQUIRED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequiredDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUIRED_DATE");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvPurchaseOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ORDER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XContactPersonDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_PERSON_DETAILS");

                entity.Property(e => e.XCreditPeriod)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_PERIOD");

                entity.Property(e => e.XCurrency)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY");

                entity.Property(e => e.XCurrencyDescription)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDeliveryTerms)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TERMS");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XETaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_E_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XFreightPaidBy)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FREIGHT_PAID_BY");

                entity.Property(e => e.XModeOfPayment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MODE_OF_PAYMENT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPartialShipment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTIAL_SHIPMENT");

                entity.Property(e => e.XPartialShipmentDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTIAL_SHIPMENT_DESCRIPTION");

                entity.Property(e => e.XPaymentTermsTemplate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TERMS_TEMPLATE");

                entity.Property(e => e.XPaymentTermsTemplateDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TERMS_TEMPLATE_DESCRIPTION");

                entity.Property(e => e.XPoSourceDocument)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_SOURCE_DOCUMENT");

                entity.Property(e => e.XPoType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_TYPE");

                entity.Property(e => e.XPoTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_TYPE_DESCRIPTION");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSourceDoc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOURCE_DOC_");

                entity.Property(e => e.XSourceDocDt)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SOURCE_DOC_DT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XSupplierName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_NAME");

                entity.Property(e => e.XSupplierRef)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_REF_");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvPurchaseOrderPaymentTerm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ORDER_PAYMENT_TERMS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XPaymentTermsText)
                    .HasColumnType("text")
                    .HasColumnName("X_PAYMENT_TERMS_TEXT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL_");

                entity.Property(e => e.XSubSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUB_SERIAL");
            });

            modelBuilder.Entity<InvPurchaseOrderPurchaseOrderDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ORDER_PURCHASE_ORDER_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBrandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRAND_NAME");

                entity.Property(e => e.XDeliveryAddressInText)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_ADDRESS_IN_TEXT");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XDestinationLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_LOCATION");

                entity.Property(e => e.XDestinationLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_LOCATION_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XMultipleSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MULTIPLE_SPECIFICATIONS");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XPackingInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PACKING_INSTRUCTIONS");

                entity.Property(e => e.XPrintedName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PRINTED_NAME");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequiredDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUIRED_DATE");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSourceBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SOURCE_BALANCE");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XTolerancePercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLERANCE_PERCENT");

                entity.Property(e => e.XTotalValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_VALUE");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvPurchaseOrderSpecification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_ORDER_SPECIFICATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL_");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");
            });

            modelBuilder.Entity<InvPurchaseRequisition>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_REQUISITION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemand)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_");

                entity.Property(e => e.XDemandDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvPurchaseRequisitionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_REQUISITION_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUCTIONS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantityRequired)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_REQUIRED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequiredDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUIRED_DATE");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvPurchaseReturnNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_RETURN_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XETaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_E_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XGrnDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_GRN_DATE");

                entity.Property(e => e.XGrnDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRN_DOCUMENT_TYPE");

                entity.Property(e => e.XGrnDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GRN_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XGrnNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRN_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_OGP_DATE");

                entity.Property(e => e.XOgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OGP_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvPurchaseReturnNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_PURCHASE_RETURN_NOTE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyReturned)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RETURNED");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XPurchased)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PURCHASED");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(18, 3)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRejectionReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON");

                entity.Property(e => e.XRejectionReasonDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XReturnedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RETURNED_NOW");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvReceiptAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_RECEIPT_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvRejectionReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_REJECTION_REASONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvReplyOfEnquiry>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_REPLY_OF_ENQUIRY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XETaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_E_TAX_PERCENT");

                entity.Property(e => e.XEnquiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENQUIRY_DATE");

                entity.Property(e => e.XEnquiryNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ENQUIRY_NO");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvReplyOfEnquiryDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_REPLY_OF_ENQUIRY_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XMake)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAKE");

                entity.Property(e => e.XModel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MODEL");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XPurchaseOrderSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PURCHASE_ORDER_SELECTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvRequestForStockTransfer>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_REQUEST_FOR_STOCK_TRANSFER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XToLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TO_LOCATION");

                entity.Property(e => e.XToLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TO_LOCATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvRequestForStockTransferDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_REQUEST_FOR_STOCK_TRANSFER_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XVehicleNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NO");
            });

            modelBuilder.Entity<InvServicesReceivedNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SERVICES_RECEIVED_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XBiltyNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILTY_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XDiscount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISCOUNT");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTransporterName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSPORTER_NAME");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NUMBER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvServicesReceivedNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SERVICES_RECEIVED_NOTE_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccepted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ACCEPTED");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XInspectionDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSPECTION_DETAILS");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED");

                entity.Property(e => e.XRejected)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REJECTED");

                entity.Property(e => e.XRejectionReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON");

                entity.Property(e => e.XRejectionReasonDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvSiteDemand>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SITE_DEMAND");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XComments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENTS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDemandDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_DESCRIPTION");

                entity.Property(e => e.XDemandType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_TYPE");

                entity.Property(e => e.XDemandTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DEMAND_TYPE_DESCRIPTION");

                entity.Property(e => e.XDocStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOC_STATUS");

                entity.Property(e => e.XDocStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOC_STATUS_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvSiteDemandDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SITE_DEMAND_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XInstructions)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUCTIONS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XQuantityRequired)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_REQUIRED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSpecifications)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SPECIFICATIONS");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");
            });

            modelBuilder.Entity<InvStockTransferNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_STOCK_TRANSFER_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvStockTransferNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_STOCK_TRANSFER_NOTE_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XNA)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XNADescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_N_A_DESCRIPTION");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XToLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TO_LOCATION");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XVehicleNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NO");
            });

            modelBuilder.Entity<InvStoreReturnNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_STORE_RETURN_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvStoreReturnNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_STORE_RETURN_NOTE_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XQuantityReturned)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY_RETURNED");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRateType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_TYPE");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvSupplierManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SUPPLIER_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvSupplierManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SUPPLIER_MANAGEMENT_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvSupplierManagementGlAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_SUPPLIER_MANAGEMENT_GL_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT");

                entity.Property(e => e.XCreditAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCreditAmountToSupplier)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_AMOUNT_TO_SUPPLIER");

                entity.Property(e => e.XDebitAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT");

                entity.Property(e => e.XDebitAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XNatureOfAmount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT");

                entity.Property(e => e.XNatureOfAmountDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT_DESCRIPTION");

                entity.Property(e => e.XParticularsForCreditEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_CREDIT_ENTRY");

                entity.Property(e => e.XParticularsForDebitEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_DEBIT_ENTRY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<InvUnBilledGoodsReceivedNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_UN_BILLED_GOODS_RECEIVED_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XBiltyNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILTY_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XDiscount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISCOUNT");

                entity.Property(e => e.XDriverName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_NAME");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTransporterName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRANSPORTER_NAME");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XVehicleNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_NUMBER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<InvUnBilledGoodsReceivedNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_UN_BILLED_GOODS_RECEIVED_NOTE_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccepted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ACCEPTED");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XInspectionDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSPECTION_DETAILS");

                entity.Property(e => e.XItemCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ITEM_CODE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED");

                entity.Property(e => e.XRejected)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REJECTED");

                entity.Property(e => e.XRejectionReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON");

                entity.Property(e => e.XRejectionReasonDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REJECTION_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XUnloading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNLOADING");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<InvUnitOfMeasurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_UNIT_OF_MEASUREMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvVehicle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_VEHICLE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRegistration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGISTRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_WAREHOUSE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGrndLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GRND_LIMIT");

                entity.Property(e => e.XMasterLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MASTER_LOCATION");

                entity.Property(e => e.XMasterLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MASTER_LOCATION_DESCRIPTION");

                entity.Property(e => e.XMonthlyLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_LIMIT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XWhCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_WH_CODE");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<InvWarehouseServingLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("INV_WAREHOUSE_SERVING_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<LmsLeaseAgreementAssetWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_AGREEMENT___ASSET_WISE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XBankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE");

                entity.Property(e => e.XBankCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDownPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DOWN_PAYMENT");

                entity.Property(e => e.XDpPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DP_PERCENT");

                entity.Property(e => e.XInsRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INS_RATE");

                entity.Property(e => e.XInstallments)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENTS");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XLeaseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE");

                entity.Property(e => e.XLeaseTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE_DESCRIPTION");

                entity.Property(e => e.XLoanAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOAN_AMOUNT");

                entity.Property(e => e.XMarkupRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MARKUP_RATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XProcessingFee)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PROCESSING_FEE");

                entity.Property(e => e.XPurchasePrice)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PURCHASE_PRICE");

                entity.Property(e => e.XRegisteration)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REGISTERATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTenureYears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TENURE_YEARS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<LmsLeasePayment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_PAYMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE");

                entity.Property(e => e.XBankCodeClubbingInVoucher)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE_CLUBBING_IN_VOUCHER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XLeaseMonth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_MONTH");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<LmsLeasePaymentAssetDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_PAYMENT_ASSET_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAssetCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_CODE");

                entity.Property(e => e.XAssetCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_CODE_DESCRIPTION");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XPaymentDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_DATE");

                entity.Property(e => e.XPrinciple)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_PAYMENT");
            });

            modelBuilder.Entity<LmsLeaseScheduleAssetWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_SCHEDULE___ASSET_WISE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAgreement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_AGREEMENT");

                entity.Property(e => e.XAgreementDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AGREEMENT_DESCRIPTION");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XBankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE");

                entity.Property(e => e.XBankCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDownPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DOWN_PAYMENT");

                entity.Property(e => e.XDpPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DP_PERCENT");

                entity.Property(e => e.XInsRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INS_RATE");

                entity.Property(e => e.XInstallments)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENTS");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XLeaseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE");

                entity.Property(e => e.XLeaseTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE_DESCRIPTION");

                entity.Property(e => e.XLoanAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOAN_AMOUNT");

                entity.Property(e => e.XMarkupRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MARKUP_RATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XProcessingFee)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PROCESSING_FEE");

                entity.Property(e => e.XPurchasePrice)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PURCHASE_PRICE");

                entity.Property(e => e.XRegisteration)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REGISTERATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTenureYears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TENURE_YEARS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<LmsLeaseScheduleAssetWisePaymentSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_SCHEDULE___ASSET_WISE_PAYMENT_SCHEDULE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XPaymentDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_DATE");

                entity.Property(e => e.XPrinciple)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_PAYMENT");
            });

            modelBuilder.Entity<LmsLeaseScheduleRevisionAssetWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_SCHEDULE_REVISION___ASSET_WISE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAgreement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_AGREEMENT");

                entity.Property(e => e.XAgreementDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AGREEMENT_DESCRIPTION");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XBankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE");

                entity.Property(e => e.XBankCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_CODE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDownPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DOWN_PAYMENT");

                entity.Property(e => e.XDpPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DP_PERCENT");

                entity.Property(e => e.XInsRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INS_RATE");

                entity.Property(e => e.XInstallments)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENTS");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XLeaseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE");

                entity.Property(e => e.XLeaseTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASE_TYPE_DESCRIPTION");

                entity.Property(e => e.XLoanAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOAN_AMOUNT");

                entity.Property(e => e.XMarkupRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MARKUP_RATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XProcessingFee)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PROCESSING_FEE");

                entity.Property(e => e.XPurchasePrice)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PURCHASE_PRICE");

                entity.Property(e => e.XRegisteration)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REGISTERATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XTenureYears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TENURE_YEARS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<LmsLeaseScheduleRevisionAssetWiseLastVersion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_SCHEDULE_REVISION___ASSET_WISE_LAST_VERSION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XPaymentDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_DATE");

                entity.Property(e => e.XPrinciple)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_PAYMENT");
            });

            modelBuilder.Entity<LmsLeaseScheduleRevisionAssetWiseRevisedPaymentSchedule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("LMS_LEASE_SCHEDULE_REVISION___ASSET_WISE_REVISED_PAYMENT_SCHEDULE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XInsurance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSURANCE");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XPaymentDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_DATE");

                entity.Property(e => e.XPrinciple)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_PAYMENT");
            });

            modelBuilder.Entity<PayBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitAllowancesToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_ALLOWANCES_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayCitBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitCitMonthlyOvertime>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_OVERTIME");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ACTIVITY_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XActivityDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ACTIVITY_DATE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitCitMonthlyOvertimeDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_OVERTIME_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_TIME");

                entity.Property(e => e.DStartTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_TIME");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XEndTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_TIME");

                entity.Property(e => e.XHours)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_HOURS");

                entity.Property(e => e.XManualShipmentNumbers)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_SHIPMENT_NUMBERS");

                entity.Property(e => e.XMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY");

                entity.Property(e => e.XShipment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT");

                entity.Property(e => e.XShipmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_DESCRIPTION");

                entity.Property(e => e.XStartTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_TIME");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitCitMonthlySundayDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_SUNDAY_DUTY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ACTIVITY_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XActivityDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ACTIVITY_DATE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitCitMonthlySundayDutyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_SUNDAY_DUTY_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XHours)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_HOURS");

                entity.Property(e => e.XManualShipmentNumbers)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_SHIPMENT_NUMBERS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY");

                entity.Property(e => e.XShipment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT");

                entity.Property(e => e.XShipmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitCitMonthlyVaultDuty>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_VAULT_DUTY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DActivityDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ACTIVITY_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XActivityDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ACTIVITY_DATE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XVaultAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitCitMonthlyVaultDutyDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_CIT_MONTHLY_VAULT_DUTY_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XHours)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_HOURS");

                entity.Property(e => e.XManualShipmentNumbers)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_SHIPMENT_NUMBERS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY");

                entity.Property(e => e.XShipment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT");

                entity.Property(e => e.XShipmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitCommentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_COMMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitDeductionsToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_DEDUCTIONS_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayCitDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_CONTRACT_DATE");

                entity.Property(e => e.DDateOfBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE_OF_BIRTH");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DJoiningDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_JOINING_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCalculationMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE");

                entity.Property(e => e.XCalculationModeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPayRate)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_PAY_RATE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitEmployeeMasterAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitEmployeeMasterComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER_COMMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCommentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE");

                entity.Property(e => e.XCommentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XOccasionForComment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OCCASION_FOR_COMMENT");

                entity.Property(e => e.XRemarks1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___1");

                entity.Property(e => e.XRemarks2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___2");

                entity.Property(e => e.XRemarks3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___3");
            });

            modelBuilder.Entity<PayCitEmployeeMasterDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStaringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XNA)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStaringDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitEmployeeMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XLumpSum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LUMP_SUM");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayCitEmployeeMasterSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_MASTER_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENTAGE");

                entity.Property(e => e.XProjectCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE");

                entity.Property(e => e.XProjectCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayCitEmployeeTransferToOtherPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDestinationPayroll)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL");

                entity.Property(e => e.XDestinationPayrollDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitEmployeeTransferToOtherPayrollTransferDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL_TRANSFER_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitGradesAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_GRADES_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitGradesDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_GRADES_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitLedgerPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LEDGER_PAYROLL");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitLedgerPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LEDGER_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitLedgerPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LEDGER_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGlVoucherParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GL_VOUCHER_PARTICULARS");

                entity.Property(e => e.XLoanType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_TYPE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankAndBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_AND_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XManagerTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANAGER_TITLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSignatoryDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_DESIGNATION");

                entity.Property(e => e.XSignatoryName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_NAME");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitMonthlyAttendance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_ATTENDANCE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitMonthlyAttendanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_ATTENDANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCriteriaSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION");

                entity.Property(e => e.XCriteriaSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PayCitMonthlyLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitMonthlyLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DLoanDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_LOAN_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_DATE");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalLoan)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_LOAN");
            });

            modelBuilder.Entity<PayCitMonthlyPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_Payroll");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitMonthlyPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitMonthlyPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCitMonthlySalaryArrear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SALARY_ARREARS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitMonthlySalaryArrearsAllowanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SALARY_ARREARS_ALLOWANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitMonthlySalaryArrearsDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SALARY_ARREARS_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitMonthlySalaryArrearsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SALARY_ARREARS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowances)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALLOWANCES");

                entity.Property(e => e.XAllowancesDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCES_DETAILS");

                entity.Property(e => e.XBasicPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASIC_PAY");

                entity.Property(e => e.XDeductions)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEDUCTIONS");

                entity.Property(e => e.XDeductionsDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTIONS_DETAILS");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XLoansDeduction)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOANS_DEDUCTION");

                entity.Property(e => e.XLoansDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_DETAILS");

                entity.Property(e => e.XNetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAY");

                entity.Property(e => e.XPaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");
            });

            modelBuilder.Entity<PayCitMonthlySalaryArrearsLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SALARY_ARREARS_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XLoansSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION");

                entity.Property(e => e.XLoansSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitMonthlySpecialAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SPECIAL_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitMonthlySpecialAllowancesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SPECIAL_ALLOWANCES_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitMonthlySpecialDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SPECIAL_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitMonthlySpecialDeductionsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_MONTHLY_SPECIAL_DEDUCTIONS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCitOutlet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_OUTLETS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitPayrollDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_PAYROLL_DISBURSEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankAccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NAME");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDisbursedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISBURSED_AMOUNT");

                entity.Property(e => e.XDisbursementSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DISBURSEMENT_SELECTION");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XMaximumSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM_SALARY");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCitPayrollDisbursementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_PAYROLL_DISBURSEMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XBankAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XPaidNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_NOW");

                entity.Property(e => e.XPayableAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAYABLE_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryMonth)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH");

                entity.Property(e => e.XSalaryMonthDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH_DESCRIPTION");
            });

            modelBuilder.Entity<PayCitProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCitSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CIT_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcAllowancesToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_ALLOWANCES_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayCpcBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcCommentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_COMMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcDeductionsToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_DEDUCTIONS_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayCpcDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_CONTRACT_DATE");

                entity.Property(e => e.DDateOfBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE_OF_BIRTH");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DJoiningDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_JOINING_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCalculationMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE");

                entity.Property(e => e.XCalculationModeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPayRate)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_PAY_RATE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcEmployeeMasterAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCpcEmployeeMasterComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER_COMMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCommentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE");

                entity.Property(e => e.XCommentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XOccasionForComment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OCCASION_FOR_COMMENT");

                entity.Property(e => e.XRemarks1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___1");

                entity.Property(e => e.XRemarks2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___2");

                entity.Property(e => e.XRemarks3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___3");
            });

            modelBuilder.Entity<PayCpcEmployeeMasterDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStaringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XNA)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStaringDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCpcEmployeeMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XLumpSum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LUMP_SUM");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayCpcEmployeeMasterSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_MASTER_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENTAGE");

                entity.Property(e => e.XProjectCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE");

                entity.Property(e => e.XProjectCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayCpcEmployeeTransferToOtherPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDestinationPayroll)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL");

                entity.Property(e => e.XDestinationPayrollDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcEmployeeTransferToOtherPayrollTransferDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL_TRANSFER_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcGradesAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_GRADES_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCpcGradesDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_GRADES_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayCpcLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcLedgerPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LEDGER_PAYROLL");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcLedgerPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LEDGER_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcLedgerPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LEDGER_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGlVoucherParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GL_VOUCHER_PARTICULARS");

                entity.Property(e => e.XLoanType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_TYPE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankAndBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_AND_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XManagerTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANAGER_TITLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSignatoryDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_DESIGNATION");

                entity.Property(e => e.XSignatoryName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_NAME");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcMonthlyAttendance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_ATTENDANCE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcMonthlyAttendanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_ATTENDANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCriteriaSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION");

                entity.Property(e => e.XCriteriaSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PayCpcMonthlyLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcMonthlyLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DLoanDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_LOAN_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_DATE");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalLoan)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_LOAN");
            });

            modelBuilder.Entity<PayCpcMonthlyPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_Payroll");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcMonthlyPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcMonthlyPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayCpcMonthlySalaryArrear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SALARY_ARREARS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcMonthlySalaryArrearsAllowanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SALARY_ARREARS_ALLOWANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcMonthlySalaryArrearsDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SALARY_ARREARS_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcMonthlySalaryArrearsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SALARY_ARREARS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowances)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALLOWANCES");

                entity.Property(e => e.XAllowancesDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCES_DETAILS");

                entity.Property(e => e.XBasicPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASIC_PAY");

                entity.Property(e => e.XDeductions)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEDUCTIONS");

                entity.Property(e => e.XDeductionsDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTIONS_DETAILS");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XLoansDeduction)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOANS_DEDUCTION");

                entity.Property(e => e.XLoansDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_DETAILS");

                entity.Property(e => e.XNetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAY");

                entity.Property(e => e.XPaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");
            });

            modelBuilder.Entity<PayCpcMonthlySalaryArrearsLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SALARY_ARREARS_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XLoansSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION");

                entity.Property(e => e.XLoansSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcMonthlySpecialAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SPECIAL_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcMonthlySpecialAllowancesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SPECIAL_ALLOWANCES_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcMonthlySpecialDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SPECIAL_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcMonthlySpecialDeductionsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_MONTHLY_SPECIAL_DEDUCTIONS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayCpcOutlet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_OUTLETS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcPayrollDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_PAYROLL_DISBURSEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankAccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NAME");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDisbursedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISBURSED_AMOUNT");

                entity.Property(e => e.XDisbursementSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DISBURSEMENT_SELECTION");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XMaximumSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM_SALARY");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayCpcPayrollDisbursementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_PAYROLL_DISBURSEMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XBankAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XPaidNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_NOW");

                entity.Property(e => e.XPayableAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAYABLE_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryMonth)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH");

                entity.Property(e => e.XSalaryMonthDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH_DESCRIPTION");
            });

            modelBuilder.Entity<PayCpcProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayCpcSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_CPC_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBasicPay)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_BASIC_PAY");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XGrossPay)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_GROSS_PAY");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayEmployeePic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_EMPLOYEE_PIC");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XPicLink)
                    .HasMaxLength(1500)
                    .HasColumnName("X_PIC_LINK");
            });

            modelBuilder.Entity<PayGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingAllowancesToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_ALLOWANCES_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayGuardingBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingCommentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_COMMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingDeductionsToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_DEDUCTIONS_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayGuardingDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_CONTRACT_DATE");

                entity.Property(e => e.DDateOfBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE_OF_BIRTH");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DJoiningDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_JOINING_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCalculationMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE");

                entity.Property(e => e.XCalculationModeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPayRate)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_PAY_RATE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_COMMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCommentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE");

                entity.Property(e => e.XCommentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XOccasionForComment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OCCASION_FOR_COMMENT");

                entity.Property(e => e.XRemarks1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___1");

                entity.Property(e => e.XRemarks2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___2");

                entity.Property(e => e.XRemarks3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___3");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_COPY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_CONTRACT_DATE");

                entity.Property(e => e.DDateOfBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE_OF_BIRTH");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DJoiningDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_JOINING_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBankNameDescriptionCopy)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION_COPY");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCalculationMode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE");

                entity.Property(e => e.XCalculationModeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPayRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAY_RATE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStaringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XNA)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStaringDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XLumpSum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LUMP_SUM");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayGuardingEmployeeMasterSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_MASTER_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENTAGE");

                entity.Property(e => e.XProjectCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE");

                entity.Property(e => e.XProjectCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayGuardingEmployeeTransferToOtherPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDestinationPayroll)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL");

                entity.Property(e => e.XDestinationPayrollDescription)
                    .HasMaxLength(500)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_PAYROLL_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingEmployeeTransferToOtherPayrollTransferDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_EMPLOYEE_TRANSFER_TO_OTHER_PAYROLL_TRANSFER_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingGradesAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_GRADES_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayGuardingGradesDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_GRADES_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayGuardingLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingLedgerPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LEDGER_PAYROLL");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingLedgerPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LEDGER_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingLedgerPayrollCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LEDGER_PAYROLL_COPY");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingLedgerPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LEDGER_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGlVoucherParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GL_VOUCHER_PARTICULARS");

                entity.Property(e => e.XLoanType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_TYPE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankAndBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_AND_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XManagerTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANAGER_TITLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSignatoryDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_DESIGNATION");

                entity.Property(e => e.XSignatoryName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_NAME");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingMonthlyAttendance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_ATTENDANCE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlyAttendanceBranchWise>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_ATTENDANCE___BRANCH_WISE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlyAttendanceBranchWiseDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_ATTENDANCE___BRANCH_WISE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBranchStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS");

                entity.Property(e => e.XBranchStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PayGuardingMonthlyAttendanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_ATTENDANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCriteriaSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION");

                entity.Property(e => e.XCriteriaSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CRITERIA_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PayGuardingMonthlyLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlyLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DLoanDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_LOAN_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_DATE");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalLoan)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_LOAN");
            });

            modelBuilder.Entity<PayGuardingMonthlyPaidLeaf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_PAID_LEAVES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlyPaidLeavesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_PAID_LEAVES_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PayGuardingMonthlyPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_Payroll");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingMonthlyPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingMonthlyPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayGuardingMonthlySalaryArrear>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SALARY_ARREARS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlySalaryArrearsAllowanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SALARY_ARREARS_ALLOWANCE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingMonthlySalaryArrearsDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SALARY_ARREARS_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingMonthlySalaryArrearsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SALARY_ARREARS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowances)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALLOWANCES");

                entity.Property(e => e.XAllowancesDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCES_DETAILS");

                entity.Property(e => e.XBasicPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASIC_PAY");

                entity.Property(e => e.XDeductions)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEDUCTIONS");

                entity.Property(e => e.XDeductionsDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTIONS_DETAILS");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XLoansDeduction)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOANS_DEDUCTION");

                entity.Property(e => e.XLoansDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_DETAILS");

                entity.Property(e => e.XNetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAY");

                entity.Property(e => e.XPaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");
            });

            modelBuilder.Entity<PayGuardingMonthlySalaryArrearsLoansDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SALARY_ARREARS_LOANS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId)
                    .HasColumnType("numeric(18, 0)")
                    .HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XLoansSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION");

                entity.Property(e => e.XLoansSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOANS_SELECTION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingMonthlySpecialAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SPECIAL_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlySpecialAllowancesDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SPECIAL_ALLOWANCES_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingMonthlySpecialDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SPECIAL_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingMonthlySpecialDeductionsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SPECIAL_DEDUCTIONS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PayGuardingMonthlySpecialDeductionsDetailsCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_MONTHLY_SPECIAL_DEDUCTIONS_DETAILS_COPY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingOutlet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_OUTLETS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingPayrollDisbursement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_PAYROLL_DISBURSEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DSalaryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SALARY_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankAccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NAME");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDisbursedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISBURSED_AMOUNT");

                entity.Property(e => e.XDisbursementSelection)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DISBURSEMENT_SELECTION");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XMaximumSalary)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM_SALARY");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_DATE");

                entity.Property(e => e.XUploadFromExcel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_UPLOAD_FROM_EXCEL");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PayGuardingPayrollDisbursementDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_PAYROLL_DISBURSEMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XBankAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XPaidNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_NOW");

                entity.Property(e => e.XPayableAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAYABLE_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryMonth)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH");

                entity.Property(e => e.XSalaryMonthDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SALARY_MONTH_DESCRIPTION");
            });

            modelBuilder.Entity<PayGuardingProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayGuardingSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_GUARDING_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtAllowancesToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_ALLOWANCES_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayMgtBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtCommentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_COMMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtDeductionsToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_DEDUCTIONS_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PayMgtDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_CONTRACT_DATE");

                entity.Property(e => e.DDateOfBirth)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE_OF_BIRTH");

                entity.Property(e => e.DExpiryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EXPIRY_DATE");

                entity.Property(e => e.DJoiningDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_JOINING_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBasicPay)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_BASIC_PAY");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XGrossPay)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_GROSS_PAY");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(278)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtEmployeeMasterAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayMgtEmployeeMasterComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER_COMMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCommentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE");

                entity.Property(e => e.XCommentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XOccasionForComment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OCCASION_FOR_COMMENT");

                entity.Property(e => e.XRemarks1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___1");

                entity.Property(e => e.XRemarks2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___2");

                entity.Property(e => e.XRemarks3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___3");
            });

            modelBuilder.Entity<PayMgtEmployeeMasterDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStaringDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XNA)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStaringDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayMgtEmployeeMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DEffectiveDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_EFFECTIVE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XLumpSum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LUMP_SUM");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayMgtEmployeeMasterSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_EMPLOYEE_MASTER_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENTAGE");

                entity.Property(e => e.XProjectCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE");

                entity.Property(e => e.XProjectCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PayMgtGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtGradesAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_GRADES_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayMgtGradesDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_GRADES_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_ENDING_DATE");

                entity.Property(e => e.DStartingDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_STARTING_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PayMgtLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtLedgerPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LEDGER_PAYROLL");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtLedgerPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LEDGER_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtLedgerPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LEDGER_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGlVoucherParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GL_VOUCHER_PARTICULARS");

                entity.Property(e => e.XLoanType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_TYPE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankAndBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_AND_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XManagerTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANAGER_TITLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSignatoryDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_DESIGNATION");

                entity.Property(e => e.XSignatoryName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_NAME");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtMonthlyPayroll>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_MONTHLY_Payroll");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.Allowances).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.Deductions).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EarnedBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Earned_Basic");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.GrossPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Gross_Pay");

                entity.Property(e => e.IncomeTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Income_tax");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.Loans).HasColumnType("numeric(20, 2)");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MBasic)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Basic");

                entity.Property(e => e.MGross)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("M_Gross");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.NetPay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Net_Pay");

                entity.Property(e => e.OvertimeAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_amount");

                entity.Property(e => e.OvertimeHoursPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_paid");

                entity.Property(e => e.OvertimeHoursWorked)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_hours_worked");

                entity.Property(e => e.OvertimeRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Overtime_Rate");

                entity.Property(e => e.PaidDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Paid_days");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.WorkDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("Work_Days");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.Xallw)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XALLW");

                entity.Property(e => e.Xarrear)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XArrear");

                entity.Property(e => e.Xbonus)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XBonus");

                entity.Property(e => e.Xded)
                    .HasColumnType("numeric(38, 2)")
                    .HasColumnName("XDED");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtMonthlyPayrollAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_MONTHLY_PAYROLL_ALLOWANCES");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.AlwAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("ALW_AMOUNT");

                entity.Property(e => e.AlwCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ALW_CODE");

                entity.Property(e => e.AlwDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("ALW_DESC");

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtMonthlyPayrollDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_MONTHLY_PAYROLL_DEDUCTIONS");

                entity.Property(e => e.AccountNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Number");

                entity.Property(e => e.AccountType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Account_Type")
                    .IsFixedLength();

                entity.Property(e => e.BankCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Bank_Code");

                entity.Property(e => e.BirthDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Birth_date");

                entity.Property(e => e.CadreCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Cadre_Code");

                entity.Property(e => e.CardNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Card_Number");

                entity.Property(e => e.CategoryCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Category_Code");

                entity.Property(e => e.ContractDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Contract_Date");

                entity.Property(e => e.DedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("DED_AMOUNT");

                entity.Property(e => e.DedCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DED_CODE");

                entity.Property(e => e.DedDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("DED_DESC");

                entity.Property(e => e.DepartmentCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Department_Code");

                entity.Property(e => e.DesignationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Designation_Code");

                entity.Property(e => e.EmployeeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Employee_Code");

                entity.Property(e => e.EmployeeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Employee_name");

                entity.Property(e => e.FatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Father_Name");

                entity.Property(e => e.GradeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Grade_Code");

                entity.Property(e => e.JoinDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Join_Date");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Location_Code");

                entity.Property(e => e.MastBas).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MastGross).HasColumnType("numeric(13, 0)");

                entity.Property(e => e.MonthCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Month_Code");

                entity.Property(e => e.MonthDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Month_desc");

                entity.Property(e => e.PayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Pay_Mode");

                entity.Property(e => e.PeCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("peCode");

                entity.Property(e => e.ProcessDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("Process_date");

                entity.Property(e => e.ReligionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Religion_Code");

                entity.Property(e => e.RetireDate)
                    .HasColumnType("datetime")
                    .HasColumnName("Retire_Date");

                entity.Property(e => e.SectionCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Section_Code");

                entity.Property(e => e.SexCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Sex_Code");

                entity.Property(e => e.ShiftCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Shift_Code");

                entity.Property(e => e.StatusCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Status_Code");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XSsNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SS_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("Year_Code");

                entity.Property(e => e.YearDesc)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("Year_Desc");
            });

            modelBuilder.Entity<PayMgtOutlet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_OUTLETS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayMgtSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_MGT_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PayShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PAY_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblAdvanceForService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_ADVANCE_FOR_SERVICES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdvanceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_TYPE");

                entity.Property(e => e.XAdvanceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ADVANCE_TYPE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblAgingTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_AGING_TEMPLATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAgingOn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AGING_ON");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblAgingTemplatesTemplateDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_AGING_TEMPLATES_TEMPLATE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAgingPeriodTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AGING_PERIOD_TITLE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFromDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FROM_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XToDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_DAYS");
            });

            modelBuilder.Entity<PblCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XExtraTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSedPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DReferenceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REFERENCE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditNoteReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_NOTE_REASON");

                entity.Property(e => e.XCreditNoteReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_NOTE_REASON_DESCRIPTION");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XReferenceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_DATE");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED");
            });

            modelBuilder.Entity<PblCreditNoteEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE___EMPLOYEE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XExtraTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSedPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblCreditNoteEmployeeDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE___EMPLOYEE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DReferenceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REFERENCE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XCreditNoteReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_NOTE_REASON");

                entity.Property(e => e.XCreditNoteReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_NOTE_REASON_DESCRIPTION");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XReferenceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_DATE");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED");
            });

            modelBuilder.Entity<PblCreditNoteReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE_REASONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblCreditNoteReasonsAccount>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_CREDIT_NOTE_REASONS_ACCOUNTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XExtraTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSedPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DReferenceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REFERENCE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitNoteReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_REASON");

                entity.Property(e => e.XDebitNoteReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_REASON_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XReferenceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_DATE");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED");

                entity.Property(e => e.XVendor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VENDOR");

                entity.Property(e => e.XVendorDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VENDOR_DESCRIPTION");
            });

            modelBuilder.Entity<PblDebitNoteEmployee>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE___EMPLOYEE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XExtraTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX_PERCENT");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSedPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED_PERCENT");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblDebitNoteEmployeeDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE___EMPLOYEE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DReferenceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REFERENCE_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitNoteReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_REASON");

                entity.Property(e => e.XDebitNoteReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_REASON_DESCRIPTION");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XReferenceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_DATE");

                entity.Property(e => e.XReferenceNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SED");
            });

            modelBuilder.Entity<PblDebitNoteReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE_REASONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblDebitNoteReasonsAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEBIT_NOTE_REASONS_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblDefaultSettingsManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEFAULT_SETTINGS_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblDefaultSettingsManagementGlAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_DEFAULT_SETTINGS_MANAGEMENT_GL_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT");

                entity.Property(e => e.XCreditAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XDebitAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT");

                entity.Property(e => e.XDebitAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XGeneralRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GENERAL_REMARKS");

                entity.Property(e => e.XNatureOfAmount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT");

                entity.Property(e => e.XNatureOfAmountDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT_DESCRIPTION");

                entity.Property(e => e.XParticularsForCreditEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_CREDIT_ENTRY");

                entity.Property(e => e.XParticularsForDebitEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_DEBIT_ENTRY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XMasterLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MASTER_LOCATION");

                entity.Property(e => e.XMasterLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MASTER_LOCATION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblMasterLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_MASTER_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblOtherGrnSupplierPaymentVoucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_OTHER_GRN_SUPPLIER___PAYMENT_VOUCHER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAdvITax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_I_TAX");

                entity.Property(e => e.XAdvSTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_S_TAX");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAnyDeductions)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ANY_DEDUCTIONS");

                entity.Property(e => e.XBankOrCashDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_OR_CASH_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_REF_NO");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNetPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAYMENT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPayAllDocuments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_ALL_DOCUMENTS");

                entity.Property(e => e.XPaymentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE");

                entity.Property(e => e.XPaymentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblOtherGrnSupplierPaymentVoucherPaymentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_OTHER_GRN_SUPPLIER___PAYMENT_VOUCHER_PAYMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XBalancePayable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE_PAYABLE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XDocumentAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DOCUMENT_AMOUNT");

                entity.Property(e => e.XDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE");

                entity.Property(e => e.XDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XNa)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA");

                entity.Property(e => e.XNetAdjustment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTMENT");

                entity.Property(e => e.XNowPaying)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NOW_PAYING");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblPaymentApproval>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_PAYMENT_APPROVAL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDbnDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DBN_DED");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNetPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAYMENT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPaymentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE");

                entity.Property(e => e.XPaymentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XProjectWorkOrder)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_WORK_ORDER");

                entity.Property(e => e.XProjectWorkOrderDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_WORK_ORDER_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XWht)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblPaymentApprovalApprovalDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_PAYMENT_APPROVAL_APPROVAL_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalancePayable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE_PAYABLE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XDocumentLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION");

                entity.Property(e => e.XDocumentLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION_DESCRIPTION");

                entity.Property(e => e.XDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE");

                entity.Property(e => e.XDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XNa)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA");

                entity.Property(e => e.XNetAdjustment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTMENT");

                entity.Property(e => e.XNowPaying)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NOW_PAYING");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblPaymentApprovalDebitNoteAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_PAYMENT_APPROVAL_DEBIT_NOTE_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJUSTED");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDebitNoteLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_LOCATION");

                entity.Property(e => e.XDebitNoteLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_NOTE_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNetAdjustment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTMENT");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblPaymentTermTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_PAYMENT_TERM_TEMPLATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblPaymentTermTemplatesPaymentTerm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_PAYMENT_TERM_TEMPLATES_PAYMENT_TERMS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL_");

                entity.Property(e => e.XSubSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUB_SERIAL");

                entity.Property(e => e.XText)
                    .HasColumnType("text")
                    .HasColumnName("X_TEXT");
            });

            modelBuilder.Entity<PblService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblServicesAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAccountNature)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NATURE");

                entity.Property(e => e.XAccountNatureDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NATURE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStandardParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STANDARD_PARTICULARS");
            });

            modelBuilder.Entity<PblServicesNature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_NATURE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblServicesReceivedNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_RECEIVED_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DC_DATE");

                entity.Property(e => e.DPoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PO_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblServicesReceivedNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_RECEIVED_NOTE_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOdometer)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ODOMETER");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_DETAILS");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(18, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PblServicesReceivedNoteMt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_RECEIVED_NOTE___MT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDcDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DC_DATE");

                entity.Property(e => e.DPoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PO_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_NUMBER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDcDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_DATE");

                entity.Property(e => e.XDcNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DC_NUMBER");

                entity.Property(e => e.XFTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_F_TAX_PERCENT");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblServicesReceivedNoteMtDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SERVICES_RECEIVED_NOTE___MT_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAsset)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET");

                entity.Property(e => e.XAssetDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ASSET_DESCRIPTION");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOdometer)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ODOMETER");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_DETAILS");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PblSupplierInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DUE_DATE");

                entity.Property(e => e.DInvoiceDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INVOICE_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdjustAllDocuments)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADJUST_ALL_DOCUMENTS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XExtraTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EXTRA_TAX");

                entity.Property(e => e.XFreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FREIGHT");

                entity.Property(e => e.XFurtherTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FURTHER_TAX");

                entity.Property(e => e.XInvoice)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_");

                entity.Property(e => e.XInvoiceDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_DATE");

                entity.Property(e => e.XInvoiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE");

                entity.Property(e => e.XInvoiceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOthers)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHERS");

                entity.Property(e => e.XPaymentTerms)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TERMS");

                entity.Property(e => e.XPoAdvances)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PO_ADVANCES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblSupplierInvoiceDocumentMatching>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE_DOCUMENT_MATCHING");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DIgpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_IGP_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJUSTED");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDocumentLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION");

                entity.Property(e => e.XDocumentLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_LOCATION_DESCRIPTION");

                entity.Property(e => e.XDocumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE");

                entity.Property(e => e.XDocumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DOCUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XIgpDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_DATE");

                entity.Property(e => e.XIgpNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IGP_NUMBER");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTotalAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_ADJUSTED");
            });

            modelBuilder.Entity<PblSupplierInvoicePaymentVoucher>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE_PAYMENT_VOUCHER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XBankAccountName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_ACCOUNT_NAME");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XGrossAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_AMOUNT");

                entity.Property(e => e.XManualRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_REF_NO");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNetPayment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_PAYMENT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XWht)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblSupplierInvoicePaymentVoucherApprovalAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE_PAYMENT_VOUCHER_APPROVAL_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyPaid)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_PAID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDocNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOC_NO");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNowPaying)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NOW_PAYING");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblSupplierInvoicePaymentVoucherPaymentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE_PAYMENT_VOUCHER_PAYMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PblSupplierInvoicePoAdvance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_SUPPLIER_INVOICE_PO_ADVANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DPoDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PO_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAdvance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADVANCE");

                entity.Property(e => e.XAlreadyAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJUSTED");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XPoAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PO_AMOUNT");

                entity.Property(e => e.XPoDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_DATE");

                entity.Property(e => e.XPoLocation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_LOCATION");

                entity.Property(e => e.XPoLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_LOCATION_DESCRIPTION");

                entity.Property(e => e.XPoNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PO_NUMBER");
            });

            modelBuilder.Entity<PblVehicleFuelFilling>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VEHICLE_FUEL_FILLING");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XFuelCardNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FUEL_CARD_NUMBER");

                entity.Property(e => e.XFuelType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FUEL_TYPE");

                entity.Property(e => e.XFuelTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_FUEL_TYPE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPaymentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE");

                entity.Property(e => e.XPaymentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSupplier)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<PblVehicleFuelFillingFuelingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VEHICLE_FUEL_FILLING_FUELING_DETAIL");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDriver)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER");

                entity.Property(e => e.XDriverDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRIVER_DESCRIPTION");

                entity.Property(e => e.XInvoiceReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_REFERENCE");

                entity.Property(e => e.XLitres)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LITRES");

                entity.Property(e => e.XMileage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MILEAGE");

                entity.Property(e => e.XMtOfficer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MT_OFFICER");

                entity.Property(e => e.XMtOfficerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MT_OFFICER_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOdometer)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ODOMETER");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XPetrolPumpPh)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PETROL_PUMP_PH");

                entity.Property(e => e.XPreviousReading)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PREVIOUS_READING");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<PblVendorClass>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VENDOR_CLASS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CREDIT_DAYS");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XPaymentTerms)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYMENT_TERMS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblVendorClassAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VENDOR_CLASS_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XNatureOfAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_ACCOUNT");

                entity.Property(e => e.XNatureOfAccountDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XParticularsForGlEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_GL_ENTRY");

                entity.Property(e => e.XRemrks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMRKS");
            });

            modelBuilder.Entity<PblVendorGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VENDOR_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblVendorManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VENDOR_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XAdvanceLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADVANCE_LIMIT");

                entity.Property(e => e.XChequeName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CHEQUE_NAME");

                entity.Property(e => e.XClearingAc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CLEARING_AC");

                entity.Property(e => e.XClearingAcDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CLEARING_AC_DESCRIPTION");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDefaultLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEFAULT_LOCATION");

                entity.Property(e => e.XDefaultLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEFAULT_LOCATION_DESCRIPTION");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XEmployeeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE_DESCRIPTION");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XPayableAc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYABLE_AC");

                entity.Property(e => e.XPayableAcDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAYABLE_AC_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XSupplierClass)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_CLASS");

                entity.Property(e => e.XSupplierClassDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUPPLIER_CLASS_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PblVendorManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PBL_VENDOR_MANAGEMENT_CONTACT_PERSONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContactType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_TYPE");

                entity.Property(e => e.XContactTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<PdwAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwAllowancesToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_ALLOWANCES_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PdwBankCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_BANK_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwCadre>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_CADRE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwCategory>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_CATEGORY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwCommentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_COMMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XHeading1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___1");

                entity.Property(e => e.XHeading2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___2");

                entity.Property(e => e.XHeading3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HEADING___3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XTaxableDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE_DESCRIPTION");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwDeductionsToggle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_DEDUCTIONS_TOGGLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAttendanceFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTENDANCE_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFormula)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FORMULA");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortHeading)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHORT_HEADING");

                entity.Property(e => e.XTaxable)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAXABLE");

                entity.Property(e => e.XToggleCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_CODE");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<PdwDepartment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_DEPARTMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XExpenseType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE");

                entity.Property(e => e.XExpenseTypeDescription)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPENSE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwDesignation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_DESIGNATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwEmployeeMaster>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XAdvLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADV_LIMIT");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XBankNameDescription)
                    .HasMaxLength(503)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME_DESCRIPTION");

                entity.Property(e => e.XBloodGroup)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BLOOD_GROUP");

                entity.Property(e => e.XCadre)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE");

                entity.Property(e => e.XCadreDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CADRE_DESCRIPTION");

                entity.Property(e => e.XCalculationMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE");

                entity.Property(e => e.XCalculationModeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_MODE_DESCRIPTION");

                entity.Property(e => e.XCard)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CARD");

                entity.Property(e => e.XCategory)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY");

                entity.Property(e => e.XCategoryDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CATEGORY_DESCRIPTION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_DATE");

                entity.Property(e => e.XDateOfBirth)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE_OF_BIRTH");

                entity.Property(e => e.XDepartment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT");

                entity.Property(e => e.XDepartmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEPARTMENT_DESCRIPTION");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XDesignationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION_DESCRIPTION");

                entity.Property(e => e.XEobi)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EOBI");

                entity.Property(e => e.XExpiryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EXPIRY_DATE");

                entity.Property(e => e.XFatherName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FATHER_NAME");

                entity.Property(e => e.XGender)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GENDER");

                entity.Property(e => e.XGrade)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE");

                entity.Property(e => e.XGradeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GRADE_DESCRIPTION");

                entity.Property(e => e.XHusbandName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_HUSBAND_NAME");

                entity.Property(e => e.XJoiningDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_JOINING_DATE");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XNa1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_1");

                entity.Property(e => e.XNa2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_2");

                entity.Property(e => e.XNa3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NA_3");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XOfficialEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_EMAIL");

                entity.Property(e => e.XOfficialMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OFFICIAL_MOBILE");

                entity.Property(e => e.XPayMode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_MODE");

                entity.Property(e => e.XPayRate)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_PAY_RATE");

                entity.Property(e => e.XPersonalEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_EMAIL");

                entity.Property(e => e.XPersonalMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PERSONAL_MOBILE");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XReference1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___1");

                entity.Property(e => e.XReference2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REFERENCE___2");

                entity.Property(e => e.XReligion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION");

                entity.Property(e => e.XReligionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RELIGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION");

                entity.Property(e => e.XSectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SECTION_DESCRIPTION");

                entity.Property(e => e.XShift)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT");

                entity.Property(e => e.XShiftDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIFT_DESCRIPTION");

                entity.Property(e => e.XSocialSecurity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SOCIAL_SECURITY");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwEmployeeMasterAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PdwEmployeeMasterComment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER_COMMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCommentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE");

                entity.Property(e => e.XCommentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COMMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XOccasionForComment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_OCCASION_FOR_COMMENT");

                entity.Property(e => e.XRemarks1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___1");

                entity.Property(e => e.XRemarks2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___2");

                entity.Property(e => e.XRemarks3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS___3");
            });

            modelBuilder.Entity<PdwEmployeeMasterDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(13, 0)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttfactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATTFACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XNA)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_N_A");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStaringDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PdwEmployeeMasterLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XApprovalNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_APPROVAL_NUMBER");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEffectiveDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_EFFECTIVE_DATE");

                entity.Property(e => e.XInstallment)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INSTALLMENT");

                entity.Property(e => e.XInterest)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INTEREST");

                entity.Property(e => e.XLoanSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION");

                entity.Property(e => e.XLoanSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_SELECTION_DESCRIPTION");

                entity.Property(e => e.XLumpSum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LUMP_SUM");

                entity.Property(e => e.XPaidBack)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_BACK");

                entity.Property(e => e.XPrincipal)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PRINCIPAL");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PdwEmployeeMasterSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_MASTER_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PERCENTAGE");

                entity.Property(e => e.XProjectCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE");

                entity.Property(e => e.XProjectCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_CODE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");
            });

            modelBuilder.Entity<PdwEmployeePic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_EMPLOYEE_PIC");

                entity.Property(e => e.XEmployee)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("X_EMPLOYEE");

                entity.Property(e => e.XPicLink)
                    .HasMaxLength(1500)
                    .HasColumnName("X_PIC_LINK");
            });

            modelBuilder.Entity<PdwGrade>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_GRADES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XIncrement)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREMENT");

                entity.Property(e => e.XMaximum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MAXIMUM");

                entity.Property(e => e.XMinimum)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MINIMUM");

                entity.Property(e => e.XPayScale)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PAY_SCALE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStages)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STAGES");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwGradesAllowance>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_GRADES_ALLOWANCES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAllowanceSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION");

                entity.Property(e => e.XAllowanceSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ALLOWANCE_SELECTION_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PdwGradesDeduction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_GRADES_DEDUCTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XApplyDates)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_DATES");

                entity.Property(e => e.XApplyToggle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_APPLY_TOGGLE");

                entity.Property(e => e.XAttFactor)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATT_FACTOR");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDeductionSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION");

                entity.Property(e => e.XDeductionSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEDUCTION_SELECTION_DESCRIPTION");

                entity.Property(e => e.XEndingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_ENDING_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_STARTING_DATE");

                entity.Property(e => e.XToggleSelection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION");

                entity.Property(e => e.XToggleSelectionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TOGGLE_SELECTION_DESCRIPTION");
            });

            modelBuilder.Entity<PdwLeaveCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_LEAVE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XLeaveType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE");

                entity.Property(e => e.XLeaveTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_LEAVE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwLoan>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_LOANS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE");

                entity.Property(e => e.XCreditCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDebitCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE");

                entity.Property(e => e.XDebitCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_CODE_DESCRIPTION");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XGlVoucherParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GL_VOUCHER_PARTICULARS");

                entity.Property(e => e.XLoanType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOAN_TYPE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XBankAndBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_AND_BRANCH_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XManagerTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANAGER_TITLE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSignatoryDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_DESIGNATION");

                entity.Property(e => e.XSignatoryName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SIGNATORY_NAME");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwOutlet>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_OUTLETS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwReligion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_RELIGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwShift>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_SHIFTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<PdwSubProject>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("PDW_SUB_PROJECTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbAlarmDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALARM___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAlarmDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALARM___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbAlarmSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALARM___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAlarmSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALARM___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbAlarmSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALARM___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyRcvd)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RCVD");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbAlramCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALRAM___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAlramCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ALRAM___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbArea>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_AREA");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCity)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY");

                entity.Property(e => e.XCityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CITY_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbAtmCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentNoDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO_DESCRIPTION");
            });

            modelBuilder.Entity<RbAtmDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentNoDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO_DESCRIPTION");
            });

            modelBuilder.Entity<RbAtmSalesTaxInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___SALES_TAX_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XInvoiceNumber)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_NUMBER");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmSalesTaxInvoiceAtmServiceTripDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___SALES_TAX_INVOICE_ATM_SERVICE_TRIP_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_CHARGES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTripCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TRIP_CHARGES");

                entity.Property(e => e.XTripNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_NUMBER");

                entity.Property(e => e.XTripType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE");

                entity.Property(e => e.XTripTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<RbAtmSalesTaxInvoiceCitShipmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___SALES_TAX_INVOICE_CIT_SHIPMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_CHARGES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");
            });

            modelBuilder.Entity<RbAtmSalesTaxInvoiceInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM___SALES_TAX_INVOICE_INVOICE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XGrossValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_VALUE");

                entity.Property(e => e.XNetReceivable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVABLE");

                entity.Property(e => e.XParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbAtmServiceCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_SERVICE_CHARGES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_DISTANCE");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFromKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FROM_KMS");

                entity.Property(e => e.XMeasureDistance)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MEASURE_DISTANCE");

                entity.Property(e => e.XMeasureDistanceDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_MEASURE_DISTANCE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRatePerKm)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE_PER_KM");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XSubCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_CODE");

                entity.Property(e => e.XToKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_KMS");

                entity.Property(e => e.XTripCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TRIP_CHARGES");

                entity.Property(e => e.XTripType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE");

                entity.Property(e => e.XTripTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbAtmServiceChargesCalculationRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_SERVICE_CHARGES_CALCULATION_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAtmElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ELEMENT");

                entity.Property(e => e.XAtmElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCalculationRule)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_RULE");

                entity.Property(e => e.XCalculationRuleDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_RULE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbAtmServiceChargesChargesRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_SERVICE_CHARGES_CHARGES_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAtmElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ELEMENT");

                entity.Property(e => e.XAtmElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingKm)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ENDING_KM");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingKm)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STARTING_KM");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<RbAtmServiceType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_SERVICE_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbAtmServiceTypesContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_SERVICE_TYPES_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbAtmTripTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATM_TRIP_TRANSACTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DTripDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_TRIP_DATE");

                entity.Property(e => e.DTripTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_TRIP_TIME");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdditional)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADDITIONAL");

                entity.Property(e => e.XAmountFilled)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_FILLED");

                entity.Property(e => e.XAtmId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ID");

                entity.Property(e => e.XAtmIdDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_ID_DESCRIPTION");

                entity.Property(e => e.XAutoBilling)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AUTO_BILLING");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCapturedCards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CAPTURED_CARDS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XDistanceKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE_KMS");

                entity.Property(e => e.XFixedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FIXED_AMOUNT");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRateId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID");

                entity.Property(e => e.XRateIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION");

                entity.Property(e => e.XRevenueRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                entity.Property(e => e.XTollTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLL_TAX");

                entity.Property(e => e.XTripCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TRIP_CHARGES");

                entity.Property(e => e.XTripDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_DATE");

                entity.Property(e => e.XTripNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_NO");

                entity.Property(e => e.XTripTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TIME");

                entity.Property(e => e.XTripType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE");

                entity.Property(e => e.XTripTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TRIP_TYPE_DESCRIPTION");

                entity.Property(e => e.XWaiting)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING");

                entity.Property(e => e.XWaitingMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING_MINS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmrCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmrCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbAtmrDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmrDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbAtmrSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbAtmrSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbAtmrSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ATMR___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyRcvd)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RCVD");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbBranchManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_BRANCH_MANAGEMENT");

                entity.Property(e => e.BrCode)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("BR_CODE");

                entity.Property(e => e.BrName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("BR_NAME");

                entity.Property(e => e.BrType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("BR_TYPE");

                entity.Property(e => e.BrTypeName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("BR_TYPE_NAME");

                entity.Property(e => e.CpcCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CPC_CODE");

                entity.Property(e => e.CpcDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CPC_DESC");

                entity.Property(e => e.CpcYn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("CPC_YN");

                entity.Property(e => e.McmCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("MCM_CODE");

                entity.Property(e => e.McmName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("MCM_NAME");

                entity.Property(e => e.SregCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SREG_CODE");

                entity.Property(e => e.SregDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SREG_DESC");

                entity.Property(e => e.StatCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STAT_CODE");

                entity.Property(e => e.StatDesc)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STAT_DESC");
            });

            modelBuilder.Entity<RbCitCreditAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitCreditAdjustmentDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_ADJUSTMENT_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentNoDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO_DESCRIPTION");
            });

            modelBuilder.Entity<RbCitCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCitCreditNoteShipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_NOTE___SHIPMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitCreditNoteShipmentShipmentNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___CREDIT_NOTE___SHIPMENT_SHIPMENT_NUMBER");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentNoDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO_DESCRIPTION");
            });

            modelBuilder.Entity<RbCitDebitAdjustment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_ADJUSTMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitDebitAdjustmentDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_ADJUSTMENT_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentNoDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO_DESCRIPTION");
            });

            modelBuilder.Entity<RbCitDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCitDebitNoteRecalculatedShipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_NOTE___RECALCULATED_SHIPMENTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XInvoiceNumber)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_NUMBER");

                entity.Property(e => e.XMainCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE");

                entity.Property(e => e.XMainCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitDebitNoteRecalculatedShipmentsDebitNoteDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_NOTE___RECALCULATED_SHIPMENTS_DEBIT_NOTE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XGrossValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_VALUE");

                entity.Property(e => e.XNetReceivable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVABLE");

                entity.Property(e => e.XParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCitDebitNoteRecalculatedShipmentsShipmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___DEBIT_NOTE___RECALCULATED_SHIPMENTS_SHIPMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_CHARGES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");
            });

            modelBuilder.Entity<RbCitMasterReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___MASTER_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XMiscDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MISC_DED");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitMasterReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___MASTER_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCitMasterReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___MASTER_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdj)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJ");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbCitSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCitSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdj)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJ");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbCitSalesTaxInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_TAX_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DUE_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XArrears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ARREARS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XInvoiceNumber)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_NUMBER");

                entity.Property(e => e.XMainCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE");

                entity.Property(e => e.XMainCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitSalesTaxInvoiceInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_TAX_INVOICE_INVOICE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XGrossValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_VALUE");

                entity.Property(e => e.XNetReceivable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVABLE");

                entity.Property(e => e.XParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCitSalesTaxInvoiceShipmentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT___SALES_TAX_INVOICE_SHIPMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XOtherCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_CHARGES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");
            });

            modelBuilder.Entity<RbCitShipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdditional)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADDITIONAL");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XAutoBilling)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AUTO_BILLING");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XCredits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CREDITS");

                entity.Property(e => e.XCrnReversed)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED");

                entity.Property(e => e.XCrnReversedDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDebits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEBITS");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DATE");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");

                entity.Property(e => e.XDeliveryTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TIME");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XDistanceKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE_KMS");

                entity.Property(e => e.XFcValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FC_VALUE");

                entity.Property(e => e.XFixedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FIXED_AMOUNT");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPickDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_DATE");

                entity.Property(e => e.XPickTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_TIME");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRateId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID");

                entity.Property(e => e.XRateIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION");

                entity.Property(e => e.XRevenueRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XTollTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLL_TAX");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");

                entity.Property(e => e.XVaultNights)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_NIGHTS");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XWaiting)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING");

                entity.Property(e => e.XWaitingMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING_MINS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitShipmentCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT_COPY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.DropOffUpInterval)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.DropoffUpHour).HasColumnName("Dropoff Up Hour");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.PickUpHour).HasColumnName("Pick Up Hour");

                entity.Property(e => e.PickUpInterval)
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdditional)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADDITIONAL");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XAutoBilling)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AUTO_BILLING");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XCredits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CREDITS");

                entity.Property(e => e.XCrnReversed)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED");

                entity.Property(e => e.XCrnReversedDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDebits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEBITS");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DATE");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");

                entity.Property(e => e.XDeliveryTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TIME");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XDistanceKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE_KMS");

                entity.Property(e => e.XFcValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FC_VALUE");

                entity.Property(e => e.XFixedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FIXED_AMOUNT");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPickDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_DATE");

                entity.Property(e => e.XPickTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_TIME");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRateId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID");

                entity.Property(e => e.XRateIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION");

                entity.Property(e => e.XRevenueRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XTollTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLL_TAX");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");

                entity.Property(e => e.XVaultNights)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_NIGHTS");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XWaiting)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING");

                entity.Property(e => e.XWaitingMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING_MINS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });
            modelBuilder.Entity<XRbCitShipmentsCopy>(entity =>
                       {
                           entity.HasNoKey();

                           entity.ToView("X_RB_CIT_SHIPMENT_COPY");

                           entity.Property(e => e.AddDate)
                               .HasColumnType("datetime")
                               .HasColumnName("ADD_DATE");

                           entity.Property(e => e.AddId)
                               .HasMaxLength(50)
                               .IsUnicode(false)
                               .HasColumnName("ADD_ID");

                           entity.Property(e => e.DBillDate)
                               .HasColumnType("datetime")
                               .HasColumnName("D_BILL_DATE");

                           entity.Property(e => e.DDate)
                               .HasColumnType("datetime")
                               .HasColumnName("D_DATE");

                           entity.Property(e => e.DDeliveryDate)
                               .HasColumnType("datetime")
                               .HasColumnName("D_DELIVERY_DATE");

                           entity.Property(e => e.DDeliveryTime)
                               .HasColumnType("datetime")
                               .HasColumnName("D_DELIVERY_TIME");

                           entity.Property(e => e.DPickDate)
                               .HasColumnType("datetime")
                               .HasColumnName("D_PICK_DATE");

                           entity.Property(e => e.DPickTime)
                               .HasColumnType("datetime")
                               .HasColumnName("D_PICK_TIME");

                           entity.Property(e => e.DocumentStatus)
                               .HasMaxLength(5)
                               .IsUnicode(false)
                               .HasColumnName("DOCUMENT_STATUS");

                           entity.Property(e => e.DropOffUpInterval)
                               .HasMaxLength(5)
                               .IsUnicode(false);

                           entity.Property(e => e.DropoffUpHour).HasColumnName("Dropoff Up Hour");

                           entity.Property(e => e.IpAdd)
                               .HasMaxLength(50)
                               .IsUnicode(false)
                               .HasColumnName("IP_ADD");

                           entity.Property(e => e.IpMod)
                               .HasMaxLength(50)
                               .IsUnicode(false)
                               .HasColumnName("IP_MOD");

                           entity.Property(e => e.LocationCode)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("LOCATION_CODE");

                           entity.Property(e => e.LocationName)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("LOCATION_NAME");

                           entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                           entity.Property(e => e.ModDate)
                               .HasColumnType("datetime")
                               .HasColumnName("MOD_DATE");

                           entity.Property(e => e.ModId)
                               .HasMaxLength(50)
                               .IsUnicode(false)
                               .HasColumnName("MOD_ID");

                           entity.Property(e => e.PeriodCode)
                               .HasMaxLength(5)
                               .IsUnicode(false)
                               .HasColumnName("PERIOD_CODE");

                           entity.Property(e => e.PeriodName)
                               .HasMaxLength(100)
                               .IsUnicode(false)
                               .HasColumnName("PERIOD_NAME");

                           entity.Property(e => e.PickUpHour).HasColumnName("Pick Up Hour");

                           entity.Property(e => e.PickUpInterval)
                               .HasMaxLength(5)
                               .IsUnicode(false);

                           entity.Property(e => e.UserId)
                               .HasMaxLength(50)
                               .IsUnicode(false)
                               .HasColumnName("USER_ID");

                           entity.Property(e => e.WorkflowStatus)
                               .HasMaxLength(5)
                               .IsUnicode(false)
                               .HasColumnName("WORKFLOW_STATUS");

                           entity.Property(e => e.XAdditional)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_ADDITIONAL");

                           entity.Property(e => e.XAmount)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_AMOUNT");

                           entity.Property(e => e.XAmountCarried)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_AMOUNT_CARRIED");

                           entity.Property(e => e.XAutoBilling)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_AUTO_BILLING");

                           entity.Property(e => e.XBaseCharges)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_BASE_CHARGES");

                           entity.Property(e => e.XBillBranch)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_BILL_BRANCH");

                           entity.Property(e => e.XBillBranchDescription)
                               .HasMaxLength(353)
                               .IsUnicode(false)
                               .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                           entity.Property(e => e.XBillDate)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_BILL_DATE");

                           entity.Property(e => e.XBillingCustomerName)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_BILLING_CUSTOMER_NAME");

                           entity.Property(e => e.XCollection)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_COLLECTION");

                           entity.Property(e => e.XCollectionDescription)
                               .HasMaxLength(353)
                               .IsUnicode(false)
                               .HasColumnName("X_COLLECTION_DESCRIPTION");

                           entity.Property(e => e.XCredits)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_CREDITS");

                           entity.Property(e => e.XCrnReversed)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_CRN_REVERSED");

                           entity.Property(e => e.XCrnReversedDescription)
                               .HasMaxLength(100)
                               .IsUnicode(false)
                               .HasColumnName("X_CRN_REVERSED_DESCRIPTION");

                           entity.Property(e => e.XCustomer)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_CUSTOMER");

                           entity.Property(e => e.XDate)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_DATE");

                           entity.Property(e => e.XDebits)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_DEBITS");

                           entity.Property(e => e.XDelivery)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_DELIVERY");

                           entity.Property(e => e.XDeliveryDate)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_DELIVERY_DATE");

                           entity.Property(e => e.XDeliveryDescription)
                               .HasMaxLength(353)
                               .IsUnicode(false)
                               .HasColumnName("X_DELIVERY_DESCRIPTION");

                           entity.Property(e => e.XDeliveryTime)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_DELIVERY_TIME");

                           entity.Property(e => e.XDistance)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_DISTANCE");

                           entity.Property(e => e.XDistanceKms)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_DISTANCE_KMS");

                           entity.Property(e => e.XFcValue)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_FC_VALUE");

                           entity.Property(e => e.XFixedAmount)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_FIXED_AMOUNT");

                           entity.Property(e => e.XMainCustomer)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_MAIN_CUSTOMER");

                           entity.Property(e => e.XMainCustomerDescription)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                           entity.Property(e => e.XNetAmount)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_NET_AMOUNT");

                           entity.Property(e => e.XNoOfBags)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_NO_OF_BAGS");

                           entity.Property(e => e.XNoOfSeals)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_NO_OF_SEALS");

                           entity.Property(e => e.XNumber)
                               .HasColumnType("numeric(20, 0)")
                               .HasColumnName("X_NUMBER");
                           
                           entity.Property(e => e.ConvertedShipmentNo).HasColumnName("ConvertedShipmentNo");

                           entity.Property(e => e.XPickDate)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_PICK_DATE");

                           entity.Property(e => e.XPickTime)
                               .HasMaxLength(30)
                               .IsUnicode(false)
                               .HasColumnName("X_PICK_TIME");

                           entity.Property(e => e.XPortalReference)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_PORTAL_REFERENCE");

                           entity.Property(e => e.XRateId)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_RATE_ID");

                           entity.Property(e => e.XRateIdDescription)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_RATE_ID_DESCRIPTION");

                           entity.Property(e => e.XRemarks)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_REMARKS");

                           entity.Property(e => e.XRevenueRegion)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_REVENUE_REGION");

                           entity.Property(e => e.XRevenueRegionDescription)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                           entity.Property(e => e.XSealCharges)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_SEAL_CHARGES");

                           entity.Property(e => e.XShipmentNo)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_SHIPMENT_NO");

                           entity.Property(e => e.XShipmentType)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_SHIPMENT_TYPE");

                           entity.Property(e => e.XShipmentTypeDescription)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                           entity.Property(e => e.XSurCharge)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_SUR_CHARGE");

                           entity.Property(e => e.XTollTax)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_TOLL_TAX");

                           entity.Property(e => e.XVaultCharges)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_VAULT_CHARGES");

                           entity.Property(e => e.XVaultNights)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_VAULT_NIGHTS");

                           entity.Property(e => e.XVehicle)
                               .HasMaxLength(25)
                               .IsUnicode(false)
                               .HasColumnName("X_VEHICLE");

                           entity.Property(e => e.XVehicleDescription)
                               .HasMaxLength(250)
                               .IsUnicode(false)
                               .HasColumnName("X_VEHICLE_DESCRIPTION");

                           entity.Property(e => e.XWaiting)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_WAITING");

                           entity.Property(e => e.XWaitingMins)
                               .HasColumnType("numeric(20, 2)")
                               .HasColumnName("X_WAITING_MINS");

                           entity.Property(e => e.YearCode)
                               .HasMaxLength(5)
                               .IsUnicode(false)
                               .HasColumnName("YEAR_CODE");

                           entity.Property(e => e.YearName)
                               .HasMaxLength(100)
                               .IsUnicode(false)
                               .HasColumnName("YEAR_NAME");
                       });

            modelBuilder.Entity<RbCitShipmentCopy02>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT_COPY02");

                entity.Property(e => e.CollectionClient)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Collection_Client");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DeliveryClient)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Delivery_Client");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdditional)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADDITIONAL");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XAutoBilling)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AUTO_BILLING");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XCredits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CREDITS");

                entity.Property(e => e.XCrnReversed)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED");

                entity.Property(e => e.XCrnReversedDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDebits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEBITS");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DATE");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");

                entity.Property(e => e.XDeliveryTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TIME");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XDistanceKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE_KMS");

                entity.Property(e => e.XFcValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FC_VALUE");

                entity.Property(e => e.XFixedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FIXED_AMOUNT");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPickDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_DATE");

                entity.Property(e => e.XPickTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_TIME");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRateId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID");

                entity.Property(e => e.XRateIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID_DESCRIPTION");

                entity.Property(e => e.XRevenueRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION");

                entity.Property(e => e.XRevenueRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XTollTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLL_TAX");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");

                entity.Property(e => e.XVaultNights)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_NIGHTS");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XWaiting)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING");

                entity.Property(e => e.XWaitingMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING_MINS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitShipmentCopy03>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT_COPY03");

                entity.Property(e => e.CollectionClient)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Collection_Client");

                entity.Property(e => e.CollectionClientDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Collection_Client_Description");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DeliveryClient)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("Delivery_Client");

                entity.Property(e => e.DeliveryClientDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("Delivery_Client_Description");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAdditional)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADDITIONAL");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XAutoBilling)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AUTO_BILLING");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBillDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_DATE");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XCredits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CREDITS");

                entity.Property(e => e.XCrnReversed)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED");

                entity.Property(e => e.XCrnReversedDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CRN_REVERSED_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDebits)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DEBITS");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DATE");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");

                entity.Property(e => e.XDeliveryTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TIME");

                entity.Property(e => e.XDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE");

                entity.Property(e => e.XDistanceKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DISTANCE_KMS");

                entity.Property(e => e.XFcValue)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FC_VALUE");

                entity.Property(e => e.XFixedAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FIXED_AMOUNT");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPickDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_DATE");

                entity.Property(e => e.XPickTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_TIME");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XRateId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID");

                entity.Property(e => e.XRateIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_RATE_ID_DESCRIPTION");

                entity.Property(e => e.XRevenueRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION");

                entity.Property(e => e.XRevenueRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_REGION_DESCRIPTION");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSurCharge)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUR_CHARGE");

                entity.Property(e => e.XTollTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOLL_TAX");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");

                entity.Property(e => e.XVaultNights)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_NIGHTS");

                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_CODE_DESCRIPTION");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.XWaiting)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING");

                entity.Property(e => e.XWaitingMins)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WAITING_MINS");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCitShipmentForeignCurrency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT_FOREIGN_CURRENCY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountInFc)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_IN_FC");

                entity.Property(e => e.XAmountInPkr)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_IN_PKR");

                entity.Property(e => e.XConversionRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CONVERSION_RATE");

                entity.Property(e => e.XCurrency)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY");

                entity.Property(e => e.XCurrencyDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCitShipmentSealsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CIT_SHIPMENT_SEALS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SEAL_CODE");
            });

            modelBuilder.Entity<RbCity>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CITY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XZone)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ZONE");

                entity.Property(e => e.XZoneDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ZONE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbCpcCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCpcDailySortingTransaction>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___DAILY_SORTING_TRANSACTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DShipDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SHIP_DATE");

                entity.Property(e => e.DShipTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SHIP_TIME");

                entity.Property(e => e.DTranDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_TRAN_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAccumulatedSorted)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_ACCUMULATED_SORTED");

                entity.Property(e => e.XAmountRs10)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_10");

                entity.Property(e => e.XAmountRs100)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_100");

                entity.Property(e => e.XAmountRs1000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_1000");

                entity.Property(e => e.XAmountRs20)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_20");

                entity.Property(e => e.XAmountRs50)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_50");

                entity.Property(e => e.XAmountRs500)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_500");

                entity.Property(e => e.XAmountRs5000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_AMOUNT_RS_5000");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBundleRs10)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_10");

                entity.Property(e => e.XBundleRs100)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_100");

                entity.Property(e => e.XBundleRs1000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_1000");

                entity.Property(e => e.XBundleRs20)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_20");

                entity.Property(e => e.XBundleRs50)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_50");

                entity.Property(e => e.XBundleRs500)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_500");

                entity.Property(e => e.XBundleRs5000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_5000");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XShipDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIP_DATE");

                entity.Property(e => e.XShipTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIP_TIME");

                entity.Property(e => e.XShipmentAmount)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_SHIPMENT_AMOUNT");

                entity.Property(e => e.XShipmentNumber)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER");

                entity.Property(e => e.XShipmentNumberDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER_DESCRIPTION");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTaxRate)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_TAX_RATE");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.XTranDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TRAN_DATE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcDailySortingTransactionsSortingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___DAILY_SORTING_TRANSACTIONS_SORTING_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBundleRs10)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_10");

                entity.Property(e => e.XBundleRs100)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_100");

                entity.Property(e => e.XBundleRs1000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_1000");

                entity.Property(e => e.XBundleRs20)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_20");

                entity.Property(e => e.XBundleRs50)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_50");

                entity.Property(e => e.XBundleRs500)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_500");

                entity.Property(e => e.XBundleRs5000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_BUNDLE_RS_5000");

                entity.Property(e => e.XLeafRs10)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_10");

                entity.Property(e => e.XLeafRs100)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_100");

                entity.Property(e => e.XLeafRs1000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_1000");

                entity.Property(e => e.XLeafRs20)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_20");

                entity.Property(e => e.XLeafRs50)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_50");

                entity.Property(e => e.XLeafRs500)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_500");

                entity.Property(e => e.XLeafRs5000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_LEAF_RS_5000");

                entity.Property(e => e.XPacketRs10)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_10");

                entity.Property(e => e.XPacketRs100)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_100");

                entity.Property(e => e.XPacketRs1000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_1000");

                entity.Property(e => e.XPacketRs20)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_20");

                entity.Property(e => e.XPacketRs50)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_50");

                entity.Property(e => e.XPacketRs500)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_500");

                entity.Property(e => e.XPacketRs5000)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_PACKET_RS_5000");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSortedAmount)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_SORTED_AMOUNT");

                entity.Property(e => e.XTargetAmount)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_TARGET_AMOUNT");
            });

            modelBuilder.Entity<RbCpcDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCpcOtherVendorShipment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___OTHER_VENDOR_SHIPMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DATE");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");

                entity.Property(e => e.XDeliveryTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_TIME");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPickDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_DATE");

                entity.Property(e => e.XPickTime)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PICK_TIME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSecurityCompany)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SECURITY_COMPANY");

                entity.Property(e => e.XSecurityCompanyDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SECURITY_COMPANY_DESCRIPTION");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcOtherVendorShipmentForeignCurrency>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___OTHER_VENDOR_SHIPMENT_FOREIGN_CURRENCY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountInFc)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_IN_FC");

                entity.Property(e => e.XAmountInPkr)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_IN_PKR");

                entity.Property(e => e.XConversionRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CONVERSION_RATE");

                entity.Property(e => e.XCurrency)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY");

                entity.Property(e => e.XCurrencyDescription)
                    .HasMaxLength(128)
                    .IsUnicode(false)
                    .HasColumnName("X_CURRENCY_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCpcOtherVendorShipmentSealsDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___OTHER_VENDOR_SHIPMENT_SEALS_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SEAL_CODE");
            });

            modelBuilder.Entity<RbCpcSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCpcSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyRcvd)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RCVD");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbCpcSalesTaxInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_TAX_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DUE_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XArrears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ARREARS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XInvoiceNumber)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_NUMBER");

                entity.Property(e => e.XMainCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE");

                entity.Property(e => e.XMainCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbCpcSalesTaxInvoiceInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_TAX_INVOICE_INVOICE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBundles)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BUNDLES");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDenomination)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DENOMINATION");

                entity.Property(e => e.XDenominationDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_DENOMINATION_DESCRIPTION");

                entity.Property(e => e.XNetAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_AMOUNT");

                entity.Property(e => e.XParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbCpcSalesTaxInvoiceSortingDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CPC___SALES_TAX_INVOICE_SORTING_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountRs10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_10");

                entity.Property(e => e.XAmountRs100)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_100");

                entity.Property(e => e.XAmountRs1000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_1000");

                entity.Property(e => e.XAmountRs20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_20");

                entity.Property(e => e.XAmountRs50)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_50");

                entity.Property(e => e.XAmountRs500)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_500");

                entity.Property(e => e.XAmountRs5000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_RS_5000");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XDstNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DST_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShipmentNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NUMBER");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");
            });

            modelBuilder.Entity<RbCreditNoteReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CREDIT_NOTE_REASONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbCustomerManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CUSTOMER_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DRegistrationDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REGISTRATION_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XArea)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_AREA");

                entity.Property(e => e.XAreaDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_AREA_DESCRIPTION");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCustomerType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_TYPE");

                entity.Property(e => e.XCustomerTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_TYPE_DESCRIPTION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XIndustryType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INDUSTRY_TYPE");

                entity.Property(e => e.XIndustryTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INDUSTRY_TYPE_DESCRIPTION");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XRegistrationDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REGISTRATION_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSalesTaxExemption)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_EXEMPTION");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XSalesTaxReg)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_REG");

                entity.Property(e => e.XSalesTaxRegDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_REG_DESCRIPTION");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbCustomerManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CUSTOMER_MANAGEMENT_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbCustomerType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_CUSTOMER_TYPE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_CODE");

                entity.Property(e => e.XSalesCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_CODE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbDebitNoteReason>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_DEBIT_NOTE_REASONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbDoubleRateTiming>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_DOUBLE_RATE_TIMINGS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DFriday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_FRIDAY");

                entity.Property(e => e.DMonday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_MONDAY");

                entity.Property(e => e.DSaturday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SATURDAY");

                entity.Property(e => e.DSunday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SUNDAY");

                entity.Property(e => e.DThursday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_THURSDAY");

                entity.Property(e => e.DTuesday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_TUESDAY");

                entity.Property(e => e.DWednesday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_WEDNESDAY");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFriday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_FRIDAY");

                entity.Property(e => e.XMonday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_MONDAY");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSaturday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SATURDAY");

                entity.Property(e => e.XSunday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SUNDAY");

                entity.Property(e => e.XThursday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_THURSDAY");

                entity.Property(e => e.XTuesday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TUESDAY");

                entity.Property(e => e.XWednesday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_WEDNESDAY");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbDoubleRateTimingsChargingException>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_DOUBLE_RATE_TIMINGS_CHARGING_EXCEPTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountFrom)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_FROM");

                entity.Property(e => e.XAmountTo)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_TO");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ELEMENT");

                entity.Property(e => e.XElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XIncreasePercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREASE_PERCENTAGE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XWeekday)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WEEKDAY");

                entity.Property(e => e.XWeekdayDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_WEEKDAY_DESCRIPTION");
            });

            modelBuilder.Entity<RbDoubleRateTimingsCitRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_DOUBLE_RATE_TIMINGS_CIT_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmountFrom)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_FROM");

                entity.Property(e => e.XAmountTo)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_TO");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ELEMENT");

                entity.Property(e => e.XElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XIncreasePercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INCREASE_PERCENTAGE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XWeekday)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WEEKDAY");

                entity.Property(e => e.XWeekdayDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_WEEKDAY_DESCRIPTION");
            });

            modelBuilder.Entity<RbDoubleRateTimingsTimingException>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_DOUBLE_RATE_TIMINGS_TIMING_EXCEPTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DFriday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_FRIDAY");

                entity.Property(e => e.DMonday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_MONDAY");

                entity.Property(e => e.DSaturday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SATURDAY");

                entity.Property(e => e.DSunday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_SUNDAY");

                entity.Property(e => e.DThursday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_THURSDAY");

                entity.Property(e => e.DTuesday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_TUESDAY");

                entity.Property(e => e.DWednesday)
                    .HasColumnType("datetime")
                    .HasColumnName("D_WEDNESDAY");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFriday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_FRIDAY");

                entity.Property(e => e.XMonday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_MONDAY");

                entity.Property(e => e.XNature)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE");

                entity.Property(e => e.XNatureDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSaturday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SATURDAY");

                entity.Property(e => e.XSunday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_SUNDAY");

                entity.Property(e => e.XThursday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_THURSDAY");

                entity.Property(e => e.XTuesday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TUESDAY");

                entity.Property(e => e.XWednesday)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_WEDNESDAY");
            });

            modelBuilder.Entity<RbFeature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_FEATURES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbGuardingAdditionalGuardRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___ADDITIONAL_GUARD_REQUEST");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DUE_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XProject)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT");

                entity.Property(e => e.XProjectDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PROJECT_DESCRIPTION");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequestNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_NUMBER");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingAdditionalGuardRequestGuardDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___ADDITIONAL_GUARD_REQUEST_GUARD_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DRequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REQUEST_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequestDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_DATE");

                entity.Property(e => e.XRequestType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE");

                entity.Property(e => e.XRequestTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE_DESCRIPTION");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContract>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContractStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_STATUS");

                entity.Property(e => e.XContractStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTRACT_STATUS_DESCRIPTION");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbGuardingContractAdditionalGuardRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_ADDITIONAL_GUARD_REQUESTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DRequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REQUEST_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequestDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_DATE");

                entity.Property(e => e.XRequestId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_ID");

                entity.Property(e => e.XRequestType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE");

                entity.Property(e => e.XRequestTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE_DESCRIPTION");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");
            });

            modelBuilder.Entity<RbGuardingContractBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_BRANCHES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XBranchLevelInvoiceRates)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_LEVEL_INVOICE_RATES");

                entity.Property(e => e.XBranchLevelSalaryRates)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_LEVEL_SALARY_RATES");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XEvening)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EVENING");

                entity.Property(e => e.XInvoiceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_AMOUNT");

                entity.Property(e => e.XInvoiceRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_RATE");

                entity.Property(e => e.XMorning)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MORNING");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY_AMOUNT");

                entity.Property(e => e.XSalaryRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY_RATE");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERVICE_RATE");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractBranchInvoiceRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_BRANCH_INVOICE_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XInvoiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE");

                entity.Property(e => e.XInvoiceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRs10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_10");

                entity.Property(e => e.XRs100)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_100");

                entity.Property(e => e.XRs1000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_1000");

                entity.Property(e => e.XRs20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_20");

                entity.Property(e => e.XRs50)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_50");

                entity.Property(e => e.XRs500)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_500");

                entity.Property(e => e.XRs5000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_5000");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractBranchesCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_BRANCHES_COPY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.Project)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XBranchLevelInvoiceRates)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_LEVEL_INVOICE_RATES");

                entity.Property(e => e.XBranchLevelSalaryRates)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_LEVEL_SALARY_RATES");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XEvening)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_EVENING");

                entity.Property(e => e.XGuardingStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATUS_DESCRIPTION");

                entity.Property(e => e.XInvoiceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_AMOUNT");

                entity.Property(e => e.XInvoiceRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_RATE");

                entity.Property(e => e.XMorning)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MORNING");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalaryAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY_AMOUNT");

                entity.Property(e => e.XSalaryRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALARY_RATE");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERVICE_RATE");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XSubRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractBranchesWisePaidLeaf>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_BRANCHES_WISE_PAID_LEAVES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFromDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FROM_DAYS");

                entity.Property(e => e.XLeaves)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LEAVES");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XToDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_DAYS");
            });

            modelBuilder.Entity<RbGuardingContractCompanyInvoiceRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_COMPANY_INVOICE_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XInvoiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE");

                entity.Property(e => e.XInvoiceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRs10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_10");

                entity.Property(e => e.XRs100)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_100");

                entity.Property(e => e.XRs1000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_1000");

                entity.Property(e => e.XRs20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_20");

                entity.Property(e => e.XRs50)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_50");

                entity.Property(e => e.XRs500)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_500");

                entity.Property(e => e.XRs5000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_5000");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractGuardCostRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_GUARD_COST_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractGuardRemovalRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_GUARD_REMOVAL_REQUESTS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DRequestDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REQUEST_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRequestDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_DATE");

                entity.Property(e => e.XRequestId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_ID");

                entity.Property(e => e.XRequestType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE");

                entity.Property(e => e.XRequestTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_REQUEST_TYPE_DESCRIPTION");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractGuardingInvoiceRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_GUARDING_INVOICE_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractSalaryRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_SALARY_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractSubRegionInvoiceRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_SUB_REGION_INVOICE_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XInvoiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE");

                entity.Property(e => e.XInvoiceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRs10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_10");

                entity.Property(e => e.XRs100)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_100");

                entity.Property(e => e.XRs1000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_1000");

                entity.Property(e => e.XRs20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_20");

                entity.Property(e => e.XRs50)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_50");

                entity.Property(e => e.XRs500)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_500");

                entity.Property(e => e.XRs5000)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RS_5000");

                entity.Property(e => e.XServiceCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE");

                entity.Property(e => e.XServiceCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_CODE_DESCRIPTION");

                entity.Property(e => e.XSubRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION");

                entity.Property(e => e.XSubRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingContractWeapon>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING_CONTRACT_WEAPONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XWeaponCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_WEAPON_CODE");

                entity.Property(e => e.XWeaponCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_WEAPON_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbGuardingCreditNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___CREDIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XMain)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN");

                entity.Property(e => e.XMainDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingCreditNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___CREDIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCreditAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbGuardingDebitNote>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___DEBIT_NOTE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DRefDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_REF_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XMain)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN");

                entity.Property(e => e.XMainDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRefDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_DATE");

                entity.Property(e => e.XRefNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REF_NO");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingDebitNoteDocumentDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___DEBIT_NOTE_DOCUMENT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XDebitAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XNetValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_VALUE");

                entity.Property(e => e.XReason)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON");

                entity.Property(e => e.XReasonDescription)
                    .HasMaxLength(226)
                    .IsUnicode(false)
                    .HasColumnName("X_REASON_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");
            });

            modelBuilder.Entity<RbGuardingMasterReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___MASTER_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XMiscDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MISC_DED");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPenalties)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PENALTIES");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortfall)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SHORTFALL");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XUniform)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNIFORM");

                entity.Property(e => e.XWeapons)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WEAPONS");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingMasterReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___MASTER_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbGuardingMasterReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___MASTER_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdj)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJ");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbGuardingSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XMiscDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MISC_DED");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XPaidAndPost)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PAID_AND_POST");

                entity.Property(e => e.XPenalties)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PENALTIES");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShortfall)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SHORTFALL");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XUniform)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_UNIFORM");

                entity.Property(e => e.XWeapons)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WEAPONS");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbGuardingSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAdjustedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ADJUSTED_NOW");

                entity.Property(e => e.XAlreadyAdj)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_ADJ");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetAdjusted)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_ADJUSTED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbGuardingSalesTaxInvoice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_TAX_INVOICE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DDueDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DUE_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XArrears)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ARREARS");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDueDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DUE_DATE");

                entity.Property(e => e.XInvoiceNumber)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_INVOICE_NUMBER");

                entity.Property(e => e.XInvoiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE");

                entity.Property(e => e.XInvoiceTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XMainCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE");

                entity.Property(e => e.XMainCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CODE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthority)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY");

                entity.Property(e => e.XRevenueAuthorityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHORITY_DESCRIPTION");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTotalAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_AMOUNT");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbGuardingSalesTaxInvoiceBranchDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_TAX_INVOICE_BRANCH_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XChargedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CHARGED_DAYS");

                entity.Property(e => e.XDailyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DAILY_RATE");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XReducedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REDUCED_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XServiceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERVICE_AMOUNT");

                entity.Property(e => e.XServiceRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERVICE_RATE");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XTotalDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_DAYS");

                entity.Property(e => e.XTotalValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_VALUE");
            });

            modelBuilder.Entity<RbGuardingSalesTaxInvoiceBranchDetailsNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_TAX_INVOICE_BRANCH_DETAILS_NEW");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XBranchId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_ID");

                entity.Property(e => e.XChargedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CHARGED_DAYS");

                entity.Property(e => e.XCustomerId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_ID");

                entity.Property(e => e.XDailyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_DAILY_RATE");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XNoOfGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_GUARDS");

                entity.Property(e => e.XReducedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REDUCED_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XServiceType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE");

                entity.Property(e => e.XServiceTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_TYPE_DESCRIPTION");

                entity.Property(e => e.XTotalDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_DAYS");

                entity.Property(e => e.XTotalValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_VALUE");
            });

            modelBuilder.Entity<RbGuardingSalesTaxInvoiceInvoiceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_TAX_INVOICE_INVOICE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XChargedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CHARGED_DAYS");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XGrossValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GROSS_VALUE");

                entity.Property(e => e.XGuards)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_GUARDS");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XNetReceivable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVABLE");

                entity.Property(e => e.XParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS");

                entity.Property(e => e.XRatePerDay)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE_PER_DAY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XServiceAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERVICE_AMOUNT");
            });

            modelBuilder.Entity<RbGuardingSalesTaxInvoiceOtherService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_GUARDING___SALES_TAX_INVOICE_OTHER_SERVICES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_DESCRIPTION");

                entity.Property(e => e.XChargedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_CHARGED_DAYS");

                entity.Property(e => e.XDailyRate)
                    .HasColumnType("numeric(20, 10)")
                    .HasColumnName("X_DAILY_RATE");

                entity.Property(e => e.XMonthlyRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTHLY_RATE");

                entity.Property(e => e.XNetReceivable)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVABLE");

                entity.Property(e => e.XQuantity)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_QUANTITY");

                entity.Property(e => e.XReducedDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REDUCED_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE");

                entity.Property(e => e.XRevenueCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_CODE_DESCRIPTION");

                entity.Property(e => e.XSalesTax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SALES_TAX");

                entity.Property(e => e.XTotalDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_DAYS");

                entity.Property(e => e.XTotalValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_VALUE");
            });

            modelBuilder.Entity<RbIndustryType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_INDUSTRY_TYPE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbIntegrationDocumentsManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_INTEGRATION_DOCUMENTS_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbIntegrationDocumentsManagementGlAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_INTEGRATION_DOCUMENTS_MANAGEMENT_GL_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCreditAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT");

                entity.Property(e => e.XCreditAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CREDIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XDebitAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT");

                entity.Property(e => e.XDebitAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DEBIT_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XGeneralRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GENERAL_REMARKS");

                entity.Property(e => e.XNatureOfAmount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT");

                entity.Property(e => e.XNatureOfAmountDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_NATURE_OF_AMOUNT_DESCRIPTION");

                entity.Property(e => e.XParticularsForCreditEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_CREDIT_ENTRY");

                entity.Property(e => e.XParticularsForDebitEntry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PARTICULARS_FOR_DEBIT_ENTRY");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbLocation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_LOCATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbMainCustomerManagement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCitCentralized)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_CENTRALIZED");

                entity.Property(e => e.XCitInvoicing)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_INVOICING");

                entity.Property(e => e.XCitInvoicingDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_INVOICING_DESCRIPTION");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCpcCentralized)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC_CENTRALIZED");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XGuardingCentralized)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_CENTRALIZED");

                entity.Property(e => e.XIbanNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IBAN_NUMBER");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XLocalRangeInKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_LOCAL_RANGE_IN_KMS");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XShipmentDate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_DATE");

                entity.Property(e => e.XShipmentDateDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_DATE_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbMainCustomerManagementAtmTripRatesMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_ATM_TRIP_RATES_MAPPING");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DValidFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_FROM");

                entity.Property(e => e.DValidTo)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_TO");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDoubleRate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOUBLE_RATE");

                entity.Property(e => e.XDoubleRateDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOUBLE_RATE_DESCRIPTION");

                entity.Property(e => e.XRegionalOffice)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGIONAL_OFFICE");

                entity.Property(e => e.XRegionalOfficeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGIONAL_OFFICE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_ID");

                entity.Property(e => e.XServiceIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_ID_DESCRIPTION");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XValidFrom)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_FROM");

                entity.Property(e => e.XValidTo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_TO");
            });

            modelBuilder.Entity<RbMainCustomerManagementBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_BRANCHES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAlramSystem)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALRAM_SYSTEM");

                entity.Property(e => e.XAlramSystemDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ALRAM_SYSTEM_DESCRIPTION");

                entity.Property(e => e.XAtmBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_BRANCH");

                entity.Property(e => e.XAtmBranchDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_BRANCH_DESCRIPTION");

                entity.Property(e => e.XAtmCitBill)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_CIT_BILL");

                entity.Property(e => e.XAtmCitBillDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_CIT_BILL_DESCRIPTION");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchDetailFeatures)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DETAIL_FEATURES");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XBranchStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS");

                entity.Property(e => e.XBranchStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS_DESCRIPTION");

                entity.Property(e => e.XBranchType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_TYPE");

                entity.Property(e => e.XBranchTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_TYPE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContactPersonDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_PERSON_DETAILS");

                entity.Property(e => e.XCpc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC");

                entity.Property(e => e.XCpcBranch)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC_BRANCH");

                entity.Property(e => e.XCpcDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC_DESCRIPTION");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XFaxNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NUMBER");

                entity.Property(e => e.XGeoStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GEO_STATUS");

                entity.Property(e => e.XGeoStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GEO_STATUS_DESCRIPTION");

                entity.Property(e => e.XGuardingRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_REGION");

                entity.Property(e => e.XGuardingRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_REGION_DESCRIPTION");

                entity.Property(e => e.XGuardingStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATION");

                entity.Property(e => e.XGuardingStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATION_DESCRIPTION");

                entity.Property(e => e.XGuardingStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATUS");

                entity.Property(e => e.XGuardingStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATUS_DESCRIPTION");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XLatitude)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LATITUDE");

                entity.Property(e => e.XLongitude)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LONGITUDE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSubRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION");

                entity.Property(e => e.XSubRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION_DESCRIPTION");
            });

            modelBuilder.Entity<RbMainCustomerManagementBranchFeature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_BRANCH_FEATURES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId).HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDetailCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DETAIL_CODE");

                entity.Property(e => e.XDetailCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DETAIL_CODE_DESCRIPTION");

                entity.Property(e => e.XFeatureName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_NAME");

                entity.Property(e => e.XFeatureNameDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_NAME_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbMainCustomerManagementBranchesCopy>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_BRANCHES_COPY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAlramSystem)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ALRAM_SYSTEM");

                entity.Property(e => e.XAlramSystemDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ALRAM_SYSTEM_DESCRIPTION");

                entity.Property(e => e.XAtmBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_BRANCH");

                entity.Property(e => e.XAtmBranchDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_BRANCH_DESCRIPTION");

                entity.Property(e => e.XAtmCitBill)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_CIT_BILL");

                entity.Property(e => e.XAtmCitBillDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ATM_CIT_BILL_DESCRIPTION");

                entity.Property(e => e.XBranchCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE");

                entity.Property(e => e.XBranchCodeCopy)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_CODE_COPY");

                entity.Property(e => e.XBranchDetailFeatures)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DETAIL_FEATURES");

                entity.Property(e => e.XBranchName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_NAME");

                entity.Property(e => e.XBranchStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS");

                entity.Property(e => e.XBranchStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_STATUS_DESCRIPTION");

                entity.Property(e => e.XBranchType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_TYPE");

                entity.Property(e => e.XBranchTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_TYPE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XContactPersonDetails)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CONTACT_PERSON_DETAILS");

                entity.Property(e => e.XCpc)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC");

                entity.Property(e => e.XCpcBranch)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC_BRANCH");

                entity.Property(e => e.XCpcDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CPC_DESCRIPTION");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XFaxNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NUMBER");

                entity.Property(e => e.XGeoStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GEO_STATUS");

                entity.Property(e => e.XGeoStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GEO_STATUS_DESCRIPTION");

                entity.Property(e => e.XGuardingRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_REGION");

                entity.Property(e => e.XGuardingRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_REGION_DESCRIPTION");

                entity.Property(e => e.XGuardingStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATION");

                entity.Property(e => e.XGuardingStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATION_DESCRIPTION");

                entity.Property(e => e.XGuardingStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATUS");

                entity.Property(e => e.XGuardingStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GUARDING_STATUS_DESCRIPTION");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XLatitude)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LATITUDE");

                entity.Property(e => e.XLongitude)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LONGITUDE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XSubRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION");

                entity.Property(e => e.XSubRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_REGION_DESCRIPTION");
            });

            modelBuilder.Entity<RbMainCustomerManagementCitBranchRate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_CIT_BRANCH_RATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DValidFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_FROM");

                entity.Property(e => e.DValidTo)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_TO");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDestination)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION");

                entity.Property(e => e.XDestinationDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DESTINATION_DESCRIPTION");

                entity.Property(e => e.XFrom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FROM");

                entity.Property(e => e.XFromDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_FROM_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XShipmentRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SHIPMENT_RATE");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XValidFrom)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_FROM");

                entity.Property(e => e.XValidTo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_TO");
            });

            modelBuilder.Entity<RbMainCustomerManagementCitDedicatedVehicle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_CIT_DEDICATED_VEHICLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRadiusKm)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RADIUS_KM");

                entity.Property(e => e.XRate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTrips)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TRIPS");

                entity.Property(e => e.XVehicles)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLES");
            });

            modelBuilder.Entity<RbMainCustomerManagementCitRatesMapping>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_CIT_RATES_MAPPING");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DValidFrom)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_FROM");

                entity.Property(e => e.DValidTo)
                    .HasColumnType("datetime")
                    .HasColumnName("D_VALID_TO");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDoubleRate)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DOUBLE_RATE");

                entity.Property(e => e.XDoubleRateDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DOUBLE_RATE_DESCRIPTION");

                entity.Property(e => e.XRegionalOffice)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGIONAL_OFFICE");

                entity.Property(e => e.XRegionalOfficeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGIONAL_OFFICE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XServiceId)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_ID");

                entity.Property(e => e.XServiceIdDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SERVICE_ID_DESCRIPTION");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XStatus)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS");

                entity.Property(e => e.XStatusDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_STATUS_DESCRIPTION");

                entity.Property(e => e.XValidFrom)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_FROM");

                entity.Property(e => e.XValidTo)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_VALID_TO");
            });

            modelBuilder.Entity<RbMainCustomerManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbMainCustomerManagementFeatureCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_FEATURE_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFeatureDetailCodes)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_DETAIL_CODES");

                entity.Property(e => e.XFeatureName)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_NAME");

                entity.Property(e => e.XFeatureNameDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_NAME_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbMainCustomerManagementFeatureDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_FEATURE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId).HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFeatureCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FEATURE_CODE");

                entity.Property(e => e.XFestureDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FESTURE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbMainCustomerManagementGuardingInvoiceDay>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_GUARDING_INVOICE_DAYS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XMonthCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MONTH_CODE");

                entity.Property(e => e.XMonthCodeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_MONTH_CODE_DESCRIPTION");

                entity.Property(e => e.XMonthDays)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_MONTH_DAYS");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");
            });

            modelBuilder.Entity<RbMainCustomerManagementSegmentWiseBankDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_SEGMENT_WISE_BANK_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NUMBER");

                entity.Property(e => e.XAccountTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_TITLE");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XIbanNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_IBAN_NUMBER");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSegment)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SEGMENT");

                entity.Property(e => e.XSegmentDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SEGMENT_DESCRIPTION");
            });

            modelBuilder.Entity<RbMainCustomerManagementVehcileDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_VEHCILE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId).HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XVehicleCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_CODE");

                entity.Property(e => e.XVehicleCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbMainCustomerManagementVehicleDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_MAIN_CUSTOMER_MANAGEMENT_VEHICLE_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MDetailId).HasColumnName("M_DETAIL_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XVehicleCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_CODE");

                entity.Property(e => e.XVehicleCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbOrderStatus>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ORDER_STATUS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbOrderType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ORDER_TYPE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbPaymentTermTemplate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_PAYMENT_TERM_TEMPLATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbPaymentTermTemplatesPaymentTerm>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_PAYMENT_TERM_TEMPLATES_PAYMENT_TERMS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SERIAL_");

                entity.Property(e => e.XSubSerial)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SUB_SERIAL");

                entity.Property(e => e.XText)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_TEXT");
            });

            modelBuilder.Entity<RbProductClassification>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_PRODUCT_CLASSIFICATION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XClassification)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CLASSIFICATION");

                entity.Property(e => e.XClassificationDescription)
                    .HasMaxLength(276)
                    .IsUnicode(false)
                    .HasColumnName("X_CLASSIFICATION_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSellingRateChangeableOnCustomerEnquiry)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SELLING_RATE_CHANGEABLE_ON_CUSTOMER_ENQUIRY");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbProductClassificationCostLink>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_PRODUCT_CLASSIFICATION_COST_LINKS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCostOfStock)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK");

                entity.Property(e => e.XCostOfStockDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_COST_OF_STOCK_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStockControlCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE");

                entity.Property(e => e.XStockControlCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STOCK_CONTROL_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbProjectNature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_PROJECT_NATURE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_REGION");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbRegionalOffice>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_REGIONAL_OFFICES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION");

                entity.Property(e => e.XRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbRevenueAuthority>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_REVENUE_AUTHORITY");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XInvoiceNote1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_NOTE_1");

                entity.Property(e => e.XInvoiceNote2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_NOTE_2");

                entity.Property(e => e.XInvoiceNote3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_NOTE_3");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSTaxPercent)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_S_TAX_PERCENT");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbRevenueAuthorityTaxCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_REVENUE_AUTHORITY_TAX_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccount)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT");

                entity.Property(e => e.XAccountDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XTaxTypes)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TAX_TYPES");

                entity.Property(e => e.XTaxTypesDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_TAX_TYPES_DESCRIPTION");
            });

            modelBuilder.Entity<RbRevenueNature>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_REVENUE_NATURE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbService>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");

                entity.Property(e => e.XTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE_DESCRIPTION");

                entity.Property(e => e.XUom)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_UOM");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbServiceCharge>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICE_CHARGES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XBaseDistance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_DISTANCE");

                entity.Property(e => e.XBaseLimit)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_LIMIT");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XFromKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_FROM_KMS");

                entity.Property(e => e.XMeasureDistance)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MEASURE_DISTANCE");

                entity.Property(e => e.XMeasureDistanceDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_MEASURE_DISTANCE_DESCRIPTION");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRatePerKm)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RATE_PER_KM");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSealCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_SEAL_CHARGES");

                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");

                entity.Property(e => e.XSubCode)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SUB_CODE");

                entity.Property(e => e.XSurCharges)
                    .HasColumnType("numeric(20, 5)")
                    .HasColumnName("X_SUR_CHARGES");

                entity.Property(e => e.XToKms)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TO_KMS");

                entity.Property(e => e.XVaultCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_CHARGES");

                entity.Property(e => e.XVaultRules)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VAULT_RULES");

                entity.Property(e => e.XVaultRulesDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_VAULT_RULES_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbServiceChargesBaseChargesRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICE_CHARGES_BASE_CHARGES_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBaseCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BASE_CHARGES");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ENDING_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STARTING_AMOUNT");
            });

            modelBuilder.Entity<RbServiceChargesCalculationRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICE_CHARGES_CALCULATION_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCalculationRule)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_RULE");

                entity.Property(e => e.XCalculationRuleDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CALCULATION_RULE_DESCRIPTION");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbServiceChargesChargesRule>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICE_CHARGES_CHARGES_RULES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCitElement)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT");

                entity.Property(e => e.XCitElementDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_CIT_ELEMENT_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEndingAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ENDING_AMOUNT");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartingAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STARTING_AMOUNT");

                entity.Property(e => e.XValue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VALUE");
            });

            modelBuilder.Entity<RbServicesAccountCode>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SERVICES_ACCOUNT_CODES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAccountNature)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NATURE");

                entity.Property(e => e.XAccountNatureDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_NATURE_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStandardParticulars)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STANDARD_PARTICULARS");
            });

            modelBuilder.Entity<RbShipmentType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SHIPMENT_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XAddress1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_1");

                entity.Property(e => e.XAddress2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_2");

                entity.Property(e => e.XAddress3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS_3");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XEmail)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL");

                entity.Property(e => e.XFaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FAX_NO");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XMobile)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MOBILE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XNtn)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NTN");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XSalesTaxNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SALES_TAX_NO");

                entity.Property(e => e.XShipmentNature)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NATURE");

                entity.Property(e => e.XShipmentNatureDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NATURE_DESCRIPTION");

                entity.Property(e => e.XUrl)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_URL");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbShipmentTypesContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SHIPMENT_TYPES_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbStation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_STATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XVaultStatus)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VAULT_STATUS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbStationsBillBranch>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_STATIONS_BILL_BRANCHES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH");

                entity.Property(e => e.XBranchDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbSubRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SUB_REGIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION");

                entity.Property(e => e.XRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XRevenueAuthroity)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHROITY");

                entity.Property(e => e.XRevenueAuthroityDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REVENUE_AUTHROITY_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbSubRegionsStation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SUB_REGIONS_STATIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_CODE");

                entity.Property(e => e.XStationCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_CODE_DESCRIPTION");
            });

            modelBuilder.Entity<RbSupplierManagementContactPerson>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_SUPPLIER_MANAGEMENT_CONTACT_PERSON");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAddress)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ADDRESS");

                entity.Property(e => e.XCellNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CELL_NO");

                entity.Property(e => e.XCnic)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CNIC");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDesignation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESIGNATION");

                entity.Property(e => e.XEmailId)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_EMAIL_ID");

                entity.Property(e => e.XLandline)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LANDLINE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbTimingException>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_TIMING_EXCEPTIONS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NAME");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbTimingExceptionsApplicableDate>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_TIMING_EXCEPTIONS_APPLICABLE_DATES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DEndDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_END_DATE");

                entity.Property(e => e.DStartDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_START_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEndDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_END_DATE");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStartDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_START_DATE");
            });

            modelBuilder.Entity<RbUnitOfMeasurement>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_UNIT_OF_MEASUREMENT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbVehicle>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_VEHICLES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DPurchaseDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PURCHASE_DATE");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XCapacity)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CAPACITY");

                entity.Property(e => e.XChasisNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CHASIS_NO");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XEngineNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ENGINE_NO");

                entity.Property(e => e.XFuelCardNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_FUEL_CARD_NUMBER");

                entity.Property(e => e.XGasolineType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_GASOLINE_TYPE");

                entity.Property(e => e.XGasolineTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_GASOLINE_TYPE_DESCRIPTION");

                entity.Property(e => e.XLeasingCompany)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LEASING_COMPANY");

                entity.Property(e => e.XLocation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION");

                entity.Property(e => e.XLocationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_LOCATION_DESCRIPTION");

                entity.Property(e => e.XMake)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAKE");

                entity.Property(e => e.XModel)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MODEL");

                entity.Property(e => e.XOrigin)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ORIGIN");

                entity.Property(e => e.XOtherCosts)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_COSTS");

                entity.Property(e => e.XPurchaseDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_PURCHASE_DATE");

                entity.Property(e => e.XPurchasePrice)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_PURCHASE_PRICE");

                entity.Property(e => e.XRegistration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGISTRATION");

                entity.Property(e => e.XRegistrationCost)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_REGISTRATION_COST");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStation)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION");

                entity.Property(e => e.XStationDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_STATION_DESCRIPTION");

                entity.Property(e => e.XTagNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TAG_NUMBER");

                entity.Property(e => e.XTotalCost)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_TOTAL_COST");

                entity.Property(e => e.XVehicleType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_TYPE");

                entity.Property(e => e.XVehicleTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_TYPE_DESCRIPTION");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbVehicleType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_VEHICLE_TYPE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbreviation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVIATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbWarehouse>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_WAREHOUSE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbWeaponType>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_WEAPON_TYPES");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<RbXxxAtmSalesReceipt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_XXX___ATM___SALES_RECEIPT");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DInstDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_INST_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.PeriodCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_CODE");

                entity.Property(e => e.PeriodName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("PERIOD_NAME");

                entity.Property(e => e.UserId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBank)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK");

                entity.Property(e => e.XBankCharges)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BANK_CHARGES");

                entity.Property(e => e.XBankName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BANK_NAME");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER_NAME");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XDrawnOnBank)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DRAWN_ON_BANK");

                entity.Property(e => e.XInstDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_INST_DATE");

                entity.Property(e => e.XInstrumentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_NO");

                entity.Property(e => e.XInstrumentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE");

                entity.Property(e => e.XInstrumentTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_INSTRUMENT_TYPE_DESCRIPTION");

                entity.Property(e => e.XInvoiceAdjustment)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_INVOICE_ADJUSTMENT");

                entity.Property(e => e.XManualReceiptNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MANUAL_RECEIPT_NO");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XOtherDed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_OTHER_DED");

                entity.Property(e => e.XReceiptType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE");

                entity.Property(e => e.XReceiptTypeDescription)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("X_RECEIPT_TYPE_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XStwh)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_STWH");

                entity.Property(e => e.XWhiAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_AMOUNT");

                entity.Property(e => e.XWhiPercentage)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_WHI_PERCENTAGE");

                entity.Property(e => e.YearCode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_CODE");

                entity.Property(e => e.YearName)
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasColumnName("YEAR_NAME");
            });

            modelBuilder.Entity<RbXxxAtmSalesReceiptOtherDeductionDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_XXX___ATM___SALES_RECEIPT_OTHER_DEDUCTION_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAccountCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE");

                entity.Property(e => e.XAccountCodeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ACCOUNT_CODE_DESCRIPTION");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XNarration)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NARRATION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");
            });

            modelBuilder.Entity<RbXxxAtmSalesReceiptReceiptDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_XXX___ATM___SALES_RECEIPT_RECEIPT_DETAILS");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DetailId).HasColumnName("DETAIL_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAlreadyRcvd)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_ALREADY_RCVD");

                entity.Property(e => e.XAmount)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT");

                entity.Property(e => e.XBalance)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_BALANCE");

                entity.Property(e => e.XDate)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("X_DATE");

                entity.Property(e => e.XNetReceived)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NET_RECEIVED");

                entity.Property(e => e.XNumber)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XReceivedNow)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_RECEIVED_NOW");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_TYPE");
            });

            modelBuilder.Entity<RbZone>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("RB_ZONE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.AddId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADD_ID");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.ModId)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("MOD_ID");

                entity.Property(e => e.XAbbrevation)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_ABBREVATION");

                entity.Property(e => e.XCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CODE");

                entity.Property(e => e.XDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_DESCRIPTION");

                entity.Property(e => e.XRegion)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION");

                entity.Property(e => e.XRegionDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REGION_DESCRIPTION");

                entity.Property(e => e.XRemarks)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_REMARKS");

                entity.Property(e => e.XrowId).HasColumnName("XROW_ID");
            });

            modelBuilder.Entity<Strfedbn>(entity =>
            {
                entity.HasKey(e => e.Stmseqno);

                entity.ToTable("STRFEDBN");

                entity.Property(e => e.Stmseqno)
                    .ValueGeneratedNever()
                    .HasColumnName("STMSEQNO");

                entity.Property(e => e.Accode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("ACCODE");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.DelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DEL_DATE");

                entity.Property(e => e.Dtcardtype)
                    .HasColumnType("numeric(5, 0)")
                    .HasColumnName("DTCARDTYPE");

                entity.Property(e => e.Dtcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DTCODE");

                entity.Property(e => e.IdDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_DEL");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_DEL");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.Lccode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LCCODE");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.Prcode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("PRCODE");

                entity.Property(e => e.Spcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SPCODE");

                entity.Property(e => e.Stmcd1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD1");

                entity.Property(e => e.Stmcd10)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD10");

                entity.Property(e => e.Stmcd11)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD11");

                entity.Property(e => e.Stmcd12)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD12");

                entity.Property(e => e.Stmcd13)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD13");

                entity.Property(e => e.Stmcd14)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD14");

                entity.Property(e => e.Stmcd15)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD15");

                entity.Property(e => e.Stmcd16)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD16");

                entity.Property(e => e.Stmcd17)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD17");

                entity.Property(e => e.Stmcd18)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD18");

                entity.Property(e => e.Stmcd19)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD19");

                entity.Property(e => e.Stmcd2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD2");

                entity.Property(e => e.Stmcd20)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD20");

                entity.Property(e => e.Stmcd21)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD21");

                entity.Property(e => e.Stmcd22)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD22");

                entity.Property(e => e.Stmcd23)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD23");

                entity.Property(e => e.Stmcd24)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD24");

                entity.Property(e => e.Stmcd25)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD25");

                entity.Property(e => e.Stmcd3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD3");

                entity.Property(e => e.Stmcd4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD4");

                entity.Property(e => e.Stmcd5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD5");

                entity.Property(e => e.Stmcd6)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD6");

                entity.Property(e => e.Stmcd7)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD7");

                entity.Property(e => e.Stmcd8)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD8");

                entity.Property(e => e.Stmcd9)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STMCD9");

                entity.Property(e => e.Stmdisc)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMDISC");

                entity.Property(e => e.Stmdiscp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMDISCP");

                entity.Property(e => e.Stmdocdate)
                    .HasColumnType("datetime")
                    .HasColumnName("STMDOCDATE");

                entity.Property(e => e.Stmdocno)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("STMDOCNO");

                entity.Property(e => e.Stmfl1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL1");

                entity.Property(e => e.Stmfl10)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL10");

                entity.Property(e => e.Stmfl11)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL11");

                entity.Property(e => e.Stmfl12)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL12");

                entity.Property(e => e.Stmfl13)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL13");

                entity.Property(e => e.Stmfl14)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL14");

                entity.Property(e => e.Stmfl15)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL15");

                entity.Property(e => e.Stmfl16)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL16");

                entity.Property(e => e.Stmfl17)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL17");

                entity.Property(e => e.Stmfl18)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL18");

                entity.Property(e => e.Stmfl19)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL19");

                entity.Property(e => e.Stmfl2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL2");

                entity.Property(e => e.Stmfl20)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL20");

                entity.Property(e => e.Stmfl21)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL21");

                entity.Property(e => e.Stmfl22)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL22");

                entity.Property(e => e.Stmfl23)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL23");

                entity.Property(e => e.Stmfl24)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL24");

                entity.Property(e => e.Stmfl25)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL25");

                entity.Property(e => e.Stmfl26)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL26");

                entity.Property(e => e.Stmfl27)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL27");

                entity.Property(e => e.Stmfl28)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL28");

                entity.Property(e => e.Stmfl29)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL29");

                entity.Property(e => e.Stmfl3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL3");

                entity.Property(e => e.Stmfl30)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL30");

                entity.Property(e => e.Stmfl31)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL31");

                entity.Property(e => e.Stmfl32)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL32");

                entity.Property(e => e.Stmfl33)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL33");

                entity.Property(e => e.Stmfl34)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL34");

                entity.Property(e => e.Stmfl35)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL35");

                entity.Property(e => e.Stmfl36)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL36");

                entity.Property(e => e.Stmfl37)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL37");

                entity.Property(e => e.Stmfl38)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL38");

                entity.Property(e => e.Stmfl39)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL39");

                entity.Property(e => e.Stmfl4)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL4");

                entity.Property(e => e.Stmfl40)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL40");

                entity.Property(e => e.Stmfl41)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL41");

                entity.Property(e => e.Stmfl42)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL42");

                entity.Property(e => e.Stmfl43)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL43");

                entity.Property(e => e.Stmfl44)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL44");

                entity.Property(e => e.Stmfl45)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL45");

                entity.Property(e => e.Stmfl46)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL46");

                entity.Property(e => e.Stmfl47)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL47");

                entity.Property(e => e.Stmfl48)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL48");

                entity.Property(e => e.Stmfl49)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL49");

                entity.Property(e => e.Stmfl5)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL5");

                entity.Property(e => e.Stmfl50)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL50");

                entity.Property(e => e.Stmfl6)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL6");

                entity.Property(e => e.Stmfl7)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL7");

                entity.Property(e => e.Stmfl8)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL8");

                entity.Property(e => e.Stmfl9)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STMFL9");

                entity.Property(e => e.Stmfld1)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD1");

                entity.Property(e => e.Stmfld10)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD10");

                entity.Property(e => e.Stmfld11)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD11");

                entity.Property(e => e.Stmfld12)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD12");

                entity.Property(e => e.Stmfld13)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD13");

                entity.Property(e => e.Stmfld14)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD14");

                entity.Property(e => e.Stmfld15)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD15");

                entity.Property(e => e.Stmfld2)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD2");

                entity.Property(e => e.Stmfld3)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD3");

                entity.Property(e => e.Stmfld4)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD4");

                entity.Property(e => e.Stmfld5)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD5");

                entity.Property(e => e.Stmfld6)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD6");

                entity.Property(e => e.Stmfld7)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD7");

                entity.Property(e => e.Stmfld8)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD8");

                entity.Property(e => e.Stmfld9)
                    .HasColumnType("datetime")
                    .HasColumnName("STMFLD9");

                entity.Property(e => e.Stmfln1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN1");

                entity.Property(e => e.Stmfln10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN10");

                entity.Property(e => e.Stmfln11)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN11");

                entity.Property(e => e.Stmfln12)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN12");

                entity.Property(e => e.Stmfln13)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN13");

                entity.Property(e => e.Stmfln14)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN14");

                entity.Property(e => e.Stmfln15)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN15");

                entity.Property(e => e.Stmfln16)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN16");

                entity.Property(e => e.Stmfln17)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN17");

                entity.Property(e => e.Stmfln18)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN18");

                entity.Property(e => e.Stmfln19)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN19");

                entity.Property(e => e.Stmfln2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN2");

                entity.Property(e => e.Stmfln20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN20");

                entity.Property(e => e.Stmfln21)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN21");

                entity.Property(e => e.Stmfln22)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN22");

                entity.Property(e => e.Stmfln23)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN23");

                entity.Property(e => e.Stmfln24)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN24");

                entity.Property(e => e.Stmfln25)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN25");

                entity.Property(e => e.Stmfln3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN3");

                entity.Property(e => e.Stmfln4)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN4");

                entity.Property(e => e.Stmfln5)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN5");

                entity.Property(e => e.Stmfln6)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN6");

                entity.Property(e => e.Stmfln7)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN7");

                entity.Property(e => e.Stmfln8)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN8");

                entity.Property(e => e.Stmfln9)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFLN9");

                entity.Property(e => e.Stmfreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMFREIGHT");

                entity.Property(e => e.Stmitax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMITAX");

                entity.Property(e => e.Stmitaxp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMITAXP");

                entity.Property(e => e.Stmnetvalue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMNETVALUE");

                entity.Property(e => e.Stmoctroi)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMOCTROI");

                entity.Property(e => e.Stmothr)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMOTHR");

                entity.Property(e => e.Stmsed)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMSED");

                entity.Property(e => e.Stmsedp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMSEDP");

                entity.Property(e => e.Stmstatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("STMSTATUS")
                    .HasDefaultValueSql("('U')");

                entity.Property(e => e.Stmstax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMSTAX");

                entity.Property(e => e.Stmstaxp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STMSTAXP");

                entity.Property(e => e.SysAdd)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SYS_ADD");

                entity.Property(e => e.SysDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SYS_DEL");

                entity.Property(e => e.SysMod)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SYS_MOD");

                entity.Property(e => e.UseridAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERID_ADD");

                entity.Property(e => e.UseridModify)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERID_MODIFY");

                entity.Property(e => e.Wfstatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WFSTATUS")
                    .HasDefaultValueSql("('1')");

                entity.Property(e => e.Yrcode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("YRCODE");
            });

            modelBuilder.Entity<StrfedbnD1>(entity =>
            {
                entity.HasKey(e => e.Stiseqno);

                entity.ToTable("STRFEDBN_d1");

                entity.Property(e => e.Stiseqno)
                    .ValueGeneratedNever()
                    .HasColumnName("STISEQNO");

                entity.Property(e => e.AddDate)
                    .HasColumnType("datetime")
                    .HasColumnName("ADD_DATE");

                entity.Property(e => e.Chaccode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("CHACCODE");

                entity.Property(e => e.DelDate)
                    .HasColumnType("datetime")
                    .HasColumnName("DEL_DATE");

                entity.Property(e => e.IdDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ID_DEL");

                entity.Property(e => e.IpAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_ADD");

                entity.Property(e => e.IpDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_DEL");

                entity.Property(e => e.IpMod)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("IP_MOD");

                entity.Property(e => e.Lccodeto)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LCCODETO");

                entity.Property(e => e.ModDate)
                    .HasColumnType("datetime")
                    .HasColumnName("MOD_DATE");

                entity.Property(e => e.Smitem)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("SMITEM");

                entity.Property(e => e.Staccode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STACCODE");

                entity.Property(e => e.Sticd1)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD1");

                entity.Property(e => e.Sticd10)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD10");

                entity.Property(e => e.Sticd11)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD11");

                entity.Property(e => e.Sticd12)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD12");

                entity.Property(e => e.Sticd13)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD13");

                entity.Property(e => e.Sticd14)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD14");

                entity.Property(e => e.Sticd15)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD15");

                entity.Property(e => e.Sticd16)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD16");

                entity.Property(e => e.Sticd17)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD17");

                entity.Property(e => e.Sticd18)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD18");

                entity.Property(e => e.Sticd19)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD19");

                entity.Property(e => e.Sticd2)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD2");

                entity.Property(e => e.Sticd20)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD20");

                entity.Property(e => e.Sticd21)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD21");

                entity.Property(e => e.Sticd22)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD22");

                entity.Property(e => e.Sticd23)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD23");

                entity.Property(e => e.Sticd24)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD24");

                entity.Property(e => e.Sticd25)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD25");

                entity.Property(e => e.Sticd3)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD3");

                entity.Property(e => e.Sticd4)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD4");

                entity.Property(e => e.Sticd5)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD5");

                entity.Property(e => e.Sticd6)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD6");

                entity.Property(e => e.Sticd7)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD7");

                entity.Property(e => e.Sticd8)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD8");

                entity.Property(e => e.Sticd9)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STICD9");

                entity.Property(e => e.Stidisc)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIDISC");

                entity.Property(e => e.Stidiscp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIDISCP");

                entity.Property(e => e.Stifl1)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL1");

                entity.Property(e => e.Stifl10)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL10");

                entity.Property(e => e.Stifl11)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL11");

                entity.Property(e => e.Stifl12)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL12");

                entity.Property(e => e.Stifl13)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL13");

                entity.Property(e => e.Stifl14)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL14");

                entity.Property(e => e.Stifl15)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL15");

                entity.Property(e => e.Stifl16)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL16");

                entity.Property(e => e.Stifl17)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL17");

                entity.Property(e => e.Stifl18)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL18");

                entity.Property(e => e.Stifl19)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL19");

                entity.Property(e => e.Stifl2)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL2");

                entity.Property(e => e.Stifl20)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL20");

                entity.Property(e => e.Stifl21)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL21");

                entity.Property(e => e.Stifl22)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL22");

                entity.Property(e => e.Stifl23)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL23");

                entity.Property(e => e.Stifl24)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL24");

                entity.Property(e => e.Stifl25)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL25");

                entity.Property(e => e.Stifl26)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL26");

                entity.Property(e => e.Stifl27)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL27");

                entity.Property(e => e.Stifl28)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL28");

                entity.Property(e => e.Stifl29)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL29");

                entity.Property(e => e.Stifl3)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL3");

                entity.Property(e => e.Stifl30)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL30");

                entity.Property(e => e.Stifl31)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL31");

                entity.Property(e => e.Stifl32)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL32");

                entity.Property(e => e.Stifl33)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL33");

                entity.Property(e => e.Stifl34)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL34");

                entity.Property(e => e.Stifl35)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL35");

                entity.Property(e => e.Stifl36)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL36");

                entity.Property(e => e.Stifl37)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL37");

                entity.Property(e => e.Stifl38)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL38");

                entity.Property(e => e.Stifl39)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL39");

                entity.Property(e => e.Stifl4)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL4");

                entity.Property(e => e.Stifl40)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL40");

                entity.Property(e => e.Stifl41)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL41");

                entity.Property(e => e.Stifl42)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL42");

                entity.Property(e => e.Stifl43)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL43");

                entity.Property(e => e.Stifl44)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL44");

                entity.Property(e => e.Stifl45)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL45");

                entity.Property(e => e.Stifl46)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL46");

                entity.Property(e => e.Stifl47)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL47");

                entity.Property(e => e.Stifl48)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL48");

                entity.Property(e => e.Stifl49)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL49");

                entity.Property(e => e.Stifl5)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL5");

                entity.Property(e => e.Stifl50)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL50");

                entity.Property(e => e.Stifl6)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL6");

                entity.Property(e => e.Stifl7)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL7");

                entity.Property(e => e.Stifl8)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL8");

                entity.Property(e => e.Stifl9)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIFL9");

                entity.Property(e => e.Stifld1)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD1");

                entity.Property(e => e.Stifld10)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD10");

                entity.Property(e => e.Stifld11)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD11");

                entity.Property(e => e.Stifld12)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD12");

                entity.Property(e => e.Stifld13)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD13");

                entity.Property(e => e.Stifld14)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD14");

                entity.Property(e => e.Stifld15)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD15");

                entity.Property(e => e.Stifld2)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD2");

                entity.Property(e => e.Stifld3)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD3");

                entity.Property(e => e.Stifld4)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD4");

                entity.Property(e => e.Stifld5)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD5");

                entity.Property(e => e.Stifld6)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD6");

                entity.Property(e => e.Stifld7)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD7");

                entity.Property(e => e.Stifld8)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD8");

                entity.Property(e => e.Stifld9)
                    .HasColumnType("datetime")
                    .HasColumnName("STIFLD9");

                entity.Property(e => e.Stifln1)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN1");

                entity.Property(e => e.Stifln10)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN10");

                entity.Property(e => e.Stifln11)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN11");

                entity.Property(e => e.Stifln12)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN12");

                entity.Property(e => e.Stifln13)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN13");

                entity.Property(e => e.Stifln14)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN14");

                entity.Property(e => e.Stifln15)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN15");

                entity.Property(e => e.Stifln16)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN16");

                entity.Property(e => e.Stifln17)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN17");

                entity.Property(e => e.Stifln18)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN18");

                entity.Property(e => e.Stifln19)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN19");

                entity.Property(e => e.Stifln2)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN2");

                entity.Property(e => e.Stifln20)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN20");

                entity.Property(e => e.Stifln21)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN21");

                entity.Property(e => e.Stifln22)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN22");

                entity.Property(e => e.Stifln23)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN23");

                entity.Property(e => e.Stifln24)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN24");

                entity.Property(e => e.Stifln25)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN25");

                entity.Property(e => e.Stifln3)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN3");

                entity.Property(e => e.Stifln4)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN4");

                entity.Property(e => e.Stifln5)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN5");

                entity.Property(e => e.Stifln6)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN6");

                entity.Property(e => e.Stifln7)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN7");

                entity.Property(e => e.Stifln8)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN8");

                entity.Property(e => e.Stifln9)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFLN9");

                entity.Property(e => e.Stifreight)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIFREIGHT");

                entity.Property(e => e.Stiitax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIITAX");

                entity.Property(e => e.Stiitaxp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIITAXP");

                entity.Property(e => e.Stinetvalue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STINETVALUE");

                entity.Property(e => e.Stioctroi)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIOCTROI");

                entity.Property(e => e.Stiothr)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIOTHR");

                entity.Property(e => e.Stiqty)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIQTY");

                entity.Property(e => e.Stirate)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIRATE");

                entity.Property(e => e.Stiratetag)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("STIRATETAG");

                entity.Property(e => e.Stiremark)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("STIREMARK");

                entity.Property(e => e.Stised)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STISED");

                entity.Property(e => e.Stisedp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STISEDP");

                entity.Property(e => e.Stistax)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STISTAX");

                entity.Property(e => e.Stistaxp)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STISTAXP");

                entity.Property(e => e.Stivalue)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("STIVALUE");

                entity.Property(e => e.Stmseqno).HasColumnName("STMSEQNO");

                entity.Property(e => e.SysAdd)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SYS_ADD");

                entity.Property(e => e.SysDel)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SYS_DEL");

                entity.Property(e => e.SysMod)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("SYS_MOD");

                entity.Property(e => e.Ucode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("UCODE");

                entity.Property(e => e.UseridAdd)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERID_ADD");

                entity.Property(e => e.UseridModify)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("USERID_MODIFY");

                entity.HasOne(d => d.StmseqnoNavigation)
                    .WithMany(p => p.StrfedbnD1s)
                    .HasForeignKey(d => d.Stmseqno)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_STRFEDBN_d1_STRFEDBN");
            });

            modelBuilder.Entity<StrfedbnMl>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("STRFEDBN_ML");

                entity.Property(e => e.Detcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("DETCODE");

                entity.Property(e => e.Flcode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("FLCODE");

                entity.Property(e => e.Levcode)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("LEVCODE");

                entity.Property(e => e.Stiseqno).HasColumnName("STISEQNO");

                entity.Property(e => e.Stmseqno).HasColumnName("STMSEQNO");


            });

            modelBuilder.Entity<XShipmentAttachmentForPortal>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("X_Shipment_Attachment_For_Portal");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XLink)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_Link");

                entity.Property(e => e.FileTitle)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FILETITLE");

                entity.Property(e => e.FileType)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("FILETYPE");

            });
            modelBuilder.Entity<XShipmentAttachment>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("X_Shipment_Attachments");

                entity.Property(e => e.DDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DATE");

                entity.Property(e => e.DocumentStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("DOCUMENT_STATUS");

                entity.Property(e => e.WorkflowStatus)
                    .HasMaxLength(5)
                    .IsUnicode(false)
                    .HasColumnName("WORKFLOW_STATUS");

                entity.Property(e => e.LocationCode)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_CODE");

                entity.Property(e => e.LocationName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("LOCATION_NAME");

                entity.Property(e => e.MasterId).HasColumnName("MASTER_ID");


                entity.Property(e => e.XNumber)
                    .HasColumnType("numeric(20, 0)")
                    .HasColumnName("X_NUMBER");

                entity.Property(e => e.XShipmentNo)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_NO");

                entity.Property(e => e.XLink)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_Link");


                entity.Property(e => e.XShipmentType)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE");

                entity.Property(e => e.XShipmentTypeDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_SHIPMENT_TYPE_DESCRIPTION");


                entity.Property(e => e.XMainCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER");

                entity.Property(e => e.XMainCustomerDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_MAIN_CUSTOMER_DESCRIPTION");

                entity.Property(e => e.XBillBranch)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH");

                entity.Property(e => e.XBillBranchDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_BILL_BRANCH_DESCRIPTION");

                entity.Property(e => e.XCustomer)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_CUSTOMER");

                entity.Property(e => e.XBillingCustomerName)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_BILLING_CUSTOMER_NAME");

                entity.Property(e => e.XCollection)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION");

                entity.Property(e => e.XCollectionDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_COLLECTION_DESCRIPTION");

                entity.Property(e => e.XDelivery)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY");

                entity.Property(e => e.XDeliveryDescription)
                    .HasMaxLength(353)
                    .IsUnicode(false)
                    .HasColumnName("X_DELIVERY_DESCRIPTION");


                entity.Property(e => e.XVehicle)
                    .HasMaxLength(25)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE");

                entity.Property(e => e.XVehicleDescription)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_VEHICLE_DESCRIPTION");

                entity.Property(e => e.DDeliveryDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_DATE");

                entity.Property(e => e.DDeliveryTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_DELIVERY_TIME");

                entity.Property(e => e.DPickDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_DATE");

                entity.Property(e => e.DPickTime)
                    .HasColumnType("datetime")
                    .HasColumnName("D_PICK_TIME");

                entity.Property(e => e.DBillDate)
                    .HasColumnType("datetime")
                    .HasColumnName("D_BILL_DATE");


                entity.Property(e => e.XNoOfBags)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_BAGS");

                entity.Property(e => e.XNoOfSeals)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_NO_OF_SEALS");

                entity.Property(e => e.XAmountCarried)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_AMOUNT_CARRIED");

                entity.Property(e => e.XPortalReference)
                    .HasMaxLength(250)
                    .IsUnicode(false)
                    .HasColumnName("X_PORTAL_REFERENCE");

                entity.Property(e => e.XVaultNights)
                    .HasColumnType("numeric(20, 2)")
                    .HasColumnName("X_VAULT_NIGHTS");



            });


            modelBuilder.Entity<SpResult>(entity =>
            {
                entity.HasNoKey();


            });


            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
