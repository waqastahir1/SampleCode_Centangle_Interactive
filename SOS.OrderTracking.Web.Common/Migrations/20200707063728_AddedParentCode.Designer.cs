// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using SOS.OrderTracking.Web.Common.Data;

namespace SOS.OrderTracking.Web.Common.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200707063728_AddedParentCode")]
    partial class AddedParentCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:.AssetsSeq", "'AssetsSeq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ATMROrdersSeq", "'ATMROrdersSeq', '', '10000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.CITOrdersSeq", "'CITOrdersSeq', '', '10000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.CPCOrdersSeq", "'CPCOrdersSeq', '', '10000', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.PartiesSeq", "'PartiesSeq', '', '100', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(50000);

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubjectId")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "CIT",
                            Name = "CIT",
                            NormalizedName = "CIT"
                        },
                        new
                        {
                            Id = "VAULT",
                            Name = "VAULT",
                            NormalizedName = "VAULT"
                        },
                        new
                        {
                            Id = "CPC",
                            Name = "CPC",
                            NormalizedName = "CPC"
                        },
                        new
                        {
                            Id = "ATMR",
                            Name = "ATMR",
                            NormalizedName = "ATMR"
                        },
                        new
                        {
                            Id = "BANK",
                            Name = "BANK",
                            NormalizedName = "BANK"
                        },
                        new
                        {
                            Id = "BankCPC",
                            Name = "BankCPC",
                            NormalizedName = "BANKCPC"
                        },
                        new
                        {
                            Id = "BankBranch",
                            Name = "BankBranch",
                            NormalizedName = "BANKBRANCH"
                        },
                        new
                        {
                            Id = "Business",
                            Name = "Business",
                            NormalizedName = "BUSINESS"
                        },
                        new
                        {
                            Id = "BusinessOutlet",
                            Name = "BusinessOutlet",
                            NormalizedName = "BUSINESSOUTLET"
                        },
                        new
                        {
                            Id = "SOS-Regional-Admin",
                            Name = "SOS-Regional-Admin",
                            NormalizedName = "SOS-REGIONAL-ADMIN"
                        },
                        new
                        {
                            Id = "SOS-SubRegional-Admin",
                            Name = "SOS-SubRegional-Admin",
                            NormalizedName = "SOS-SUBREGIONAL-ADMIN"
                        },
                        new
                        {
                            Id = "SOS-Admin",
                            Name = "SOS-Admin",
                            NormalizedName = "SOS-ADMIN"
                        },
                        new
                        {
                            Id = "BankGaurding",
                            Name = "BankGaurding",
                            NormalizedName = "BankGaurding"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ATMId")
                        .HasColumnType("int");

                    b.Property<byte>("ATMRServiceType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ATMRepairState")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ATMReplanishmentState")
                        .HasColumnType("tinyint");

                    b.Property<int?>("CachierId")
                        .HasColumnType("int");

                    b.Property<int?>("CashBranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TechnitianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ATMServices");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ATMServiceId")
                        .HasColumnType("int");

                    b.Property<byte>("ATMServiceState")
                        .HasColumnType("tinyint");

                    b.Property<byte>("StateType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ATMServiceId");

                    b.ToTable("ATMServiceLogs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c58e1a9d-1c28-46db-830a-7b3f0b9663f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f15c8378-c937-4fc0-b590-c93b0f1aea4b",
                            Email = "asad@sos.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Asad Mehmood",
                            NormalizedEmail = "ASAD@SOS.COM",
                            NormalizedUserName = "ASAD@SOS.COM",
                            PartyId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEDzPVLOfUXg6/0SLf64ejd+W/UCKgrZ87p7oo8MeJloKnlv64FMoQneGHrAZuoLOzA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7KAJF45HPZHW6SKSDBH4IAK5AFJZZALI",
                            TwoFactorEnabled = false,
                            UserName = "asad@sos.com"
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("AssetType")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubregionId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.AssetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AllocatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AllocatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AllocatedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AllocatedThru")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PartyId");

                    b.ToTable("AssetAllocations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.BankCheckList", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CheckListTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BankCheckLists");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("ChargesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Base Charges"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Surcharge"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Additional Charges"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Seal Charges"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Over Time Charges"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Distance Charges"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Extra Charges"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Waiting Charges"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Toll Charges"
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.CheckListType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckListTypes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Consignment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountPRK")
                        .HasColumnType("int");

                    b.Property<byte>("ConsignmentStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<byte>("CurrencySymbol")
                        .HasColumnType("tinyint");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<byte>("ServiceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ShipmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<byte>("ShipmentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("ToPartyId");

                    b.ToTable("Consignments");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualDropTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualPickupTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CauseOfDropTimeDifference")
                        .HasColumnType("int");

                    b.Property<int?>("CauseOfPickupTimeDifference")
                        .HasColumnType("int");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CrewId")
                        .HasColumnType("int");

                    b.Property<byte>("DeliveryStateType")
                        .HasColumnType("tinyint");

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<string>("DropoffCode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<string>("PickupCode")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("PickupLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlanedDropTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PlanedPickupTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("CrewId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("PickupLocationId");

                    b.ToTable("ConsignmentDeliveries");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentSealCode", b =>
                {
                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<string>("SealCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsignmentId", "SealCode");

                    b.ToTable("ConsignmentSealCodes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DeliveryCharges", b =>
                {
                    b.Property<int>("OrderFulfilmentId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("OrderFulfilmentId", "ChargeTypeId");

                    b.HasIndex("ChargeTypeId");

                    b.ToTable("DeliveryCharges");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DeliveryGeolog", b =>
                {
                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.HasKey("TimeStamp", "DeliveryId");

                    b.ToTable("DeliveryGeologs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DeliveryState", b =>
                {
                    b.Property<int>("ConsignmentDeliveryId")
                        .HasColumnType("int");

                    b.Property<byte>("DeliveryStateType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ConsignmentDeliveryId", "DeliveryStateType");

                    b.ToTable("DeliverStatuses");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Denomination", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CashBundleCount")
                        .HasColumnType("int");

                    b.Property<byte>("CashCountType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int>("Currency1000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency100x")
                        .HasColumnType("int");

                    b.Property<int>("Currency10x")
                        .HasColumnType("int");

                    b.Property<int>("Currency1x")
                        .HasColumnType("int");

                    b.Property<int>("Currency20x")
                        .HasColumnType("int");

                    b.Property<int>("Currency2x")
                        .HasColumnType("int");

                    b.Property<int>("Currency5000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency500x")
                        .HasColumnType("int");

                    b.Property<int>("Currency50x")
                        .HasColumnType("int");

                    b.Property<int>("Currency5x")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.ToTable("Denominations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.GuardsAttendance", b =>
                {
                    b.Property<int>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Approvedby")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<byte>("AttendanceState")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("MarkedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarkedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("RelationshipId", "AttendanceDate");

                    b.ToTable("GuardsAttendance");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<DateTimeOffset?>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.LocationRelationship", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<byte>("FromLocationType")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<byte>("ToLocationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("LocationRelationships");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActionBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasSoundAlert")
                        .HasColumnType("bit");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ExternalBranchType")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ExternalCustomerType")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<bool>("IsCPCBranch")
                        .HasColumnType("bit");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Orgnizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsCPCBranch = false,
                            OrganizationType = 1
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Abbrevation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("FormalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageLink")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<DateTimeOffset>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OfficialContactNo")
                        .HasColumnType("nvarchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("OfficialEmail")
                        .HasColumnType("nvarchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("ParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PartyType")
                        .HasColumnType("int");

                    b.Property<string>("PersonalContactNo")
                        .HasColumnType("nvarchar(127)")
                        .HasMaxLength(127);

                    b.Property<string>("PersonalEmail")
                        .HasColumnType("nvarchar(127)")
                        .HasMaxLength(127);

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubregionId")
                        .HasColumnType("int");

                    b.Property<byte>("SycStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Islamabad",
                            ExternalId = 0,
                            FormalName = "Security Organization Service",
                            LastSync = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartyType = 32,
                            PersonalContactNo = "(051) 4576897",
                            ShortName = "SOS",
                            SycStatus = (byte)0
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("FkPartyId")
                        .HasColumnName("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyAttributes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<int>("FromPartyRole")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.Property<int>("ToPartyRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("FromPartyRole");

                    b.HasIndex("ToPartyId");

                    b.HasIndex("ToPartyRole");

                    b.ToTable("PartyRelationships");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DesignationDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<byte>("EmploymentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ResourceRequest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("AllocationType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<byte>("RequestType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ResourceRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMServiceLog", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ATMService", "ATMService")
                        .WithMany("ATMServiceLogs")
                        .HasForeignKey("ATMServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.AssetAllocation", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Asset", "Asset")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Consignment", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Customer")
                        .WithMany("CustomerOrder")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "FromParty")
                        .WithMany("FromPartyOrders")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "ToParty")
                        .WithMany("ToPartyOrders")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "Consignment")
                        .WithMany("ConsignmentDeliveries")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Crew")
                        .WithMany("Deliveries")
                        .HasForeignKey("CrewId");

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "DestinationLocation")
                        .WithMany("OrderFulfilmentsDestinationLocation")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "PickupLocation")
                        .WithMany("OrderFulfilmentsPickupLocation")
                        .HasForeignKey("PickupLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DeliveryCharges", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ChargeType", "ChargeType")
                        .WithMany("DeliveryCharges")
                        .HasForeignKey("ChargeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", "ConsignmentDelivery")
                        .WithMany("DeliveryCharges")
                        .HasForeignKey("OrderFulfilmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Denomination", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "FkWorkOrder")
                        .WithMany("Denominations")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.GuardsAttendance", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", "AllocationRelationship")
                        .WithMany("GuardsAttendances")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.LocationRelationship", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "FromLocation")
                        .WithMany("LocationRelationshipsFromLocation")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "ToLocation")
                        .WithMany("LocationRelationshipsToLocation")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Organization", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithOne("Orgnization")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithOne("PartyAttributes")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "FromParty")
                        .WithMany("PartyRelationshipsFromParty")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "ToParty")
                        .WithMany("PartyRelationshipsToParty")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Person", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Origin")
                        .WithOne("People")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
