// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using SOS.OrderTracking.Web.Common.Data;

namespace SOS.OrderTracking.Web.Common.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210110155657_AddedSortOrder")]
    partial class AddedSortOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.HasSequence("AssetsSeq")
                .StartsAt(100L);

            modelBuilder.HasSequence("ATMROrdersSeq")
                .StartsAt(10000L);

            modelBuilder.HasSequence("CITOrdersSeq")
                .StartsAt(10000L);

            modelBuilder.HasSequence("CPCOrdersSeq")
                .StartsAt(10000L);

            modelBuilder.HasSequence("DedicatedVehiclesSeq")
                .StartsAt(100L);

            modelBuilder.HasSequence("NotificationSeq")
                .StartsAt(100L);

            modelBuilder.HasSequence("PartiesSeq")
                .StartsAt(100L);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "CIT",
                            Name = "CIT",
                            NormalizedName = "CIT"
                        },
                        new
                        {
                            Id = "VAULT",
                            Name = "VAULT",
                            NormalizedName = "VAULT"
                        },
                        new
                        {
                            Id = "CPC",
                            Name = "CPC",
                            NormalizedName = "CPC"
                        },
                        new
                        {
                            Id = "ATMR",
                            Name = "ATMR",
                            NormalizedName = "ATMR"
                        },
                        new
                        {
                            Id = "BANK",
                            Name = "BANK",
                            NormalizedName = "BANK"
                        },
                        new
                        {
                            Id = "BankCPC",
                            Name = "BankCPC",
                            NormalizedName = "BANKCPC"
                        },
                        new
                        {
                            Id = "BankBranch",
                            Name = "BankBranch",
                            NormalizedName = "BANKBRANCH"
                        },
                        new
                        {
                            Id = "Business",
                            Name = "Business",
                            NormalizedName = "BUSINESS"
                        },
                        new
                        {
                            Id = "BusinessOutlet",
                            Name = "BusinessOutlet",
                            NormalizedName = "BUSINESSOUTLET"
                        },
                        new
                        {
                            Id = "SOS-Regional-Admin",
                            Name = "SOS-Regional-Admin",
                            NormalizedName = "SOS-REGIONAL-ADMIN"
                        },
                        new
                        {
                            Id = "SOS-SubRegional-Admin",
                            Name = "SOS-SubRegional-Admin",
                            NormalizedName = "SOS-SUBREGIONAL-ADMIN"
                        },
                        new
                        {
                            Id = "SOS-Admin",
                            Name = "SOS-Admin",
                            NormalizedName = "SOS-ADMIN"
                        },
                        new
                        {
                            Id = "BankGaurding",
                            Name = "BankGaurding",
                            NormalizedName = "BankGaurding"
                        },
                        new
                        {
                            Id = "BankBranchManager",
                            Name = "BankBranchManager",
                            NormalizedName = "BankBranchManager"
                        },
                        new
                        {
                            Id = "BankCPCManager",
                            Name = "BankCPCManager",
                            NormalizedName = "BankCPCManager"
                        },
                        new
                        {
                            Id = "SOS-Headoffice-Billing",
                            Name = "SOS-Headoffice-Billing",
                            NormalizedName = "SOS-HEADOFFICE-BILLING"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMRSealCode", b =>
                {
                    b.Property<int>("AtmrServiceId")
                        .HasColumnType("int");

                    b.Property<string>("SealCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AtmrServiceId", "SealCode");

                    b.ToTable("ATMRSealCodes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMService", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ATMId")
                        .HasColumnType("int");

                    b.Property<byte>("ATMRServiceType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("ATMReplanishmentState")
                        .HasColumnType("tinyint");

                    b.Property<int>("AccessCashReturnShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("CITDropoffQrCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("CITPickupQrCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("CachierId")
                        .HasColumnType("int");

                    b.Property<int>("CardReturnShipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CashBranchId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currency1000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency5000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency500x")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PickupQrCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("ReturnCITPickupQrCode")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ReturnShipmentId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ShipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("TechnitianId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ATMServices");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMServiceLog", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ATMServiceId")
                        .HasColumnType("int");

                    b.Property<byte>("ATMServiceState")
                        .HasColumnType("tinyint");

                    b.Property<byte>("StateType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ATMServiceId");

                    b.ToTable("ATMServiceLogs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FCMToken")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IMEINumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateddAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "c58e1a9d-1c28-46db-830a-7b3f0b9663f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f15c8378-c937-4fc0-b590-c93b0f1aea4b",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asad@sos.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            Name = "Asad Mehmood",
                            NormalizedEmail = "ASAD@SOS.COM",
                            NormalizedUserName = "ASAD@SOS.COM",
                            PartyId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEDzPVLOfUXg6/0SLf64ejd+W/UCKgrZ87p7oo8MeJloKnlv64FMoQneGHrAZuoLOzA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7KAJF45HPZHW6SKSDBH4IAK5AFJZZALI",
                            TwoFactorEnabled = false,
                            UserName = "asad@sos.com"
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<short>("AssetType")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("StationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubregionId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.AssetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("AllocatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AllocatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AllocatedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AllocatedThru")
                        .HasColumnType("datetime2");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PartyId");

                    b.ToTable("AssetAllocations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.BankCheckList", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CheckListTypeId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BankCheckLists");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.CheckListType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CheckListTypes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Consignment", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualCollectionTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AmountPKR")
                        .HasColumnType("int");

                    b.Property<int>("BillBranchId")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ConsignmentStateType")
                        .HasColumnType("tinyint");

                    b.Property<short>("ConsignmentStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("CurrencySymbol")
                        .HasColumnType("tinyint");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<byte>("DistanceStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DueTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<int>("MainCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ManualShipmentCode")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("PlanedCollectionTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlanedDeliveryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostingMessage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("ServiceType")
                        .HasColumnType("tinyint");

                    b.Property<string>("ShipmentCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<byte>("ShipmentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Valueables")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BillBranchId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("MainCustomerId");

                    b.HasIndex("ToPartyId");

                    b.ToTable("Consignments");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActualDropTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualPickupTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("CauseOfDropTimeDifference")
                        .HasColumnType("int");

                    b.Property<int?>("CauseOfPickupTimeDifference")
                        .HasColumnType("int");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CrewId")
                        .HasColumnType("int");

                    b.Property<byte>("DeliveryState")
                        .HasColumnType("tinyint");

                    b.Property<int>("DestinationLocationId")
                        .HasColumnType("int");

                    b.Property<string>("DropoffCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVault")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PickupCode")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PickupLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PlanedDropTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlanedPickupTime")
                        .HasColumnType("datetime");

                    b.Property<byte>("SerialNo")
                        .HasColumnType("tinyint");

                    b.Property<int>("TemporalState")
                        .HasColumnType("int");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.HasIndex("CrewId");

                    b.HasIndex("DestinationLocationId");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PickupLocationId");

                    b.HasIndex("ToPartyId");

                    b.ToTable("ConsignmentDeliveries");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentState", b =>
                {
                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<byte>("ConsignmentStateType")
                        .HasColumnType("tinyint");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Tag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ConsignmentId", "ConsignmentStateType");

                    b.ToTable("ConsignmentStates");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DedicatedVehiclesCapacity", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToDate")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("VehicleCapacity")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("DedicatedVehiclesCapacities");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.DeliveryGeolog", b =>
                {
                    b.Property<long>("TimeStamp")
                        .HasColumnType("bigint");

                    b.Property<int>("DeliveryId")
                        .HasColumnType("int");

                    b.Property<Point>("Location")
                        .HasColumnType("geography");

                    b.HasKey("TimeStamp", "DeliveryId");

                    b.ToTable("DeliveryGeologs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Denomination", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int>("Currency1000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency100x")
                        .HasColumnType("int");

                    b.Property<int>("Currency10x")
                        .HasColumnType("int");

                    b.Property<int>("Currency1x")
                        .HasColumnType("int");

                    b.Property<int>("Currency20x")
                        .HasColumnType("int");

                    b.Property<int>("Currency2x")
                        .HasColumnType("int");

                    b.Property<int>("Currency5000x")
                        .HasColumnType("int");

                    b.Property<int>("Currency500x")
                        .HasColumnType("int");

                    b.Property<int>("Currency50x")
                        .HasColumnType("int");

                    b.Property<int>("Currency5x")
                        .HasColumnType("int");

                    b.Property<byte>("DenominationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.ToTable("ConsignmentDenomination");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.EmployeeAttendance", b =>
                {
                    b.Property<int>("RelationshipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Approvedby")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("AttendanceState")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MarkedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MarkedBy")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RelationshipId", "AttendanceDate");

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.IntraPartyDistance", b =>
                {
                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.Property<int>("AverageTravelTime")
                        .HasColumnType("int");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<byte>("DistanceStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FromPartyId", "ToPartyId");

                    b.ToTable("IntraPartyDistances");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Abbrevation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<DateTimeOffset?>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbrevation = "",
                            Code = "Dummy",
                            Description = "Dummy",
                            ExternalId = 1,
                            Name = "Dummy",
                            Status = (byte)1,
                            Type = (byte)64,
                            UpdatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.LocationRelationship", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<byte>("FromLocationType")
                        .HasColumnType("tinyint");

                    b.Property<DateTimeOffset>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<int>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<byte>("ToLocationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FromLocationId");

                    b.HasIndex("ToLocationId");

                    b.ToTable("LocationRelationships");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ActionBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("NotificationCategory")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NotificationMedium")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NotificationStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("NotificationType")
                        .HasColumnType("tinyint");

                    b.Property<string>("P256dh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiverUserName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderUserName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.NotificationSubscription", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("P256dh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotificationSubscriptions");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("ExternalBranchType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ExternalCustomerType")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.Property<DateTime?>("GeolocationUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<short>("GeolocationVersion")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsCPCBranch")
                        .HasColumnType("bit");

                    b.Property<byte>("LocationStatus")
                        .HasColumnType("tinyint");

                    b.Property<int>("OrganizationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsCPCBranch");

                    b.HasIndex("OrganizationType");

                    b.ToTable("Orgnizations");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            GeolocationVersion = (short)0,
                            IsCPCBranch = false,
                            LocationStatus = (byte)0,
                            OrganizationType = 0
                        },
                        new
                        {
                            Id = 1,
                            GeolocationVersion = (short)0,
                            IsCPCBranch = false,
                            LocationStatus = (byte)0,
                            OrganizationType = 1
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Party", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Abbrevation")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Address")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<string>("FormalName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("ImageLink")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("JsonData")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("LastSync")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OfficialContactNo")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("OfficialEmail")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("ParentCode")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int>("PartyType")
                        .HasColumnType("int");

                    b.Property<string>("PersonalContactNo")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<string>("PersonalEmail")
                        .HasMaxLength(127)
                        .HasColumnType("nvarchar(127)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("ShortName")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<int?>("StationId")
                        .HasColumnType("int");

                    b.Property<int?>("SubregionId")
                        .HasColumnType("int");

                    b.Property<byte>("SycStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAtErp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Parties");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Address = "Nill",
                            ExternalId = 0,
                            FormalName = "Nill",
                            IsActive = true,
                            LastSync = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartyType = 32,
                            PersonalContactNo = "Nill",
                            ShortName = "Nill",
                            SycStatus = (byte)0
                        },
                        new
                        {
                            Id = 1,
                            Address = "Islamabad",
                            ExternalId = 0,
                            FormalName = "Security Organization Service",
                            IsActive = true,
                            LastSync = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            PartyType = 32,
                            PersonalContactNo = "(051) 4576897",
                            ShortName = "SOS",
                            SycStatus = (byte)0
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("AttributeType")
                        .HasColumnType("int");

                    b.Property<int>("FkPartyId")
                        .HasColumnType("int")
                        .HasColumnName("PartyId");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PartyAttributes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyLocation", b =>
                {
                    b.Property<int>("PartyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatdBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Point>("Geolocation")
                        .HasColumnType("geography");

                    b.HasKey("PartyId", "TimeStamp");

                    b.ToTable("PartyLocations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("FromPartyId")
                        .HasColumnType("int");

                    b.Property<int>("FromPartyRole")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.Property<int>("ToPartyId")
                        .HasColumnType("int");

                    b.Property<int>("ToPartyRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromPartyId");

                    b.HasIndex("FromPartyRole");

                    b.HasIndex("ToPartyId");

                    b.HasIndex("ToPartyRole");

                    b.ToTable("PartyRelationships");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("DesignationDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DesignationId")
                        .HasColumnType("int");

                    b.Property<byte>("EmploymentType")
                        .HasColumnType("tinyint");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("NationalId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ResourceRequest", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<byte>("AllocationType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remarks1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<byte>("RequestType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestedById")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ResourceRequests");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ScheduledConsignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<int>("Minute")
                        .HasColumnType("int");

                    b.Property<byte>("ScheduleStatus")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConsignmentId");

                    b.ToTable("ScheduledConsignments");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentCharge", b =>
                {
                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<int>("ChargeTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Tag")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConsignmentId", "ChargeTypeId");

                    b.HasIndex("ChargeTypeId");

                    b.ToTable("ShipmentCharges");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentChargeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentChargeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Waiting Charges"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Toll Charges"
                        });
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentSealCode", b =>
                {
                    b.Property<int>("ConsignmentId")
                        .HasColumnType("int");

                    b.Property<string>("SealCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsignmentId", "SealCode");

                    b.ToTable("ShipmentSealCodes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMServiceLog", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ATMService", "ATMService")
                        .WithMany("ATMServiceLogs")
                        .HasForeignKey("ATMServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ATMService");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.AssetAllocation", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Asset", "Asset")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithMany("AssetAllocations")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Consignment", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "BillBranch")
                        .WithMany("BillBranchOrders")
                        .HasForeignKey("BillBranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "FromParty")
                        .WithMany("FromPartyOrders")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "MainCustomer")
                        .WithMany("MainCustomerOrders")
                        .HasForeignKey("MainCustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "ToParty")
                        .WithMany("ToPartyOrders")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillBranch");

                    b.Navigation("Customer");

                    b.Navigation("FromParty");

                    b.Navigation("MainCustomer");

                    b.Navigation("ToParty");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "Consignment")
                        .WithMany("ConsignmentDeliveries")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Crew")
                        .WithMany("Deliveries")
                        .HasForeignKey("CrewId");

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "DestinationLocation")
                        .WithMany("OrderFulfilmentsDestinationLocation")
                        .HasForeignKey("DestinationLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "FromParty")
                        .WithMany("FromPartyDeliveries")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", "Parent")
                        .WithMany("Childern")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "PickupLocation")
                        .WithMany("OrderFulfilmentsPickupLocation")
                        .HasForeignKey("PickupLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "ToParty")
                        .WithMany("ToPartyDeliveries")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consignment");

                    b.Navigation("Crew");

                    b.Navigation("DestinationLocation");

                    b.Navigation("FromParty");

                    b.Navigation("Parent");

                    b.Navigation("PickupLocation");

                    b.Navigation("ToParty");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Denomination", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "FkWorkOrder")
                        .WithMany("Denominations")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FkWorkOrder");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.EmployeeAttendance", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", "AllocationRelationship")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("RelationshipId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("AllocationRelationship");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.LocationRelationship", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "FromLocation")
                        .WithMany("LocationRelationshipsFromLocation")
                        .HasForeignKey("FromLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Location", "ToLocation")
                        .WithMany("LocationRelationshipsToLocation")
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FromLocation");

                    b.Navigation("ToLocation");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Organization", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithOne("Orgnization")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Party")
                        .WithOne("PartyAttributes")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.PartyAttribute", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Party");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "FromParty")
                        .WithMany("PartyRelationshipsFromParty")
                        .HasForeignKey("FromPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "ToParty")
                        .WithMany("PartyRelationshipsToParty")
                        .HasForeignKey("ToPartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromParty");

                    b.Navigation("ToParty");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Person", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Party", "Origin")
                        .WithOne("People")
                        .HasForeignKey("SOS.OrderTracking.Web.Common.Data.Models.Person", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ScheduledConsignment", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "FkConsignment")
                        .WithMany("ScheduledConsignments")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FkConsignment");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentCharge", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.ShipmentChargeType", "ChargeType")
                        .WithMany("DeliveryCharges")
                        .HasForeignKey("ChargeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "Consignment")
                        .WithMany("DeliveryCharges")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargeType");

                    b.Navigation("Consignment");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentSealCode", b =>
                {
                    b.HasOne("SOS.OrderTracking.Web.Common.Data.Models.Consignment", "Consignment")
                        .WithMany("ShipmentSealCodes")
                        .HasForeignKey("ConsignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consignment");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ATMService", b =>
                {
                    b.Navigation("ATMServiceLogs");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Asset", b =>
                {
                    b.Navigation("AssetAllocations");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Consignment", b =>
                {
                    b.Navigation("ConsignmentDeliveries");

                    b.Navigation("DeliveryCharges");

                    b.Navigation("Denominations");

                    b.Navigation("ScheduledConsignments");

                    b.Navigation("ShipmentSealCodes");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ConsignmentDelivery", b =>
                {
                    b.Navigation("Childern");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Location", b =>
                {
                    b.Navigation("LocationRelationshipsFromLocation");

                    b.Navigation("LocationRelationshipsToLocation");

                    b.Navigation("OrderFulfilmentsDestinationLocation");

                    b.Navigation("OrderFulfilmentsPickupLocation");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.Party", b =>
                {
                    b.Navigation("AssetAllocations");

                    b.Navigation("BillBranchOrders");

                    b.Navigation("CustomerOrders");

                    b.Navigation("Deliveries");

                    b.Navigation("FromPartyDeliveries");

                    b.Navigation("FromPartyOrders");

                    b.Navigation("MainCustomerOrders");

                    b.Navigation("Orgnization");

                    b.Navigation("PartyAttributes");

                    b.Navigation("PartyRelationshipsFromParty");

                    b.Navigation("PartyRelationshipsToParty");

                    b.Navigation("People");

                    b.Navigation("ToPartyDeliveries");

                    b.Navigation("ToPartyOrders");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.PartyRelationship", b =>
                {
                    b.Navigation("EmployeeAttendances");
                });

            modelBuilder.Entity("SOS.OrderTracking.Web.Common.Data.Models.ShipmentChargeType", b =>
                {
                    b.Navigation("DeliveryCharges");
                });
#pragma warning restore 612, 618
        }
    }
}
